import { WebStorage } from '@backstage/core-app-api';
import { ResponseError } from '@backstage/errors';
import ObservableImpl from 'zen-observable';
import { createRouteRef, createPlugin, createRoutableExtension, useRouteRef, useApi, errorApiRef, SessionState, googleAuthApiRef, microsoftAuthApiRef, githubAuthApiRef, gitlabAuthApiRef, oktaAuthApiRef, bitbucketAuthApiRef, oneloginAuthApiRef, atlassianAuthApiRef, bitbucketServerAuthApiRef, configApiRef, featureFlagsApiRef, FeatureFlagState, identityApiRef, alertApiRef, appThemeApiRef, attachComponentData, useElementFilter } from '@backstage/core-plugin-api';
import React, { useState, useEffect, useCallback, cloneElement } from 'react';
import SettingsIcon from '@material-ui/icons/Settings';
import { SidebarItem, EmptyState, CodeSnippet, sidebarConfig, InfoCard, useSidebarPinState, Page, Header, RoutedTabs } from '@backstage/core-components';
import { useOutlet } from 'react-router-dom';
import { Typography, Button, makeStyles, Avatar, ListItem, ListItemIcon, ListItemText, Tooltip, Grid, ListItemSecondaryAction, List, Switch, TextField, IconButton, Menu, MenuItem } from '@material-ui/core';
import Star from '@material-ui/icons/Star';
import ClearIcon from '@material-ui/icons/Clear';
import useAsync from 'react-use/lib/useAsync';
import SignOutIcon from '@material-ui/icons/MeetingRoom';
import MoreVertIcon from '@material-ui/icons/MoreVert';
import useObservable from 'react-use/lib/useObservable';
import AutoIcon from '@material-ui/icons/BrightnessAuto';
import ToggleButton from '@material-ui/lab/ToggleButton';
import ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';
import { EntityRefLinks } from '@backstage/plugin-catalog-react';
import Grid$1 from '@material-ui/core/Grid';
import Typography$1 from '@material-ui/core/Typography';

const JSON_HEADERS = {
  "Content-Type": "application/json; charset=utf-8",
  Accept: "application/json"
};
const buckets = /* @__PURE__ */ new Map();
class UserSettingsStorage {
  constructor(namespace, fetchApi, discoveryApi, errorApi, identityApi, fallback) {
    this.namespace = namespace;
    this.fetchApi = fetchApi;
    this.discoveryApi = discoveryApi;
    this.errorApi = errorApi;
    this.identityApi = identityApi;
    this.fallback = fallback;
    this.subscribers = /* @__PURE__ */ new Set();
    this.observables = /* @__PURE__ */ new Map();
  }
  static create(options) {
    var _a;
    return new UserSettingsStorage(
      (_a = options.namespace) != null ? _a : "default",
      options.fetchApi,
      options.discoveryApi,
      options.errorApi,
      options.identityApi,
      WebStorage.create({
        namespace: options.namespace,
        errorApi: options.errorApi
      })
    );
  }
  forBucket(name) {
    const bucketPath = `${this.namespace}.${name}`;
    if (!buckets.has(bucketPath)) {
      buckets.set(
        bucketPath,
        new UserSettingsStorage(
          bucketPath,
          this.fetchApi,
          this.discoveryApi,
          this.errorApi,
          this.identityApi,
          this.fallback
        )
      );
    }
    return buckets.get(bucketPath);
  }
  async remove(key) {
    const fetchUrl = await this.getFetchUrl(key);
    const response = await this.fetchApi.fetch(fetchUrl, {
      method: "DELETE"
    });
    if (!response.ok && response.status !== 404) {
      throw await ResponseError.fromResponse(response);
    }
    this.notifyChanges({ key, presence: "absent" });
  }
  async set(key, data) {
    if (!await this.isSignedIn()) {
      await this.fallback.set(key, data);
      this.notifyChanges({ key, presence: "present", value: data });
      return;
    }
    const fetchUrl = await this.getFetchUrl(key);
    const response = await this.fetchApi.fetch(fetchUrl, {
      method: "PUT",
      headers: JSON_HEADERS,
      body: JSON.stringify({ value: data })
    });
    if (!response.ok) {
      throw await ResponseError.fromResponse(response);
    }
    const { value } = await response.json();
    this.notifyChanges({ key, value, presence: "present" });
  }
  observe$(key) {
    if (!this.observables.has(key)) {
      this.observables.set(
        key,
        new ObservableImpl((subscriber) => {
          this.subscribers.add(subscriber);
          Promise.resolve().then(() => this.get(key)).then((snapshot) => subscriber.next(snapshot)).catch((error) => this.errorApi.post(error));
          return () => {
            this.subscribers.delete(subscriber);
          };
        }).filter(({ key: messageKey }) => messageKey === key)
      );
    }
    return this.observables.get(key);
  }
  snapshot(key) {
    return { key, presence: "unknown" };
  }
  async get(key) {
    if (!await this.isSignedIn()) {
      return this.fallback.snapshot(key);
    }
    const fetchUrl = await this.getFetchUrl(key);
    const response = await this.fetchApi.fetch(fetchUrl);
    if (response.status === 404) {
      return { key, presence: "absent" };
    }
    if (!response.ok) {
      throw await ResponseError.fromResponse(response);
    }
    try {
      const { value: rawValue } = await response.json();
      const value = JSON.parse(JSON.stringify(rawValue), (_key, val) => {
        if (typeof val === "object" && val !== null) {
          Object.freeze(val);
        }
        return val;
      });
      return { key, presence: "present", value };
    } catch {
      return { key, presence: "absent" };
    }
  }
  async getFetchUrl(key) {
    const baseUrl = await this.discoveryApi.getBaseUrl("user-settings");
    const encodedNamespace = encodeURIComponent(this.namespace);
    const encodedKey = encodeURIComponent(key);
    return `${baseUrl}/buckets/${encodedNamespace}/keys/${encodedKey}`;
  }
  async notifyChanges(snapshot) {
    for (const subscription of this.subscribers) {
      try {
        subscription.next(snapshot);
      } catch {
      }
    }
  }
  async isSignedIn() {
    try {
      const credentials = await this.identityApi.getCredentials();
      return (credentials == null ? void 0 : credentials.token) ? true : false;
    } catch {
      return false;
    }
  }
}

const settingsRouteRef = createRouteRef({
  id: "user-settings"
});
const userSettingsPlugin = createPlugin({
  id: "user-settings",
  routes: {
    settingsPage: settingsRouteRef
  }
});
const UserSettingsPage = userSettingsPlugin.provide(
  createRoutableExtension({
    name: "UserSettingsPage",
    component: () => import('./esm/index-0c4a2bed.esm.js').then((m) => m.SettingsPage),
    mountPoint: settingsRouteRef
  })
);

const Settings = (props) => {
  const routePath = useRouteRef(settingsRouteRef);
  const Icon = props.icon ? props.icon : SettingsIcon;
  return /* @__PURE__ */ React.createElement(SidebarItem, { text: "Settings", to: routePath(), icon: Icon });
};

const EXAMPLE$1 = `auth:
  providers:
    google:
      development:
        clientId: \${AUTH_GOOGLE_CLIENT_ID}
        clientSecret: \${AUTH_GOOGLE_CLIENT_SECRET}
`;
const EmptyProviders = () => /* @__PURE__ */ React.createElement(
  EmptyState,
  {
    missing: "content",
    title: "No Authentication Providers",
    description: "You can add Authentication Providers to Backstage which allows you to use these providers to authenticate yourself.",
    action: /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, { variant: "body1" }, "Open ", /* @__PURE__ */ React.createElement("code", null, "app-config.yaml"), " and make the changes as highlighted below:"), /* @__PURE__ */ React.createElement(
      CodeSnippet,
      {
        text: EXAMPLE$1,
        language: "yaml",
        showLineNumbers: true,
        highlightedNumbers: [3, 4, 5, 6, 7, 8],
        customStyle: { background: "inherit", fontSize: "115%" }
      }
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        color: "primary",
        href: "https://backstage.io/docs/auth/add-auth-provider"
      },
      "Read More"
    ))
  }
);

const useStyles$2 = makeStyles((theme) => ({
  avatar: {
    width: ({ size }) => size,
    height: ({ size }) => size,
    fontSize: ({ size }) => size * 0.7,
    border: `1px solid ${theme.palette.textSubtle}`
  }
}));
const ProviderSettingsAvatar = ({ size, picture }) => {
  const { iconSize } = sidebarConfig;
  const classes = useStyles$2(size ? { size } : { size: iconSize });
  return /* @__PURE__ */ React.createElement(Avatar, { src: picture, className: classes.avatar });
};

const ProviderSettingsItem = (props) => {
  const { title, description, icon: Icon, apiRef } = props;
  const api = useApi(apiRef);
  const errorApi = useApi(errorApiRef);
  const [signedIn, setSignedIn] = useState(false);
  const emptyProfile = {};
  const [profile, setProfile] = useState(emptyProfile);
  useEffect(() => {
    let didCancel = false;
    const subscription = api.sessionState$().subscribe((sessionState) => {
      if (!didCancel) {
        api.getProfile({ optional: true }).then((profileResponse) => {
          if (!didCancel) {
            if (sessionState === SessionState.SignedIn) {
              setSignedIn(true);
            }
            if (profileResponse) {
              setProfile(profileResponse);
            }
          }
        });
      }
    });
    return () => {
      didCancel = true;
      subscription.unsubscribe();
    };
  }, [api]);
  return /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Icon, null)), /* @__PURE__ */ React.createElement(
    ListItemText,
    {
      primary: title,
      secondary: /* @__PURE__ */ React.createElement(Tooltip, { placement: "top", arrow: true, title: description }, /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 6 }, /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(ProviderSettingsAvatar, { size: 48, picture: profile.picture })), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12, sm: true, container: true }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true, container: true, direction: "column", spacing: 2 }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true }, /* @__PURE__ */ React.createElement(
        Typography,
        {
          variant: "subtitle1",
          color: "textPrimary",
          gutterBottom: true
        },
        profile.displayName
      ), /* @__PURE__ */ React.createElement(Typography, { variant: "body2", color: "textSecondary" }, profile.email), /* @__PURE__ */ React.createElement(Typography, { variant: "body2", color: "textSecondary" }, description)))))),
      secondaryTypographyProps: { noWrap: true, style: { width: "80%" } }
    }
  ), /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, /* @__PURE__ */ React.createElement(
    Tooltip,
    {
      placement: "top",
      arrow: true,
      title: signedIn ? `Sign out from ${title}` : `Sign in to ${title}`
    },
    /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outlined",
        color: "primary",
        onClick: () => {
          const action = signedIn ? api.signOut() : api.signIn();
          action.catch((error) => errorApi.post(error));
        }
      },
      signedIn ? `Sign out` : `Sign in`
    )
  )));
};

const DefaultProviderSettings = (props) => {
  const { configuredProviders } = props;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, configuredProviders.includes("google") && /* @__PURE__ */ React.createElement(
    ProviderSettingsItem,
    {
      title: "Google",
      description: "Provides authentication towards Google APIs and identities",
      apiRef: googleAuthApiRef,
      icon: Star
    }
  ), configuredProviders.includes("microsoft") && /* @__PURE__ */ React.createElement(
    ProviderSettingsItem,
    {
      title: "Microsoft",
      description: "Provides authentication towards Microsoft APIs and identities",
      apiRef: microsoftAuthApiRef,
      icon: Star
    }
  ), configuredProviders.includes("github") && /* @__PURE__ */ React.createElement(
    ProviderSettingsItem,
    {
      title: "GitHub",
      description: "Provides authentication towards GitHub APIs",
      apiRef: githubAuthApiRef,
      icon: Star
    }
  ), configuredProviders.includes("gitlab") && /* @__PURE__ */ React.createElement(
    ProviderSettingsItem,
    {
      title: "GitLab",
      description: "Provides authentication towards GitLab APIs",
      apiRef: gitlabAuthApiRef,
      icon: Star
    }
  ), configuredProviders.includes("okta") && /* @__PURE__ */ React.createElement(
    ProviderSettingsItem,
    {
      title: "Okta",
      description: "Provides authentication towards Okta APIs",
      apiRef: oktaAuthApiRef,
      icon: Star
    }
  ), configuredProviders.includes("bitbucket") && /* @__PURE__ */ React.createElement(
    ProviderSettingsItem,
    {
      title: "Bitbucket",
      description: "Provides authentication towards Bitbucket APIs",
      apiRef: bitbucketAuthApiRef,
      icon: Star
    }
  ), configuredProviders.includes("onelogin") && /* @__PURE__ */ React.createElement(
    ProviderSettingsItem,
    {
      title: "OneLogin",
      description: "Provides authentication towards OneLogin APIs",
      apiRef: oneloginAuthApiRef,
      icon: Star
    }
  ), configuredProviders.includes("atlassian") && /* @__PURE__ */ React.createElement(
    ProviderSettingsItem,
    {
      title: "Atlassian",
      description: "Provides authentication towards Atlassian APIs",
      apiRef: atlassianAuthApiRef,
      icon: Star
    }
  ), configuredProviders.includes("bitbucketServer") && /* @__PURE__ */ React.createElement(
    ProviderSettingsItem,
    {
      title: "Bitbucket Server",
      description: "Provides authentication towards Bitbucket Server APIs",
      apiRef: bitbucketServerAuthApiRef,
      icon: Star
    }
  ));
};

const UserSettingsAuthProviders = (props) => {
  const { providerSettings } = props;
  const configApi = useApi(configApiRef);
  const providersConfig = configApi.getOptionalConfig("auth.providers");
  const configuredProviders = (providersConfig == null ? void 0 : providersConfig.keys()) || [];
  const providers = providerSettings != null ? providerSettings : /* @__PURE__ */ React.createElement(DefaultProviderSettings, { configuredProviders });
  if (!providerSettings && !(configuredProviders == null ? void 0 : configuredProviders.length)) {
    return /* @__PURE__ */ React.createElement(EmptyProviders, null);
  }
  return /* @__PURE__ */ React.createElement(InfoCard, { title: "Available Providers" }, /* @__PURE__ */ React.createElement(List, { dense: true }, providers));
};

const EXAMPLE = `import { createPlugin } from '@backstage/core-plugin-api';

export default createPlugin({
  id: 'plugin-name',
  featureFlags: [{ name: 'enable-example-feature' }],
});
`;
const EmptyFlags = () => /* @__PURE__ */ React.createElement(
  EmptyState,
  {
    missing: "content",
    title: "No Feature Flags",
    description: "Feature Flags make it possible for plugins to register features in Backstage for users to opt into. You can use this to split out logic in your code for manual A/B testing, etc.",
    action: /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, { variant: "body1" }, "An example for how to add a feature flag is highlighted below:"), /* @__PURE__ */ React.createElement(
      CodeSnippet,
      {
        text: EXAMPLE,
        language: "typescript",
        showLineNumbers: true,
        highlightedNumbers: [6],
        customStyle: { background: "inherit", fontSize: "115%" }
      }
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        color: "primary",
        href: "https://backstage.io/docs/api/utility-apis"
      },
      "Read More"
    ))
  }
);

const getSecondaryText = (flag) => {
  if (flag.description) {
    return flag.description;
  }
  return flag.pluginId ? `Registered in ${flag.pluginId} plugin` : "Registered in the application";
};
const FlagItem = ({ flag, enabled, toggleHandler }) => /* @__PURE__ */ React.createElement(ListItem, { divider: true, button: true, onClick: () => toggleHandler(flag.name) }, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, { placement: "top", arrow: true, title: enabled ? "Disable" : "Enable" }, /* @__PURE__ */ React.createElement(Switch, { color: "primary", checked: enabled, name: flag.name }))), /* @__PURE__ */ React.createElement(ListItemText, { primary: flag.name, secondary: getSecondaryText(flag) }));

const UserSettingsFeatureFlags = () => {
  const featureFlagsApi = useApi(featureFlagsApiRef);
  const featureFlags = featureFlagsApi.getRegisteredFlags();
  const initialFlagState = Object.fromEntries(
    featureFlags.map(({ name }) => [name, featureFlagsApi.isActive(name)])
  );
  const [state, setState] = useState(initialFlagState);
  const [filterInput, setFilterInput] = useState("");
  const inputRef = React.useRef();
  const toggleFlag = useCallback(
    (flagName) => {
      const newState = featureFlagsApi.isActive(flagName) ? FeatureFlagState.None : FeatureFlagState.Active;
      featureFlagsApi.save({
        states: { [flagName]: newState },
        merge: true
      });
      setState((prevState) => ({
        ...prevState,
        [flagName]: newState === FeatureFlagState.Active
      }));
    },
    [featureFlagsApi]
  );
  if (!featureFlags.length) {
    return /* @__PURE__ */ React.createElement(EmptyFlags, null);
  }
  const clearFilterInput = () => {
    var _a;
    setFilterInput("");
    (_a = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _a.focus();
  };
  const filteredFeatureFlags = featureFlags.filter((featureFlag) => {
    const featureFlagName = featureFlag.name.toLocaleLowerCase("en-US");
    return featureFlagName.includes(filterInput.toLocaleLowerCase("en-US"));
  });
  const Header = () => /* @__PURE__ */ React.createElement(Grid, { container: true, style: { justifyContent: "space-between" } }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 6, md: 8 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h5" }, "Feature Flags"), /* @__PURE__ */ React.createElement(Typography, { variant: "subtitle1" }, "Please refresh the page when toggling feature flags")), featureFlags.length >= 10 && /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 6, md: 4 }, /* @__PURE__ */ React.createElement(
    TextField,
    {
      label: "Filter",
      style: { display: "flex", justifyContent: "flex-end" },
      inputRef: (ref) => ref && ref.focus(),
      InputProps: {
        ...filterInput.length && {
          endAdornment: /* @__PURE__ */ React.createElement(
            IconButton,
            {
              "aria-label": "Clear filter",
              onClick: clearFilterInput,
              edge: "end"
            },
            /* @__PURE__ */ React.createElement(ClearIcon, null)
          )
        }
      },
      onChange: (e) => setFilterInput(e.target.value),
      value: filterInput
    }
  )));
  return /* @__PURE__ */ React.createElement(InfoCard, { title: /* @__PURE__ */ React.createElement(Header, null) }, /* @__PURE__ */ React.createElement(List, { dense: true }, filteredFeatureFlags.map((featureFlag) => {
    const enabled = Boolean(state[featureFlag.name]);
    return /* @__PURE__ */ React.createElement(
      FlagItem,
      {
        key: featureFlag.name,
        flag: featureFlag,
        enabled,
        toggleHandler: toggleFlag
      }
    );
  })));
};

const useUserProfile = () => {
  var _a;
  const identityApi = useApi(identityApiRef);
  const alertApi = useApi(alertApiRef);
  const { value, loading, error } = useAsync(async () => {
    return {
      profile: await identityApi.getProfileInfo(),
      identity: await identityApi.getBackstageIdentity()
    };
  }, []);
  useEffect(() => {
    if (error) {
      alertApi.post({
        message: `Failed to load user identity: ${error}`,
        severity: "error"
      });
    }
  }, [error, alertApi]);
  if (loading || error) {
    return {
      profile: {},
      displayName: "",
      loading
    };
  }
  return {
    profile: value.profile,
    backstageIdentity: value.identity,
    displayName: (_a = value.profile.displayName) != null ? _a : value.identity.userEntityRef,
    loading
  };
};

const useStyles$1 = makeStyles((theme) => ({
  avatar: {
    width: ({ size }) => size,
    height: ({ size }) => size,
    fontSize: ({ size }) => size * 0.7,
    border: `1px solid ${theme.palette.textSubtle}`
  }
}));
const UserSettingsSignInAvatar = (props) => {
  const { size } = props;
  const { iconSize } = sidebarConfig;
  const classes = useStyles$1(size ? { size } : { size: iconSize });
  const { profile } = useUserProfile();
  return /* @__PURE__ */ React.createElement(
    Avatar,
    {
      src: profile.picture,
      className: classes.avatar,
      alt: "Profile picture"
    }
  );
};

const UserSettingsMenu = () => {
  const errorApi = useApi(errorApiRef);
  const identityApi = useApi(identityApiRef);
  const [open, setOpen] = React.useState(false);
  const [anchorEl, setAnchorEl] = React.useState(
    void 0
  );
  const handleOpen = (event) => {
    setAnchorEl(event.currentTarget);
    setOpen(true);
  };
  const handleClose = () => {
    setAnchorEl(void 0);
    setOpen(false);
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    IconButton,
    {
      "data-testid": "user-settings-menu",
      "aria-label": "more",
      onClick: handleOpen
    },
    /* @__PURE__ */ React.createElement(MoreVertIcon, null)
  ), /* @__PURE__ */ React.createElement(Menu, { anchorEl, open, onClose: handleClose }, /* @__PURE__ */ React.createElement(
    MenuItem,
    {
      "data-testid": "sign-out",
      onClick: () => identityApi.signOut().catch((error) => errorApi.post(error))
    },
    /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(SignOutIcon, null)),
    "Sign Out"
  )));
};

const UserSettingsProfileCard = () => {
  const { profile, displayName } = useUserProfile();
  return /* @__PURE__ */ React.createElement(InfoCard, { title: "Profile", variant: "gridItem" }, /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 6 }, /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(UserSettingsSignInAvatar, { size: 96 })), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12, sm: true, container: true }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true, container: true, direction: "column", spacing: 2 }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true }, /* @__PURE__ */ React.createElement(Typography, { variant: "subtitle1", gutterBottom: true }, displayName), /* @__PURE__ */ React.createElement(Typography, { variant: "body2", color: "textSecondary" }, profile.email))), /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(UserSettingsMenu, null)))));
};

const UserSettingsPinToggle = () => {
  const { isPinned, toggleSidebarPinState } = useSidebarPinState();
  return /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(
    ListItemText,
    {
      primary: "Pin Sidebar",
      secondary: "Prevent the sidebar from collapsing"
    }
  ), /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, /* @__PURE__ */ React.createElement(
    Tooltip,
    {
      placement: "top",
      arrow: true,
      title: `${isPinned ? "Unpin" : "Pin"} Sidebar`
    },
    /* @__PURE__ */ React.createElement(
      Switch,
      {
        color: "primary",
        checked: isPinned,
        onChange: () => toggleSidebarPinState(),
        name: "pin",
        inputProps: { "aria-label": "Pin Sidebar Switch" }
      }
    )
  )));
};

const ThemeIcon = ({ id, activeId, icon }) => icon ? cloneElement(icon, {
  color: activeId === id ? "primary" : void 0
}) : /* @__PURE__ */ React.createElement(AutoIcon, { color: activeId === id ? "primary" : void 0 });
const useStyles = makeStyles((theme) => ({
  container: {
    display: "flex",
    flexWrap: "wrap",
    width: "100%",
    justifyContent: "space-between",
    alignItems: "center",
    paddingBottom: 8,
    paddingRight: 16
  },
  list: {
    width: "initial",
    [theme.breakpoints.down("xs")]: {
      width: "100%",
      padding: `0 0 12px`
    }
  },
  listItemText: {
    paddingRight: 0,
    paddingLeft: 0
  },
  listItemSecondaryAction: {
    position: "relative",
    transform: "unset",
    top: "auto",
    right: "auto",
    paddingLeft: 16,
    [theme.breakpoints.down("xs")]: {
      paddingLeft: 0
    }
  }
}));
const TooltipToggleButton = ({
  children,
  title,
  value,
  ...props
}) => /* @__PURE__ */ React.createElement(Tooltip, { placement: "top", arrow: true, title }, /* @__PURE__ */ React.createElement(ToggleButton, { value, ...props }, children));
const UserSettingsThemeToggle = () => {
  const classes = useStyles();
  const appThemeApi = useApi(appThemeApiRef);
  const themeId = useObservable(
    appThemeApi.activeThemeId$(),
    appThemeApi.getActiveThemeId()
  );
  const themeIds = appThemeApi.getInstalledThemes();
  const handleSetTheme = (_event, newThemeId) => {
    if (themeIds.some((t) => t.id === newThemeId)) {
      appThemeApi.setActiveThemeId(newThemeId);
    } else {
      appThemeApi.setActiveThemeId(void 0);
    }
  };
  return /* @__PURE__ */ React.createElement(
    ListItem,
    {
      className: classes.list,
      classes: { container: classes.container }
    },
    /* @__PURE__ */ React.createElement(
      ListItemText,
      {
        className: classes.listItemText,
        primary: "Theme",
        secondary: "Change the theme mode"
      }
    ),
    /* @__PURE__ */ React.createElement(ListItemSecondaryAction, { className: classes.listItemSecondaryAction }, /* @__PURE__ */ React.createElement(
      ToggleButtonGroup,
      {
        exclusive: true,
        size: "small",
        value: themeId != null ? themeId : "auto",
        onChange: handleSetTheme
      },
      themeIds.map((theme) => {
        var _a;
        const themeIcon = (_a = themeIds.find((t) => t.id === theme.id)) == null ? void 0 : _a.icon;
        return /* @__PURE__ */ React.createElement(
          TooltipToggleButton,
          {
            key: theme.id,
            title: `Select ${theme.title}`,
            value: theme.id
          },
          /* @__PURE__ */ React.createElement(React.Fragment, null, theme.title, "\xA0", /* @__PURE__ */ React.createElement(
            ThemeIcon,
            {
              id: theme.id,
              icon: themeIcon,
              activeId: themeId
            }
          ))
        );
      }),
      /* @__PURE__ */ React.createElement(Tooltip, { placement: "top", arrow: true, title: "Select auto theme" }, /* @__PURE__ */ React.createElement(ToggleButton, { value: "auto", selected: themeId === void 0 }, "Auto\xA0", /* @__PURE__ */ React.createElement(AutoIcon, { color: themeId === void 0 ? "primary" : void 0 })))
    ))
  );
};

const UserSettingsAppearanceCard = () => {
  const { isMobile } = useSidebarPinState();
  return /* @__PURE__ */ React.createElement(InfoCard, { title: "Appearance", variant: "gridItem" }, /* @__PURE__ */ React.createElement(List, { dense: true }, /* @__PURE__ */ React.createElement(UserSettingsThemeToggle, null), !isMobile && /* @__PURE__ */ React.createElement(UserSettingsPinToggle, null)));
};

const Contents = () => {
  const { backstageIdentity } = useUserProfile();
  if (!backstageIdentity) {
    return /* @__PURE__ */ React.createElement(Typography$1, null, "No Backstage Identity");
  }
  return /* @__PURE__ */ React.createElement(Grid$1, { container: true, spacing: 1 }, /* @__PURE__ */ React.createElement(Grid$1, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(Typography$1, { variant: "subtitle1", gutterBottom: true }, "User Entity:", " ", /* @__PURE__ */ React.createElement(
    EntityRefLinks,
    {
      entityRefs: [backstageIdentity.userEntityRef],
      getTitle: (ref) => ref
    }
  ))), /* @__PURE__ */ React.createElement(Grid$1, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(Typography$1, { variant: "subtitle1" }, "Ownership Entities:", " ", /* @__PURE__ */ React.createElement(
    EntityRefLinks,
    {
      entityRefs: backstageIdentity.ownershipEntityRefs,
      getTitle: (ref) => ref
    }
  ))));
};
const UserSettingsIdentityCard = () => /* @__PURE__ */ React.createElement(InfoCard, { title: "Backstage Identity" }, /* @__PURE__ */ React.createElement(Contents, null));

const UserSettingsGeneral = () => {
  return /* @__PURE__ */ React.createElement(Grid, { container: true, direction: "row", spacing: 3 }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12, md: 6 }, /* @__PURE__ */ React.createElement(UserSettingsProfileCard, null)), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12, md: 6 }, /* @__PURE__ */ React.createElement(UserSettingsAppearanceCard, null)), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12, md: 6 }, /* @__PURE__ */ React.createElement(UserSettingsIdentityCard, null)));
};

const LAYOUT_DATA_KEY = "plugin.user-settings.settingsLayout";
const LAYOUT_ROUTE_DATA_KEY = "plugin.user-settings.settingsLayoutRoute";
const Route = () => null;
attachComponentData(Route, LAYOUT_ROUTE_DATA_KEY, true);
attachComponentData(Route, "core.gatherMountPoints", true);
const SettingsLayout = (props) => {
  const { title, children } = props;
  const { isMobile } = useSidebarPinState();
  const routes = useElementFilter(
    children,
    (elements) => elements.selectByComponentData({
      key: LAYOUT_ROUTE_DATA_KEY,
      withStrictError: "Child of SettingsLayout must be an SettingsLayout.Route"
    }).getElements().map((child) => child.props)
  );
  return /* @__PURE__ */ React.createElement(Page, { themeId: "home" }, !isMobile && /* @__PURE__ */ React.createElement(Header, { title: title != null ? title : "Settings" }), /* @__PURE__ */ React.createElement(RoutedTabs, { routes }));
};
attachComponentData(SettingsLayout, LAYOUT_DATA_KEY, true);
SettingsLayout.Route = Route;

const DefaultSettingsPage = (props) => {
  const { providerSettings, tabs } = props;
  return /* @__PURE__ */ React.createElement(SettingsLayout, null, /* @__PURE__ */ React.createElement(SettingsLayout.Route, { path: "general", title: "General" }, /* @__PURE__ */ React.createElement(UserSettingsGeneral, null)), /* @__PURE__ */ React.createElement(
    SettingsLayout.Route,
    {
      path: "auth-providers",
      title: "Authentication Providers"
    },
    /* @__PURE__ */ React.createElement(UserSettingsAuthProviders, { providerSettings })
  ), /* @__PURE__ */ React.createElement(SettingsLayout.Route, { path: "feature-flags", title: "Feature Flags" }, /* @__PURE__ */ React.createElement(UserSettingsFeatureFlags, null)), tabs);
};

const SettingsPage = (props) => {
  const { providerSettings } = props;
  const outlet = useOutlet();
  const layout = useElementFilter(
    outlet,
    (elements) => elements.selectByComponentData({
      key: LAYOUT_DATA_KEY
    }).getElements()
  );
  const tabs = useElementFilter(
    outlet,
    (elements) => elements.selectByComponentData({
      key: LAYOUT_ROUTE_DATA_KEY
    }).getElements()
  );
  return /* @__PURE__ */ React.createElement(React.Fragment, null, layout.length !== 0 && layout || /* @__PURE__ */ React.createElement(DefaultSettingsPage, { tabs, providerSettings }));
};

const USER_SETTINGS_TAB_KEY = LAYOUT_ROUTE_DATA_KEY;
const UserSettingsTab = (props) => /* @__PURE__ */ React.createElement(SettingsLayout.Route, { path: props.path, title: props.title }, /* @__PURE__ */ React.createElement(React.Fragment, null, "props.children"));
attachComponentData(UserSettingsTab, USER_SETTINGS_TAB_KEY, "UserSettingsTab");

export { DefaultProviderSettings, ProviderSettingsItem, SettingsPage as Router, Settings, SettingsLayout, USER_SETTINGS_TAB_KEY, UserSettingsAppearanceCard, UserSettingsAuthProviders, UserSettingsFeatureFlags, UserSettingsGeneral, UserSettingsIdentityCard, UserSettingsMenu, UserSettingsPage, UserSettingsPinToggle, UserSettingsProfileCard, UserSettingsSignInAvatar, UserSettingsStorage, UserSettingsTab, UserSettingsThemeToggle, userSettingsPlugin as plugin, useUserProfile, userSettingsPlugin };
//# sourceMappingURL=index.esm.js.map
