import { RELATION_MEMBER_OF, getCompoundEntityRef, stringifyEntityRef, RELATION_OWNED_BY } from '@backstage/catalog-model';
import { g as getEntityRelations, a as useAsyncEntity } from './esm/useEntity-de64059a.esm.js';
import { usePermission } from '@backstage/plugin-permission-react';
import '@backstage/core-plugin-api';
import '@backstage/version-bridge';
import 'react';

function isOwnerOf(owner, entity) {
  const possibleOwners = new Set(
    [
      ...getEntityRelations(owner, RELATION_MEMBER_OF, { kind: "group" }),
      ...owner ? [getCompoundEntityRef(owner)] : []
    ].map(stringifyEntityRef)
  );
  const owners = getEntityRelations(entity, RELATION_OWNED_BY).map(
    stringifyEntityRef
  );
  for (const ownerItem of owners) {
    if (possibleOwners.has(ownerItem)) {
      return true;
    }
  }
  return false;
}

function useEntityPermission(permission) {
  const {
    entity,
    loading: loadingEntity,
    error: entityError
  } = useAsyncEntity();
  const {
    allowed,
    loading: loadingPermission,
    error: permissionError
  } = usePermission({
    permission,
    resourceRef: entity ? stringifyEntityRef(entity) : void 0
  });
  if (loadingEntity || loadingPermission) {
    return { loading: true, allowed: false };
  }
  if (entityError) {
    return { loading: false, allowed: false, error: entityError };
  }
  return { loading: false, allowed, error: permissionError };
}

export { isOwnerOf, useEntityPermission };
//# sourceMappingURL=alpha.esm.js.map
