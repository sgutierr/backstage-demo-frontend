{"version":3,"file":"usePluginOptions-68e31f9f.esm.js","sources":["../../src/plugin-options/usePluginOptions.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createVersionedContext,\n  createVersionedValueMap,\n  useVersionedContext,\n} from '@backstage/version-bridge';\nimport { BackstagePlugin } from '@backstage/core-plugin-api';\nimport React, { ReactNode } from 'react';\n\nconst contextKey: string = 'plugin-context';\n\n/**\n * Properties for the PluginProvider component.\n *\n * @alpha\n */\nexport interface PluginOptionsProviderProps {\n  children: ReactNode;\n  plugin?: BackstagePlugin;\n}\n\n/**\n * Contains the plugin configuration.\n *\n * @alpha\n */\nexport const PluginProvider = (\n  props: PluginOptionsProviderProps,\n): JSX.Element => {\n  const { children, plugin } = props;\n\n  const { Provider } = createVersionedContext<{\n    1: { plugin: BackstagePlugin | undefined };\n  }>(contextKey);\n\n  return (\n    <Provider\n      value={createVersionedValueMap({\n        1: {\n          plugin,\n        },\n      })}\n    >\n      {children}\n    </Provider>\n  );\n};\n\n/**\n * Grab the current entity from the context, throws if the entity has not yet been loaded\n * or is not available.\n *\n * @alpha\n */\nexport function usePluginOptions<\n  TPluginOptions extends {} = {},\n>(): TPluginOptions {\n  const versionedHolder = useVersionedContext<{ 1: TPluginOptions }>(\n    contextKey,\n  );\n\n  if (!versionedHolder) {\n    throw new Error('Plugin Options context is not available');\n  }\n\n  const value = versionedHolder.atVersion(1);\n  if (!value) {\n    throw new Error('Plugin Options v1 is not available');\n  }\n\n  return (\n    value as unknown as {\n      plugin: {\n        getPluginOptions(): {};\n      };\n    }\n  ).plugin.getPluginOptions() as TPluginOptions;\n}\n"],"names":[],"mappings":";;;AAwBA,MAAM,UAAqB,GAAA,gBAAA,CAAA;AAiBd,MAAA,cAAA,GAAiB,CAC5B,KACgB,KAAA;AAChB,EAAM,MAAA,EAAE,QAAU,EAAA,MAAA,EAAW,GAAA,KAAA,CAAA;AAE7B,EAAA,MAAM,EAAE,QAAA,EAAa,GAAA,sBAAA,CAElB,UAAU,CAAA,CAAA;AAEb,EACE,uBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,QAAA;AAAA,IAAA;AAAA,MACC,OAAO,uBAAwB,CAAA;AAAA,QAC7B,CAAG,EAAA;AAAA,UACD,MAAA;AAAA,SACF;AAAA,OACD,CAAA;AAAA,KAAA;AAAA,IAEA,QAAA;AAAA,GACH,CAAA;AAEJ,EAAA;AAQO,SAAS,gBAEI,GAAA;AAClB,EAAA,MAAM,eAAkB,GAAA,mBAAA;AAAA,IACtB,UAAA;AAAA,GACF,CAAA;AAEA,EAAA,IAAI,CAAC,eAAiB,EAAA;AACpB,IAAM,MAAA,IAAI,MAAM,yCAAyC,CAAA,CAAA;AAAA,GAC3D;AAEA,EAAM,MAAA,KAAA,GAAQ,eAAgB,CAAA,SAAA,CAAU,CAAC,CAAA,CAAA;AACzC,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAM,MAAA,IAAI,MAAM,oCAAoC,CAAA,CAAA;AAAA,GACtD;AAEA,EACE,OAAA,KAAA,CAKA,OAAO,gBAAiB,EAAA,CAAA;AAC5B;;;;"}