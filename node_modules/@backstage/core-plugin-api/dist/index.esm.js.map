{"version":3,"file":"index.esm.js","sources":["../src/analytics/AnalyticsContext.tsx","../src/apis/system/useApi.tsx","../src/apis/system/ApiRef.ts","../src/apis/system/helpers.ts","../src/apis/definitions/auth.ts","../src/apis/definitions/AlertApi.ts","../src/apis/definitions/AnalyticsApi.ts","../src/apis/definitions/AppThemeApi.ts","../src/apis/definitions/ConfigApi.ts","../src/apis/definitions/DiscoveryApi.ts","../src/apis/definitions/ErrorApi.ts","../src/apis/definitions/FeatureFlagsApi.ts","../src/apis/definitions/FetchApi.ts","../src/apis/definitions/IdentityApi.ts","../src/apis/definitions/OAuthRequestApi.ts","../src/apis/definitions/StorageApi.ts","../src/analytics/Tracker.ts","../src/analytics/useAnalytics.tsx","../src/app/useApp.tsx","../src/extensions/componentData.tsx","../src/routing/types.ts","../src/routing/RouteRef.ts","../src/routing/SubRouteRef.ts","../src/routing/ExternalRouteRef.ts","../src/routing/useRouteRef.tsx","../src/routing/useRouteRefParams.ts","../src/extensions/PluginErrorBoundary.tsx","../src/extensions/extensions.tsx","../src/extensions/useElementFilter.tsx","../src/plugin/Plugin.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createVersionedContext,\n  createVersionedValueMap,\n} from '@backstage/version-bridge';\nimport React, { ReactNode, useContext } from 'react';\nimport { AnalyticsContextValue } from './types';\n\nconst AnalyticsReactContext = createVersionedContext<{\n  1: AnalyticsContextValue;\n}>('analytics-context');\n\n/**\n * A \"private\" (to this package) hook that enables context inheritance and a\n * way to read Analytics Context values at event capture-time.\n *\n * @internal\n */\nexport const useAnalyticsContext = (): AnalyticsContextValue => {\n  const theContext = useContext(AnalyticsReactContext);\n\n  // Provide a default value if no value exists.\n  if (theContext === undefined) {\n    return {\n      routeRef: 'unknown',\n      pluginId: 'root',\n      extension: 'App',\n    };\n  }\n\n  // This should probably never happen, but check for it.\n  const theValue = theContext.atVersion(1);\n  if (theValue === undefined) {\n    throw new Error('No context found for version 1.');\n  }\n\n  return theValue;\n};\n\n/**\n * Provides components in the child react tree an Analytics Context, ensuring\n * all analytics events captured within the context have relevant attributes.\n *\n * @remarks\n *\n * Analytics contexts are additive, meaning the context ultimately emitted with\n * an event is the combination of all contexts in the parent tree.\n *\n * @public\n */\nexport const AnalyticsContext = (options: {\n  attributes: Partial<AnalyticsContextValue>;\n  children: ReactNode;\n}) => {\n  const { attributes, children } = options;\n\n  const parentValues = useAnalyticsContext();\n  const combinedValue = {\n    ...parentValues,\n    ...attributes,\n  };\n\n  const versionedCombinedValue = createVersionedValueMap({ 1: combinedValue });\n  return (\n    <AnalyticsReactContext.Provider value={versionedCombinedValue}>\n      {children}\n    </AnalyticsReactContext.Provider>\n  );\n};\n\n/**\n * Returns an HOC wrapping the provided component in an Analytics context with\n * the given values.\n *\n * @param Component - Component to be wrapped with analytics context attributes\n * @param values - Analytics context key/value pairs.\n * @internal\n */\nexport function withAnalyticsContext<TProps extends {}>(\n  Component: React.ComponentType<TProps>,\n  values: AnalyticsContextValue,\n) {\n  const ComponentWithAnalyticsContext = (props: TProps) => {\n    return (\n      <AnalyticsContext attributes={values}>\n        <Component {...props} />\n      </AnalyticsContext>\n    );\n  };\n  ComponentWithAnalyticsContext.displayName = `WithAnalyticsContext(${\n    Component.displayName || Component.name || 'Component'\n  })`;\n  return ComponentWithAnalyticsContext;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PropsWithChildren } from 'react';\nimport { ApiRef, ApiHolder, TypesToApiRefs } from './types';\nimport { useVersionedContext } from '@backstage/version-bridge';\n\n/**\n * React hook for retrieving {@link ApiHolder}, an API catalog.\n *\n * @public\n */\nexport function useApiHolder(): ApiHolder {\n  const versionedHolder = useVersionedContext<{ 1: ApiHolder }>('api-context');\n  if (!versionedHolder) {\n    throw new Error('API context is not available');\n  }\n\n  const apiHolder = versionedHolder.atVersion(1);\n  if (!apiHolder) {\n    throw new Error('ApiContext v1 not available');\n  }\n  return apiHolder;\n}\n\n/**\n * React hook for retrieving APIs.\n *\n * @param apiRef - Reference of the API to use.\n * @public\n */\nexport function useApi<T>(apiRef: ApiRef<T>): T {\n  const apiHolder = useApiHolder();\n\n  const api = apiHolder.get(apiRef);\n  if (!api) {\n    throw new Error(`No implementation available for ${apiRef}`);\n  }\n  return api;\n}\n\n/**\n * Wrapper for giving component an API context.\n *\n * @param apis - APIs for the context.\n * @public\n */\nexport function withApis<T extends {}>(apis: TypesToApiRefs<T>) {\n  return function withApisWrapper<TProps extends T>(\n    WrappedComponent: React.ComponentType<TProps>,\n  ) {\n    const Hoc = (props: PropsWithChildren<Omit<TProps, keyof T>>) => {\n      const apiHolder = useApiHolder();\n\n      const impls = {} as T;\n\n      for (const key in apis) {\n        if (apis.hasOwnProperty(key)) {\n          const ref = apis[key];\n\n          const api = apiHolder.get(ref);\n          if (!api) {\n            throw new Error(`No implementation available for ${ref}`);\n          }\n          impls[key] = api;\n        }\n      }\n\n      return <WrappedComponent {...(props as TProps)} {...impls} />;\n    };\n    const displayName =\n      WrappedComponent.displayName || WrappedComponent.name || 'Component';\n\n    Hoc.displayName = `withApis(${displayName})`;\n\n    return Hoc;\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ApiRef } from './types';\n\n/**\n * API reference configuration - holds an ID of the referenced API.\n *\n * @public\n */\nexport type ApiRefConfig = {\n  id: string;\n};\n\nclass ApiRefImpl<T> implements ApiRef<T> {\n  constructor(private readonly config: ApiRefConfig) {\n    const valid = config.id\n      .split('.')\n      .flatMap(part => part.split('-'))\n      .every(part => part.match(/^[a-z][a-z0-9]*$/));\n    if (!valid) {\n      throw new Error(\n        `API id must only contain period separated lowercase alphanum tokens with dashes, got '${config.id}'`,\n      );\n    }\n  }\n\n  get id(): string {\n    return this.config.id;\n  }\n\n  // Utility for getting type of an api, using `typeof apiRef.T`\n  get T(): T {\n    throw new Error(`tried to read ApiRef.T of ${this}`);\n  }\n\n  toString() {\n    return `apiRef{${this.config.id}}`;\n  }\n}\n\n/**\n * Creates a reference to an API.\n *\n * @param config - The descriptor of the API to reference.\n * @returns An API reference.\n * @public\n */\nexport function createApiRef<T>(config: ApiRefConfig): ApiRef<T> {\n  return new ApiRefImpl<T>(config);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, ApiFactory, TypesToApiRefs } from './types';\n\n/**\n * Used to infer types for a standalone {@link ApiFactory} that isn't immediately passed\n * to another function.\n *\n * @remarks\n *\n * This function doesn't actually do anything, it's only used to infer types.\n *\n * @public\n */\nexport function createApiFactory<\n  Api,\n  Impl extends Api,\n  Deps extends { [name in string]: unknown },\n>(factory: ApiFactory<Api, Impl, Deps>): ApiFactory<Api, Impl, Deps>;\n/**\n * Used to infer types for a standalone {@link ApiFactory} that isn't immediately passed\n * to another function.\n *\n * @param api - Ref of the API that will be produced by the factory.\n * @param instance - Implementation of the API to use.\n * @public\n */\nexport function createApiFactory<Api, Impl extends Api>(\n  api: ApiRef<Api>,\n  instance: Impl,\n): ApiFactory<Api, Impl, {}>;\n/**\n * Used to infer types for a standalone {@link ApiFactory} that isn't immediately passed\n * to another function.\n *\n * @remarks\n *\n * Creates factory from {@link ApiRef} or returns the factory itself if provided.\n *\n * @param factory - Existing factory or {@link ApiRef}.\n * @param instance - The instance to be returned by the factory.\n * @public\n */\nexport function createApiFactory<\n  Api,\n  Impl extends Api,\n  Deps extends { [name in string]: unknown },\n>(\n  factory: ApiFactory<Api, Impl, Deps> | ApiRef<Api>,\n  instance?: Impl,\n): ApiFactory<Api, Impl, Deps> {\n  if ('id' in factory) {\n    return {\n      api: factory,\n      deps: {} as TypesToApiRefs<Deps>,\n      factory: () => instance!,\n    };\n  }\n  return factory;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { IconComponent } from '../../icons/types';\nimport { Observable } from '@backstage/types';\n\n/**\n * This file contains declarations for common interfaces of auth-related APIs.\n * The declarations should be used to signal which type of authentication and\n * authorization methods each separate auth provider supports.\n *\n * For example, a Google OAuth provider that supports OAuth 2 and OpenID Connect,\n * would be declared as follows:\n *\n * const googleAuthApiRef = createApiRef<OAuthApi & OpenIDConnectApi>({ ... })\n */\n\n/**\n * Information about the auth provider.\n *\n * @remarks\n *\n * This information is used both to connect the correct auth provider in the backend, as\n * well as displaying the provider to the user.\n *\n * @public\n */\nexport type AuthProviderInfo = {\n  /**\n   * The ID of the auth provider. This should match with ID of the provider in the `@backstage/auth-backend`.\n   */\n  id: string;\n\n  /**\n   * Title for the auth provider, for example \"GitHub\"\n   */\n  title: string;\n\n  /**\n   * Icon for the auth provider.\n   */\n  icon: IconComponent;\n};\n\n/**\n * An array of scopes, or a scope string formatted according to the\n * auth provider, which is typically a space separated list.\n *\n * @remarks\n *\n * See the documentation for each auth provider for the list of scopes\n * supported by each provider.\n *\n * @public\n */\nexport type OAuthScope = string | string[];\n\n/**\n * Configuration of an authentication request.\n *\n * @public\n */\nexport type AuthRequestOptions = {\n  /**\n   * If this is set to true, the user will not be prompted to log in,\n   * and an empty response will be returned if there is no existing session.\n   *\n   * This can be used to perform a check whether the user is logged in, or if you don't\n   * want to force a user to be logged in, but provide functionality if they already are.\n   *\n   * @defaultValue false\n   */\n  optional?: boolean;\n\n  /**\n   * If this is set to true, the request will bypass the regular oauth login modal\n   * and open the login popup directly.\n   *\n   * The method must be called synchronously from a user action for this to work in all browsers.\n   *\n   * @defaultValue false\n   */\n  instantPopup?: boolean;\n};\n\n/**\n * This API provides access to OAuth 2 credentials. It lets you request access tokens,\n * which can be used to act on behalf of the user when talking to APIs.\n *\n * @public\n */\nexport type OAuthApi = {\n  /**\n   * Requests an OAuth 2 Access Token, optionally with a set of scopes. The access token allows\n   * you to make requests on behalf of the user, and the copes may grant you broader access, depending\n   * on the auth provider.\n   *\n   * Each auth provider has separate handling of scope, so you need to look at the documentation\n   * for each one to know what scope you need to request.\n   *\n   * This method is cheap and should be called each time an access token is used. Do not for example\n   * store the access token in React component state, as that could cause the token to expire. Instead\n   * fetch a new access token for each request.\n   *\n   * Be sure to include all required scopes when requesting an access token. When testing your implementation\n   * it is best to log out the Backstage session and then visit your plugin page directly, as\n   * you might already have some required scopes in your existing session. Not requesting the correct\n   * scopes can lead to 403 or other authorization errors, which can be tricky to debug.\n   *\n   * If the user has not yet granted access to the provider and the set of requested scopes, the user\n   * will be prompted to log in. The returned promise will not resolve until the user has\n   * successfully logged in. The returned promise can be rejected, but only if the user rejects the login request.\n   */\n  getAccessToken(\n    scope?: OAuthScope,\n    options?: AuthRequestOptions,\n  ): Promise<string>;\n};\n\n/**\n * This API provides access to OpenID Connect credentials. It lets you request ID tokens,\n * which can be passed to backend services to prove the user's identity.\n *\n * @public\n */\nexport type OpenIdConnectApi = {\n  /**\n   * Requests an OpenID Connect ID Token.\n   *\n   * This method is cheap and should be called each time an ID token is used. Do not for example\n   * store the id token in React component state, as that could cause the token to expire. Instead\n   * fetch a new id token for each request.\n   *\n   * If the user has not yet logged in to Google inside Backstage, the user will be prompted\n   * to log in. The returned promise will not resolve until the user has successfully logged in.\n   * The returned promise can be rejected, but only if the user rejects the login request.\n   */\n  getIdToken(options?: AuthRequestOptions): Promise<string>;\n};\n\n/**\n * This API provides access to profile information of the user from an auth provider.\n *\n * @public\n */\nexport type ProfileInfoApi = {\n  /**\n   * Get profile information for the user as supplied by this auth provider.\n   *\n   * If the optional flag is not set, a session is guaranteed to be returned, while if\n   * the optional flag is set, the session may be undefined. See {@link AuthRequestOptions} for more details.\n   */\n  getProfile(options?: AuthRequestOptions): Promise<ProfileInfo | undefined>;\n};\n\n/**\n * This API provides access to the user's identity within Backstage.\n *\n * @remarks\n *\n * An auth provider that implements this interface can be used to sign-in to backstage. It is\n * not intended to be used directly from a plugin, but instead serves as a connection between\n * this authentication method and the app's {@link IdentityApi}\n *\n * @public\n */\nexport type BackstageIdentityApi = {\n  /**\n   * Get the user's identity within Backstage. This should normally not be called directly,\n   * use the {@link IdentityApi} instead.\n   *\n   * If the optional flag is not set, a session is guaranteed to be returned, while if\n   * the optional flag is set, the session may be undefined. See {@link AuthRequestOptions} for more details.\n   */\n  getBackstageIdentity(\n    options?: AuthRequestOptions,\n  ): Promise<BackstageIdentityResponse | undefined>;\n};\n\n/**\n * User identity information within Backstage.\n *\n * @public\n */\nexport type BackstageUserIdentity = {\n  /**\n   * The type of identity that this structure represents. In the frontend app\n   * this will currently always be 'user'.\n   */\n  type: 'user';\n\n  /**\n   * The entityRef of the user in the catalog.\n   * For example User:default/sandra\n   */\n  userEntityRef: string;\n\n  /**\n   * The user and group entities that the user claims ownership through\n   */\n  ownershipEntityRefs: string[];\n};\n\n/**\n * Token and Identity response, with the users claims in the Identity.\n *\n * @public\n */\nexport type BackstageIdentityResponse = {\n  /**\n   * The token used to authenticate the user within Backstage.\n   */\n  token: string;\n\n  /**\n   * Identity information derived from the token.\n   */\n  identity: BackstageUserIdentity;\n};\n\n/**\n * Profile information of the user.\n *\n * @public\n */\nexport type ProfileInfo = {\n  /**\n   * Email ID.\n   */\n  email?: string;\n\n  /**\n   * Display name that can be presented to the user.\n   */\n  displayName?: string;\n\n  /**\n   * URL to an avatar image of the user.\n   */\n  picture?: string;\n};\n\n/**\n * Session state values passed to subscribers of the SessionApi.\n *\n * @public\n */\nexport enum SessionState {\n  /**\n   * User signed in.\n   */\n  SignedIn = 'SignedIn',\n  /**\n   * User not signed in.\n   */\n  SignedOut = 'SignedOut',\n}\n\n/**\n * The SessionApi provides basic controls for any auth provider that is tied to a persistent session.\n *\n * @public\n */\nexport type SessionApi = {\n  /**\n   * Sign in with a minimum set of permissions.\n   */\n  signIn(): Promise<void>;\n\n  /**\n   * Sign out from the current session. This will reload the page.\n   */\n  signOut(): Promise<void>;\n\n  /**\n   * Observe the current state of the auth session. Emits the current state on subscription.\n   */\n  sessionState$(): Observable<SessionState>;\n};\n\n/**\n * Provides authentication towards Google APIs and identities.\n *\n * @public\n * @remarks\n *\n * See {@link https://developers.google.com/identity/protocols/googlescopes} for a full list of supported scopes.\n *\n * Note that the ID token payload is only guaranteed to contain the user's numerical Google ID,\n * email and expiration information. Do not rely on any other fields, as they might not be present.\n */\nexport const googleAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.google',\n});\n\n/**\n * Provides authentication towards GitHub APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/}\n * for a full list of supported scopes.\n */\nexport const githubAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.github',\n});\n\n/**\n * Provides authentication towards Okta APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://developer.okta.com/docs/guides/implement-oauth-for-okta/scopes/}\n * for a full list of supported scopes.\n */\nexport const oktaAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.okta',\n});\n\n/**\n * Provides authentication towards GitLab APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#limiting-scopes-of-a-personal-access-token}\n * for a full list of supported scopes.\n */\nexport const gitlabAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.gitlab',\n});\n\n/**\n * Provides authentication towards Microsoft APIs and identities.\n *\n * @public\n * @remarks\n *\n * For more info and a full list of supported scopes, see:\n * - {@link https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent}\n * - {@link https://docs.microsoft.com/en-us/graph/permissions-reference}\n */\nexport const microsoftAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.microsoft',\n});\n\n/**\n * Provides authentication towards OneLogin APIs.\n *\n * @public\n */\nexport const oneloginAuthApiRef: ApiRef<\n  OAuthApi &\n    OpenIdConnectApi &\n    ProfileInfoApi &\n    BackstageIdentityApi &\n    SessionApi\n> = createApiRef({\n  id: 'core.auth.onelogin',\n});\n\n/**\n * Provides authentication towards Bitbucket APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://support.atlassian.com/bitbucket-cloud/docs/use-oauth-on-bitbucket-cloud/}\n * for a full list of supported scopes.\n */\nexport const bitbucketAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.bitbucket',\n});\n\n/**\n * Provides authentication towards Bitbucket Server APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://confluence.atlassian.com/bitbucketserver/bitbucket-oauth-2-0-provider-api-1108483661.html#BitbucketOAuth2.0providerAPI-scopes}\n * for a full list of supported scopes.\n */\nexport const bitbucketServerAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.bitbucket-server',\n});\n\n/**\n * Provides authentication towards Atlassian APIs.\n *\n * @public\n * @remarks\n *\n * See {@link https://developer.atlassian.com/cloud/jira/platform/scopes-for-connect-and-oauth-2-3LO-apps/}\n * for a full list of supported scopes.\n */\nexport const atlassianAuthApiRef: ApiRef<\n  OAuthApi & ProfileInfoApi & BackstageIdentityApi & SessionApi\n> = createApiRef({\n  id: 'core.auth.atlassian',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createApiRef, ApiRef } from '../system';\nimport { Observable } from '@backstage/types';\n\n/**\n * Message handled by the {@link AlertApi}.\n *\n * @public\n */\nexport type AlertMessage = {\n  message: string;\n  // Severity will default to success since that is what material ui defaults the value to.\n  severity?: 'success' | 'info' | 'warning' | 'error';\n  display?: 'permanent' | 'transient';\n};\n\n/**\n * The alert API is used to report alerts to the app, and display them to the user.\n *\n * @public\n */\nexport type AlertApi = {\n  /**\n   * Post an alert for handling by the application.\n   */\n  post(alert: AlertMessage): void;\n\n  /**\n   * Observe alerts posted by other parts of the application.\n   */\n  alert$(): Observable<AlertMessage>;\n};\n\n/**\n * The {@link ApiRef} of {@link AlertApi}.\n *\n * @public\n */\nexport const alertApiRef: ApiRef<AlertApi> = createApiRef({\n  id: 'core.alert',\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { AnalyticsContextValue } from '../../analytics/types';\n\n/**\n * Represents an event worth tracking in an analytics system that could inform\n * how users of a Backstage instance are using its features.\n *\n * @public\n */\nexport type AnalyticsEvent = {\n  /**\n   * A string that identifies the event being tracked by the type of action the\n   * event represents. Be careful not to encode extra metadata in this string\n   * that should instead be placed in the Analytics Context or attributes.\n   * Examples include:\n   *\n   * - view\n   * - click\n   * - filter\n   * - search\n   * - hover\n   * - scroll\n   */\n  action: string;\n\n  /**\n   * A string that uniquely identifies the object that the action is being\n   * taken on. Examples include:\n   *\n   * - The path of the page viewed\n   * - The url of the link clicked\n   * - The value that was filtered by\n   * - The text that was searched for\n   */\n  subject: string;\n\n  /**\n   * An optional numeric value relevant to the event that could be aggregated\n   * by analytics tools. Examples include:\n   *\n   * - The index or position of the clicked element in an ordered list\n   * - The percentage of an element that has been scrolled through\n   * - The amount of time that has elapsed since a fixed point\n   * - A satisfaction score on a fixed scale\n   */\n  value?: number;\n\n  /**\n   * Optional, additional attributes (representing dimensions or metrics)\n   * specific to the event that could be forwarded on to analytics systems.\n   */\n  attributes?: AnalyticsEventAttributes;\n\n  /**\n   * Contextual metadata relating to where the event was captured and by whom.\n   * This could include information about the route, plugin, or extension in\n   * which an event was captured.\n   */\n  context: AnalyticsContextValue;\n};\n\n/**\n * A structure allowing other arbitrary metadata to be provided by analytics\n * event emitters.\n *\n * @public\n */\nexport type AnalyticsEventAttributes = {\n  [attribute in string]: string | boolean | number;\n};\n\n/**\n * Represents a tracker with methods that can be called to track events in a\n * configured analytics service.\n *\n * @public\n */\nexport type AnalyticsTracker = {\n  captureEvent: (\n    action: string,\n    subject: string,\n    options?: {\n      value?: number;\n      attributes?: AnalyticsEventAttributes;\n    },\n  ) => void;\n};\n\n/**\n * The Analytics API is used to track user behavior in a Backstage instance.\n *\n * @remarks\n *\n * To instrument your App or Plugin, retrieve an analytics tracker using the\n * useAnalytics() hook. This will return a pre-configured AnalyticsTracker\n * with relevant methods for instrumentation.\n *\n * @public\n */\nexport type AnalyticsApi = {\n  /**\n   * Primary event handler responsible for compiling and forwarding events to\n   * an analytics system.\n   */\n  captureEvent(event: AnalyticsEvent): void;\n};\n\n/**\n * The {@link ApiRef} of {@link AnalyticsApi}.\n *\n * @public\n */\nexport const analyticsApiRef: ApiRef<AnalyticsApi> = createApiRef({\n  id: 'core.analytics',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReactNode } from 'react';\nimport { ApiRef, createApiRef } from '../system';\nimport { Observable } from '@backstage/types';\n\n/**\n * Describes a theme provided by the app.\n *\n * @public\n */\nexport type AppTheme = {\n  /**\n   * ID used to remember theme selections.\n   */\n  id: string;\n\n  /**\n   * Title of the theme\n   */\n  title: string;\n\n  /**\n   * Theme variant\n   */\n  variant: 'light' | 'dark';\n\n  /**\n   * An Icon for the theme mode setting.\n   */\n  icon?: React.ReactElement;\n\n  Provider(props: { children: ReactNode }): JSX.Element | null;\n};\n\n/**\n * The AppThemeApi gives access to the current app theme, and allows switching\n * to other options that have been registered as a part of the App.\n *\n * @public\n */\nexport type AppThemeApi = {\n  /**\n   * Get a list of available themes.\n   */\n  getInstalledThemes(): AppTheme[];\n\n  /**\n   * Observe the currently selected theme. A value of undefined means no specific theme has been selected.\n   */\n  activeThemeId$(): Observable<string | undefined>;\n\n  /**\n   * Get the current theme ID. Returns undefined if no specific theme is selected.\n   */\n  getActiveThemeId(): string | undefined;\n\n  /**\n   * Set a specific theme to use in the app, overriding the default theme selection.\n   *\n   * Clear the selection by passing in undefined.\n   */\n  setActiveThemeId(themeId?: string): void;\n};\n\n/**\n * The {@link ApiRef} of {@link AppThemeApi}.\n *\n * @public\n */\nexport const appThemeApiRef: ApiRef<AppThemeApi> = createApiRef({\n  id: 'core.apptheme',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\nimport { Config } from '@backstage/config';\n\n/**\n * The Config API is used to provide a mechanism to access the\n * runtime configuration of the system.\n *\n * @public\n */\nexport type ConfigApi = Config;\n\n/**\n * The {@link ApiRef} of {@link ConfigApi}.\n *\n * @public\n */\nexport const configApiRef: ApiRef<ConfigApi> = createApiRef({\n  id: 'core.config',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * The discovery API is used to provide a mechanism for plugins to\n * discover the endpoint to use to talk to their backend counterpart.\n *\n * @remarks\n *\n * The purpose of the discovery API is to allow for many different deployment\n * setups and routing methods through a central configuration, instead\n * of letting each individual plugin manage that configuration.\n *\n * Implementations of the discovery API can be a simple as a URL pattern\n * using the pluginId, but could also have overrides for individual plugins,\n * or query a separate discovery service.\n *\n * @public\n */\nexport type DiscoveryApi = {\n  /**\n   * Returns the HTTP base backend URL for a given plugin, without a trailing slash.\n   *\n   * This method must always be called just before making a request, as opposed to\n   * fetching the URL when constructing an API client. That is to ensure that more\n   * flexible routing patterns can be supported.\n   *\n   * For example, asking for the URL for `auth` may return something\n   * like `https://backstage.example.com/api/auth`\n   */\n  getBaseUrl(pluginId: string): Promise<string>;\n};\n\n/**\n * The {@link ApiRef} of {@link DiscoveryApi}.\n *\n * @public\n */\nexport const discoveryApiRef: ApiRef<DiscoveryApi> = createApiRef({\n  id: 'core.discovery',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { Observable } from '@backstage/types';\n\n/**\n * Mirrors the JavaScript Error class, for the purpose of\n * providing documentation and optional fields.\n *\n * @public\n */\nexport type ErrorApiError = {\n  name: string;\n  message: string;\n  stack?: string;\n};\n\n/**\n * Provides additional information about an error that was posted to the application.\n *\n * @public\n */\nexport type ErrorApiErrorContext = {\n  /**\n   * If set to true, this error should not be displayed to the user.\n   *\n   * Hidden errors are typically not displayed in the UI, but the ErrorApi\n   * implementation may still report them to error tracking services\n   * or other utilities that care about all errors.\n   *\n   * @defaultValue false\n   */\n  hidden?: boolean;\n};\n\n/**\n * The error API is used to report errors to the app, and display them to the user.\n *\n * @remarks\n *\n * Plugins can use this API as a method of displaying errors to the user, but also\n * to report errors for collection by error reporting services.\n *\n * If an error can be displayed inline, e.g. as feedback in a form, that should be\n * preferred over relying on this API to display the error. The main use of this API\n * for displaying errors should be for asynchronous errors, such as a failing background process.\n *\n * Even if an error is displayed inline, it should still be reported through this API\n * if it would be useful to collect or log it for debugging purposes, but with\n * the hidden flag set. For example, an error arising from form field validation\n * should probably not be reported, while a failed REST call would be useful to report.\n *\n * @public\n */\nexport type ErrorApi = {\n  /**\n   * Post an error for handling by the application.\n   */\n  post(error: ErrorApiError, context?: ErrorApiErrorContext): void;\n\n  /**\n   * Observe errors posted by other parts of the application.\n   */\n  error$(): Observable<{\n    error: ErrorApiError;\n    context?: ErrorApiErrorContext;\n  }>;\n};\n\n/**\n * The {@link ApiRef} of {@link ErrorApi}.\n *\n * @public\n */\nexport const errorApiRef: ApiRef<ErrorApi> = createApiRef({\n  id: 'core.error',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * Feature flag descriptor.\n *\n * @public\n */\nexport type FeatureFlag = {\n  name: string;\n  pluginId: string;\n  description?: string;\n};\n\n/**\n * Enum representing the state of a feature flag (inactive/active).\n *\n * @public\n */\nexport enum FeatureFlagState {\n  /**\n   * Feature flag inactive (disabled).\n   */\n  None = 0,\n  /**\n   * Feature flag active (enabled).\n   */\n  Active = 1,\n}\n\n/**\n * Options to use when saving feature flags.\n *\n * @public\n */\nexport type FeatureFlagsSaveOptions = {\n  /**\n   * The new feature flag states to save.\n   */\n  states: Record<string, FeatureFlagState>;\n\n  /**\n   * Whether the saves states should be merged into the existing ones, or replace them.\n   *\n   * Defaults to false.\n   */\n  merge?: boolean;\n};\n\n/**\n * The feature flags API is used to toggle functionality to users across plugins and Backstage.\n *\n * @remarks\n *\n * Plugins can use this API to register feature flags that they have available\n * for users to enable/disable, and this API will centralize the current user's\n * state of which feature flags they would like to enable.\n *\n * This is ideal for Backstage plugins, as well as your own App, to trial incomplete\n * or unstable upcoming features. Although there will be a common interface for users\n * to enable and disable feature flags, this API acts as another way to enable/disable.\n *\n * @public\n */\nexport interface FeatureFlagsApi {\n  /**\n   * Registers a new feature flag. Once a feature flag has been registered it\n   * can be toggled by users, and read back to enable or disable features.\n   */\n  registerFlag(flag: FeatureFlag): void;\n\n  /**\n   * Get a list of all registered flags.\n   */\n  getRegisteredFlags(): FeatureFlag[];\n\n  /**\n   * Whether the feature flag with the given name is currently activated for the user.\n   */\n  isActive(name: string): boolean;\n\n  /**\n   * Save the user's choice of feature flag states.\n   */\n  save(options: FeatureFlagsSaveOptions): void;\n}\n\n/**\n * The {@link ApiRef} of {@link FeatureFlagsApi}.\n *\n * @public\n */\nexport const featureFlagsApiRef: ApiRef<FeatureFlagsApi> = createApiRef({\n  id: 'core.featureflags',\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * A wrapper for the fetch API, that has additional behaviors such as the\n * ability to automatically inject auth information where necessary.\n *\n * @public\n */\nexport type FetchApi = {\n  /**\n   * The `fetch` implementation.\n   */\n  fetch: typeof fetch;\n};\n\n/**\n * The {@link ApiRef} of {@link FetchApi}.\n *\n * @remarks\n *\n * This is a wrapper for the fetch API, that has additional behaviors such as\n * the ability to automatically inject auth information where necessary.\n *\n * Note that the default behavior of this API (unless overridden by your org),\n * is to require that the user is already signed in so that it has auth\n * information to inject. Therefore, using the default implementation of this\n * utility API e.g. on the `SignInPage` or similar, would cause issues. In\n * special circumstances like those, you can use the regular system `fetch`\n * instead.\n *\n * @public\n */\nexport const fetchApiRef: ApiRef<FetchApi> = createApiRef({\n  id: 'core.fetch',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ApiRef, createApiRef } from '../system';\nimport { BackstageUserIdentity, ProfileInfo } from './auth';\n\n/**\n * The Identity API used to identify and get information about the signed in user.\n *\n * @public\n */\nexport type IdentityApi = {\n  /**\n   * The profile of the signed in user.\n   */\n  getProfileInfo(): Promise<ProfileInfo>;\n\n  /**\n   * User identity information within Backstage.\n   */\n  getBackstageIdentity(): Promise<BackstageUserIdentity>;\n\n  /**\n   * Provides credentials in the form of a token which proves the identity of the signed in user.\n   *\n   * The token will be undefined if the signed in user does not have a verified\n   * identity, such as a demo user or mocked user for e2e tests.\n   */\n  getCredentials(): Promise<{ token?: string }>;\n\n  /**\n   * Sign out the current user\n   */\n  signOut(): Promise<void>;\n};\n\n/**\n * The {@link ApiRef} of {@link IdentityApi}.\n *\n * @public\n */\nexport const identityApiRef: ApiRef<IdentityApi> = createApiRef({\n  id: 'core.identity',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from '@backstage/types';\nimport { ApiRef, createApiRef } from '../system';\nimport { AuthProviderInfo } from './auth';\n\n/**\n * Describes how to handle auth requests. Both how to show them to the user, and what to do when\n * the user accesses the auth request.\n *\n * @public\n */\nexport type OAuthRequesterOptions<TOAuthResponse> = {\n  /**\n   * Information about the auth provider, which will be forwarded to auth requests.\n   */\n  provider: AuthProviderInfo;\n\n  /**\n   * Implementation of the auth flow, which will be called synchronously when\n   * trigger() is called on an auth requests.\n   */\n  onAuthRequest(scopes: Set<string>): Promise<TOAuthResponse>;\n};\n\n/**\n * Function used to trigger new auth requests for a set of scopes.\n *\n * @remarks\n *\n * The returned promise will resolve to the same value returned by the onAuthRequest in the\n * {@link OAuthRequesterOptions}. Or rejected, if the request is rejected.\n *\n * This function can be called multiple times before the promise resolves. All calls\n * will be merged into one request, and the scopes forwarded to the onAuthRequest will be the\n * union of all requested scopes.\n *\n * @public\n */\nexport type OAuthRequester<TAuthResponse> = (\n  scopes: Set<string>,\n) => Promise<TAuthResponse>;\n\n/**\n * An pending auth request for a single auth provider. The request will remain in this pending\n * state until either reject() or trigger() is called.\n *\n * @remarks\n *\n * Any new requests for the same provider are merged into the existing pending request, meaning\n * there will only ever be a single pending request for a given provider.\n *\n * @public\n */\nexport type PendingOAuthRequest = {\n  /**\n   * Information about the auth provider, as given in the AuthRequesterOptions\n   */\n  provider: AuthProviderInfo;\n\n  /**\n   * Rejects the request, causing all pending AuthRequester calls to fail with \"RejectedError\".\n   */\n  reject(): void;\n\n  /**\n   * Trigger the auth request to continue the auth flow, by for example showing a popup.\n   *\n   * Synchronously calls onAuthRequest with all scope currently in the request.\n   */\n  trigger(): Promise<void>;\n};\n\n/**\n * Provides helpers for implemented OAuth login flows within Backstage.\n *\n * @public\n */\nexport type OAuthRequestApi = {\n  /**\n   * A utility for showing login popups or similar things, and merging together multiple requests for\n   * different scopes into one request that includes all scopes.\n   *\n   * The passed in options provide information about the login provider, and how to handle auth requests.\n   *\n   * The returned AuthRequester function is used to request login with new scopes. These requests\n   * are merged together and forwarded to the auth handler, as soon as a consumer of auth requests\n   * triggers an auth flow.\n   *\n   * See AuthRequesterOptions, AuthRequester, and handleAuthRequests for more info.\n   */\n  createAuthRequester<OAuthResponse>(\n    options: OAuthRequesterOptions<OAuthResponse>,\n  ): OAuthRequester<OAuthResponse>;\n\n  /**\n   * Observers pending auth requests. The returned observable will emit all\n   * current active auth request, at most one for each created auth requester.\n   *\n   * Each request has its own info about the login provider, forwarded from the auth requester options.\n   *\n   * Depending on user interaction, the request should either be rejected, or used to trigger the auth handler.\n   * If the request is rejected, all pending AuthRequester calls will fail with a \"RejectedError\".\n   * If a auth is triggered, and the auth handler resolves successfully, then all currently pending\n   * AuthRequester calls will resolve to the value returned by the onAuthRequest call.\n   */\n  authRequest$(): Observable<PendingOAuthRequest[]>;\n};\n\n/**\n * The {@link ApiRef} of {@link OAuthRequestApi}.\n *\n * @public\n */\nexport const oauthRequestApiRef: ApiRef<OAuthRequestApi> = createApiRef({\n  id: 'core.oauthrequest',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { JsonValue, Observable } from '@backstage/types';\n\n/**\n * A snapshot in time of the current known value of a storage key.\n *\n * @public\n */\nexport type StorageValueSnapshot<TValue extends JsonValue> =\n  | {\n      key: string;\n      presence: 'unknown' | 'absent';\n      value?: undefined;\n    }\n  | {\n      key: string;\n      presence: 'present';\n      value: TValue;\n    };\n\n/**\n * Provides a key-value persistence API.\n *\n * @public\n */\nexport interface StorageApi {\n  /**\n   * Create a bucket to store data in.\n   *\n   * @param name - Namespace for the storage to be stored under,\n   *               will inherit previous namespaces too\n   */\n  forBucket(name: string): StorageApi;\n\n  /**\n   * Remove persistent data.\n   *\n   * @param key - Unique key associated with the data.\n   */\n  remove(key: string): Promise<void>;\n\n  /**\n   * Save persistent data, and emit messages to anyone that is using\n   * {@link StorageApi.observe$} for this key.\n   *\n   * @param key - Unique key associated with the data.\n   * @param data - The data to be stored under the key.\n   */\n  set<T extends JsonValue>(key: string, data: T): Promise<void>;\n\n  /**\n   * Observe the value over time for a particular key in the current bucket.\n   *\n   * @remarks\n   *\n   * The observable will only emit values when the value changes in the underlying\n   * storage, although multiple values with the same shape may be emitted in a row.\n   *\n   * If a {@link StorageApi.snapshot} of a key is retrieved and the presence is\n   * `'unknown'`, then you are guaranteed to receive a snapshot with a known\n   * presence, as long as you observe the key within the same tick.\n   *\n   * Since the emitted values are shared across all subscribers, it is important\n   * not to mutate the returned values. The values may be frozen as a precaution.\n   *\n   * @param key - Unique key associated with the data\n   */\n  observe$<T extends JsonValue>(\n    key: string,\n  ): Observable<StorageValueSnapshot<T>>;\n\n  /**\n   * Returns an immediate snapshot value for the given key, if possible.\n   *\n   * @remarks\n   *\n   * Combine with {@link StorageApi.observe$} to get notified of value changes.\n   *\n   * Note that this method is synchronous, and some underlying storages may be\n   * unable to retrieve a value using this method - the result may or may not\n   * consistently have a presence of 'unknown'. Use {@link StorageApi.observe$}\n   * to be sure to receive an actual value eventually.\n   */\n  snapshot<T extends JsonValue>(key: string): StorageValueSnapshot<T>;\n}\n\n/**\n * The {@link ApiRef} of {@link StorageApi}.\n *\n * @public\n */\nexport const storageApiRef: ApiRef<StorageApi> = createApiRef({\n  id: 'core.storage',\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsApi,\n  AnalyticsEventAttributes,\n  AnalyticsTracker,\n} from '../apis';\nimport { AnalyticsContextValue } from './';\n\nexport class Tracker implements AnalyticsTracker {\n  constructor(\n    private readonly analyticsApi: AnalyticsApi,\n    private context: AnalyticsContextValue = {\n      routeRef: 'unknown',\n      pluginId: 'root',\n      extension: 'App',\n    },\n  ) {}\n\n  setContext(context: AnalyticsContextValue) {\n    this.context = context;\n  }\n\n  captureEvent(\n    action: string,\n    subject: string,\n    {\n      value,\n      attributes,\n    }: { value?: number; attributes?: AnalyticsEventAttributes } = {},\n  ) {\n    try {\n      this.analyticsApi.captureEvent({\n        action,\n        subject,\n        value,\n        attributes,\n        context: this.context,\n      });\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn('Error during analytics event capture. %o', e);\n    }\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useAnalyticsContext } from './AnalyticsContext';\nimport {\n  analyticsApiRef,\n  AnalyticsTracker,\n  AnalyticsApi,\n  useApi,\n} from '../apis';\nimport { useRef } from 'react';\nimport { Tracker } from './Tracker';\n\nfunction useAnalyticsApi(): AnalyticsApi {\n  try {\n    return useApi(analyticsApiRef);\n  } catch {\n    return { captureEvent: () => {} };\n  }\n}\n\n/**\n * Gets a pre-configured analytics tracker.\n *\n * @public\n */\nexport function useAnalytics(): AnalyticsTracker {\n  const trackerRef = useRef<Tracker | null>(null);\n  const context = useAnalyticsContext();\n  // Our goal is to make this API truly optional for any/all consuming code\n  // (including tests). This hook runs last to ensure hook order is, as much as\n  // possible, maintained.\n  const analyticsApi = useAnalyticsApi();\n\n  function getTracker(): Tracker {\n    if (trackerRef.current === null) {\n      trackerRef.current = new Tracker(analyticsApi);\n    }\n    return trackerRef.current;\n  }\n\n  const tracker = getTracker();\n  tracker.setContext(context);\n\n  return tracker;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useVersionedContext } from '@backstage/version-bridge';\nimport { AppContext as AppContextV1 } from './types';\n\n/**\n * React hook providing {@link AppContext}.\n *\n * @public\n */\nexport const useApp = (): AppContextV1 => {\n  const versionedContext = useVersionedContext<{ 1: AppContextV1 }>(\n    'app-context',\n  );\n  if (!versionedContext) {\n    throw new Error('App context is not available');\n  }\n\n  const appContext = versionedContext.atVersion(1);\n  if (!appContext) {\n    throw new Error('AppContext v1 not available');\n  }\n  return appContext;\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentType, ReactNode } from 'react';\nimport { getOrCreateGlobalSingleton } from '@backstage/version-bridge';\n\ntype DataContainer = {\n  map: Map<string, unknown>;\n};\n\n// This method of storing the component data was deprecated in September 2021, it\n// will be removed in the future for the reasons described below.\nconst globalStore = getOrCreateGlobalSingleton(\n  'component-data-store',\n  () => new WeakMap<ComponentType<any>, DataContainer>(),\n);\n\n// This key is used to attach component data to the component type (function or class)\n// itself. This method is used because it has better compatibility component wrappers\n// like react-hot-loader, as opposed to the WeakMap method or using a symbol.\nconst componentDataKey = '__backstage_data';\n\ntype ComponentWithData = ComponentType<any> & {\n  [componentDataKey]?: DataContainer;\n};\n\ntype MaybeComponentNode = ReactNode & {\n  type?: ComponentWithData;\n};\n\n/**\n * Stores data related to a component in a global store.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#component-data}.\n *\n * @param component - The component to attach the data to.\n * @param type - The key under which the data will be stored.\n * @param data - Arbitrary value.\n * @public\n */\nexport function attachComponentData<P>(\n  component: ComponentType<P>,\n  type: string,\n  data: unknown,\n) {\n  const dataComponent = component as ComponentWithData;\n\n  let container = dataComponent[componentDataKey] ?? globalStore.get(component);\n  if (!container) {\n    container = { map: new Map() };\n    Object.defineProperty(dataComponent, componentDataKey, {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: container,\n    });\n    globalStore.set(component, container);\n  }\n\n  if (container.map.has(type)) {\n    const name = component.displayName || component.name;\n    throw new Error(\n      `Attempted to attach duplicate data \"${type}\" to component \"${name}\"`,\n    );\n  }\n\n  container.map.set(type, data);\n}\n\n/**\n * Retrieves data attached to a component.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#component-data}.\n *\n * @param node - React component to look up.\n * @param type - Key of the data to retrieve.\n * @returns Data stored using {@link attachComponentData}.\n * @public\n */\nexport function getComponentData<T>(\n  node: ReactNode,\n  type: string,\n): T | undefined {\n  if (!node) {\n    return undefined;\n  }\n\n  const component = (node as MaybeComponentNode).type;\n  if (!component) {\n    return undefined;\n  }\n\n  const container = component[componentDataKey] ?? globalStore.get(component);\n  if (!container) {\n    return undefined;\n  }\n\n  return container.map.get(type) as T | undefined;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getOrCreateGlobalSingleton } from '@backstage/version-bridge';\n\n/**\n * Catch-all type for route params.\n *\n * @public\n */\nexport type AnyParams = { [param in string]: string } | undefined;\n\n/**\n * Type describing the key type of a route parameter mapping.\n *\n * @public\n */\nexport type ParamKeys<Params extends AnyParams> = keyof Params extends never\n  ? []\n  : (keyof Params)[];\n\n/**\n * Optional route params.\n *\n * @public\n */\nexport type OptionalParams<Params extends { [param in string]: string }> =\n  Params[keyof Params] extends never ? undefined : Params;\n\n/**\n * TS magic for handling route parameters.\n *\n * @remarks\n *\n * The extra TS magic here is to require a single params argument if the RouteRef\n * had at least one param defined, but require 0 arguments if there are no params defined.\n * Without this we'd have to pass in empty object to all parameter-less RouteRefs\n * just to make TypeScript happy, or we would have to make the argument optional in\n * which case you might forget to pass it in when it is actually required.\n *\n * @public\n */\nexport type RouteFunc<Params extends AnyParams> = (\n  ...[params]: Params extends undefined ? readonly [] : readonly [Params]\n) => string;\n\n/**\n * This symbol is what we use at runtime to determine whether a given object\n * is a type of RouteRef or not. It doesn't work well in TypeScript though since\n * the `unique symbol` will refer to different values between package versions.\n * For that reason we use the marker $$routeRefType to represent the symbol at\n * compile-time instead of using the symbol directly.\n *\n * @internal\n */\nexport const routeRefType: unique symbol = getOrCreateGlobalSingleton<any>(\n  'route-ref-type',\n  () => Symbol('route-ref-type'),\n);\n\n/**\n * Absolute route reference.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @public\n */\nexport type RouteRef<Params extends AnyParams = any> = {\n  $$routeRefType: 'absolute'; // See routeRefType above\n\n  params: ParamKeys<Params>;\n};\n\n/**\n * Descriptor of a route relative to an absolute {@link RouteRef}.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @public\n */\nexport type SubRouteRef<Params extends AnyParams = any> = {\n  $$routeRefType: 'sub'; // See routeRefType above\n\n  parent: RouteRef;\n\n  path: string;\n\n  params: ParamKeys<Params>;\n};\n\n/**\n * Route descriptor, to be later bound to a concrete route by the app. Used to implement cross-plugin route references.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @public\n */\nexport type ExternalRouteRef<\n  Params extends AnyParams = any,\n  Optional extends boolean = any,\n> = {\n  $$routeRefType: 'external'; // See routeRefType above\n\n  params: ParamKeys<Params>;\n\n  optional?: Optional;\n};\n\n/**\n * @internal\n */\nexport type AnyRouteRef =\n  | RouteRef<any>\n  | SubRouteRef<any>\n  | ExternalRouteRef<any, any>;\n\n/**\n * A duplicate of the react-router RouteObject, but with routeRef added\n * @internal\n */\nexport interface BackstageRouteObject {\n  caseSensitive: boolean;\n  children?: BackstageRouteObject[];\n  element: React.ReactNode;\n  path: string;\n  routeRefs: Set<RouteRef>;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RouteRef,\n  routeRefType,\n  AnyParams,\n  ParamKeys,\n  OptionalParams,\n} from './types';\n\n/**\n * @internal\n */\nexport class RouteRefImpl<Params extends AnyParams>\n  implements RouteRef<Params>\n{\n  // The marker is used for type checking while the symbol is used at runtime.\n  declare $$routeRefType: 'absolute';\n  readonly [routeRefType] = 'absolute';\n\n  constructor(\n    private readonly id: string,\n    readonly params: ParamKeys<Params>,\n  ) {}\n\n  get title() {\n    return this.id;\n  }\n\n  toString() {\n    return `routeRef{type=absolute,id=${this.id}}`;\n  }\n}\n\n/**\n * Create a {@link RouteRef} from a route descriptor.\n *\n * @param config - Description of the route reference to be created.\n * @public\n */\nexport function createRouteRef<\n  // Params is the type that we care about and the one to be embedded in the route ref.\n  // For example, given the params ['name', 'kind'], Params will be {name: string, kind: string}\n  Params extends { [param in ParamKey]: string },\n  // ParamKey is here to make sure the Params type properly has its keys narrowed down\n  // to only the elements of params. Defaulting to never makes sure we end up with\n  // Param = {} if the params array is empty.\n  ParamKey extends string = never,\n>(config: {\n  /** The id of the route ref, used to identify it when printed */\n  id: string;\n  /** A list of parameter names that the path that this route ref is bound to must contain */\n  params?: ParamKey[];\n}): RouteRef<OptionalParams<Params>> {\n  return new RouteRefImpl(\n    config.id,\n    (config.params ?? []) as ParamKeys<OptionalParams<Params>>,\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnyParams,\n  OptionalParams,\n  ParamKeys,\n  RouteRef,\n  routeRefType,\n  SubRouteRef,\n} from './types';\n\n// Should match the pattern in react-router\nconst PARAM_PATTERN = /^\\w+$/;\n\n/**\n * @internal\n */\nexport class SubRouteRefImpl<Params extends AnyParams>\n  implements SubRouteRef<Params>\n{\n  // The marker is used for type checking while the symbol is used at runtime.\n  declare $$routeRefType: 'sub';\n  readonly [routeRefType] = 'sub';\n\n  constructor(\n    private readonly id: string,\n    readonly path: string,\n    readonly parent: RouteRef,\n    readonly params: ParamKeys<Params>,\n  ) {}\n\n  toString() {\n    return `routeRef{type=sub,id=${this.id}}`;\n  }\n}\n\n/**\n * Used in {@link PathParams} type declaration.\n * @public\n */\nexport type ParamPart<S extends string> = S extends `:${infer Param}`\n  ? Param\n  : never;\n\n/**\n * Used in {@link PathParams} type declaration.\n * @public\n */\nexport type ParamNames<S extends string> =\n  S extends `${infer Part}/${infer Rest}`\n    ? ParamPart<Part> | ParamNames<Rest>\n    : ParamPart<S>;\n/**\n * This utility type helps us infer a Param object type from a string path\n * For example, `/foo/:bar/:baz` inferred to `{ bar: string, baz: string }`\n * @public\n */\nexport type PathParams<S extends string> = { [name in ParamNames<S>]: string };\n\n/**\n * Merges a param object type with an optional params type into a params object.\n * @public\n */\nexport type MergeParams<\n  P1 extends { [param in string]: string },\n  P2 extends AnyParams,\n> = (P1[keyof P1] extends never ? {} : P1) & (P2 extends undefined ? {} : P2);\n\n/**\n * Creates a SubRouteRef type given the desired parameters and parent route parameters.\n * The parameters types are merged together while ensuring that there is no overlap between the two.\n *\n * @public\n */\nexport type MakeSubRouteRef<\n  Params extends { [param in string]: string },\n  ParentParams extends AnyParams,\n> = keyof Params & keyof ParentParams extends never\n  ? SubRouteRef<OptionalParams<MergeParams<Params, ParentParams>>>\n  : never;\n\n/**\n * Create a {@link SubRouteRef} from a route descriptor.\n *\n * @param config - Description of the route reference to be created.\n * @public\n */\nexport function createSubRouteRef<\n  Path extends string,\n  ParentParams extends AnyParams = never,\n>(config: {\n  id: string;\n  path: Path;\n  parent: RouteRef<ParentParams>;\n}): MakeSubRouteRef<PathParams<Path>, ParentParams> {\n  const { id, path, parent } = config;\n  type Params = PathParams<Path>;\n\n  // Collect runtime parameters from the path, e.g. ['bar', 'baz'] from '/foo/:bar/:baz'\n  const pathParams = path\n    .split('/')\n    .filter(p => p.startsWith(':'))\n    .map(p => p.substring(1));\n  const params = [...parent.params, ...pathParams];\n\n  if (parent.params.some(p => pathParams.includes(p as string))) {\n    throw new Error(\n      'SubRouteRef may not have params that overlap with its parent',\n    );\n  }\n  if (!path.startsWith('/')) {\n    throw new Error(`SubRouteRef path must start with '/', got '${path}'`);\n  }\n  if (path.endsWith('/')) {\n    throw new Error(`SubRouteRef path must not end with '/', got '${path}'`);\n  }\n  for (const param of pathParams) {\n    if (!PARAM_PATTERN.test(param)) {\n      throw new Error(`SubRouteRef path has invalid param, got '${param}'`);\n    }\n  }\n\n  // We ensure that the type of the return type is sane here\n  const subRouteRef = new SubRouteRefImpl(\n    id,\n    path,\n    parent,\n    params as ParamKeys<MergeParams<Params, ParentParams>>,\n  ) as SubRouteRef<OptionalParams<MergeParams<Params, ParentParams>>>;\n\n  // But skip type checking of the return value itself, because the conditional\n  // type checking of the parent parameter overlap is tricky to express.\n  return subRouteRef as any;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ExternalRouteRef,\n  routeRefType,\n  AnyParams,\n  ParamKeys,\n  OptionalParams,\n} from './types';\n\n/**\n * @internal\n */\nexport class ExternalRouteRefImpl<\n  Params extends AnyParams,\n  Optional extends boolean,\n> implements ExternalRouteRef<Params, Optional>\n{\n  // The marker is used for type checking while the symbol is used at runtime.\n  declare $$routeRefType: 'external';\n  readonly [routeRefType] = 'external';\n\n  constructor(\n    private readonly id: string,\n    readonly params: ParamKeys<Params>,\n    readonly optional: Optional,\n  ) {}\n\n  toString() {\n    return `routeRef{type=external,id=${this.id}}`;\n  }\n}\n\n/**\n * Creates a route descriptor, to be later bound to a concrete route by the app. Used to implement cross-plugin route references.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @param options - Description of the route reference to be created.\n * @public\n */\nexport function createExternalRouteRef<\n  Params extends { [param in ParamKey]: string },\n  Optional extends boolean = false,\n  ParamKey extends string = never,\n>(options: {\n  /**\n   * An identifier for this route, used to identify it in error messages\n   */\n  id: string;\n\n  /**\n   * The parameters that will be provided to the external route reference.\n   */\n  params?: ParamKey[];\n\n  /**\n   * Whether or not this route is optional, defaults to false.\n   *\n   * Optional external routes are not required to be bound in the app, and\n   * if they aren't, `useRouteRef` will return `undefined`.\n   */\n  optional?: Optional;\n}): ExternalRouteRef<OptionalParams<Params>, Optional> {\n  return new ExternalRouteRefImpl(\n    options.id,\n    (options.params ?? []) as ParamKeys<OptionalParams<Params>>,\n    Boolean(options.optional) as Optional,\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useMemo } from 'react';\nimport { matchRoutes, useLocation } from 'react-router-dom';\nimport { useVersionedContext } from '@backstage/version-bridge';\nimport {\n  AnyParams,\n  ExternalRouteRef,\n  RouteFunc,\n  RouteRef,\n  SubRouteRef,\n} from './types';\n\n/**\n * @internal\n */\nexport interface RouteResolver {\n  resolve<Params extends AnyParams>(\n    anyRouteRef:\n      | RouteRef<Params>\n      | SubRouteRef<Params>\n      | ExternalRouteRef<Params, any>,\n    sourceLocation: Parameters<typeof matchRoutes>[1],\n  ): RouteFunc<Params> | undefined;\n}\n\n/**\n * React hook for constructing URLs to routes.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}\n *\n * @param routeRef - The ref to route that should be converted to URL.\n * @returns A function that will in turn return the concrete URL of the `routeRef`.\n * @public\n */\nexport function useRouteRef<Optional extends boolean, Params extends AnyParams>(\n  routeRef: ExternalRouteRef<Params, Optional>,\n): Optional extends true ? RouteFunc<Params> | undefined : RouteFunc<Params>;\n\n/**\n * React hook for constructing URLs to routes.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}\n *\n * @param routeRef - The ref to route that should be converted to URL.\n * @returns A function that will in turn return the concrete URL of the `routeRef`.\n * @public\n */\nexport function useRouteRef<Params extends AnyParams>(\n  routeRef: RouteRef<Params> | SubRouteRef<Params>,\n): RouteFunc<Params>;\n\n/**\n * React hook for constructing URLs to routes.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}\n *\n * @param routeRef - The ref to route that should be converted to URL.\n * @returns A function that will in turn return the concrete URL of the `routeRef`.\n * @public\n */\nexport function useRouteRef<Params extends AnyParams>(\n  routeRef:\n    | RouteRef<Params>\n    | SubRouteRef<Params>\n    | ExternalRouteRef<Params, any>,\n): RouteFunc<Params> | undefined {\n  const { pathname } = useLocation();\n  const versionedContext = useVersionedContext<{ 1: RouteResolver }>(\n    'routing-context',\n  );\n  if (!versionedContext) {\n    throw new Error('Routing context is not available');\n  }\n\n  const resolver = versionedContext.atVersion(1);\n  const routeFunc = useMemo(\n    () => resolver && resolver.resolve(routeRef, { pathname }),\n    [resolver, routeRef, pathname],\n  );\n\n  if (!versionedContext) {\n    throw new Error('useRouteRef used outside of routing context');\n  }\n  if (!resolver) {\n    throw new Error('RoutingContext v1 not available');\n  }\n\n  const isOptional = 'optional' in routeRef && routeRef.optional;\n  if (!routeFunc && !isOptional) {\n    throw new Error(`No path for ${routeRef}`);\n  }\n\n  return routeFunc;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useParams } from 'react-router-dom';\nimport { RouteRef, AnyParams, SubRouteRef } from './types';\n\n/**\n * React hook for retrieving dynamic params from the current URL.\n * @param _routeRef - Ref of the current route.\n * @public\n */\nexport function useRouteRefParams<Params extends AnyParams>(\n  _routeRef: RouteRef<Params> | SubRouteRef<Params>,\n): Params {\n  return useParams() as Params;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport { AppContext } from '../app/types';\nimport { BackstagePlugin } from '../plugin';\n\ntype Props = {\n  app: AppContext;\n  plugin: BackstagePlugin;\n};\n\ntype State = { error: Error | undefined };\n\nexport class PluginErrorBoundary extends React.Component<Props, State> {\n  static getDerivedStateFromError(error: Error) {\n    return { error };\n  }\n\n  state: State = { error: undefined };\n\n  handleErrorReset = () => {\n    this.setState({ error: undefined });\n  };\n\n  render() {\n    const { error } = this.state;\n    const { app, plugin } = this.props;\n    const { ErrorBoundaryFallback } = app.getComponents();\n\n    if (error) {\n      return (\n        <ErrorBoundaryFallback\n          error={error}\n          resetError={this.handleErrorReset}\n          plugin={plugin}\n        />\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { lazy, Suspense } from 'react';\nimport { AnalyticsContext } from '../analytics';\nimport { useApp } from '../app';\nimport { RouteRef, useRouteRef } from '../routing';\nimport { attachComponentData } from './componentData';\nimport { Extension, BackstagePlugin } from '../plugin';\nimport { PluginErrorBoundary } from './PluginErrorBoundary';\nimport { PluginProvider } from '../plugin-options';\n\n/**\n * Lazy or synchronous retrieving of extension components.\n *\n * @public\n */\nexport type ComponentLoader<T> =\n  | {\n      lazy: () => Promise<T>;\n    }\n  | {\n      sync: T;\n    };\n\n/**\n * Extension for components that can have its own URL route (top-level pages, tabs etc.).\n *\n * @remarks\n *\n * We do not use ComponentType as the return type, since it doesn't let us convey the children prop.\n * ComponentType inserts children as an optional prop whether the inner component accepts it or not,\n * making it impossible to make the usage of children type safe.\n *\n * See {@link https://backstage.io/docs/plugins/composability#extensions}.\n *\n * @public\n */\nexport function createRoutableExtension<\n  T extends (props: any) => JSX.Element | null,\n>(options: {\n  /**\n   * A loader for the component that is rendered by this extension.\n   */\n  component: () => Promise<T>;\n\n  /**\n   * The mount point to bind this routable extension to.\n   *\n   * If this extension is placed somewhere in the app element tree of a Backstage\n   * app, callers will be able to route to this extensions by calling,\n   * `useRouteRef` with this mount point.\n   */\n  mountPoint: RouteRef;\n\n  /**\n   * The name of this extension that will represent it at runtime. It is for example\n   * used to identify this extension in analytics data.\n   *\n   * If possible the name should always be the same as the name of the exported\n   * variable for this extension.\n   */\n  name?: string;\n}): Extension<T> {\n  const { component, mountPoint, name } = options;\n  return createReactExtension({\n    component: {\n      lazy: () =>\n        component().then(\n          InnerComponent => {\n            const RoutableExtensionWrapper: any = (props: any) => {\n              // Validate that the routing is wired up correctly in the App.tsx\n              try {\n                useRouteRef(mountPoint);\n              } catch (error) {\n                if (typeof error === 'object' && error !== null) {\n                  const { message } = error as { message?: unknown };\n                  if (\n                    typeof message === 'string' &&\n                    message.startsWith('No path for ')\n                  ) {\n                    throw new Error(\n                      `Routable extension component with mount point ${mountPoint} was not discovered in the app element tree. ` +\n                        'Routable extension components may not be rendered by other components and must be ' +\n                        'directly available as an element within the App provider component.',\n                    );\n                  }\n                }\n                throw error;\n              }\n              return <InnerComponent {...props} />;\n            };\n\n            const componentName =\n              name ||\n              (InnerComponent as { displayName?: string }).displayName ||\n              InnerComponent.name ||\n              'LazyComponent';\n\n            RoutableExtensionWrapper.displayName = `RoutableExtension(${componentName})`;\n\n            return RoutableExtensionWrapper as T;\n          },\n          error => {\n            const RoutableExtensionWrapper: any = (_: any) => {\n              const app = useApp();\n              const { BootErrorPage } = app.getComponents();\n\n              return <BootErrorPage step=\"load-chunk\" error={error} />;\n            };\n            return RoutableExtensionWrapper;\n          },\n        ),\n    },\n    data: {\n      'core.mountPoint': mountPoint,\n    },\n    name,\n  });\n}\n\n/**\n * Plain React component extension.\n *\n * @remarks\n *\n * We do not use ComponentType as the return type, since it doesn't let us convey the children prop.\n * ComponentType inserts children as an optional prop whether the inner component accepts it or not,\n * making it impossible to make the usage of children type safe.\n *\n * See {@link https://backstage.io/docs/plugins/composability#extensions}.\n *\n * @public\n */\nexport function createComponentExtension<\n  T extends (props: any) => JSX.Element | null,\n>(options: {\n  /**\n   * A loader or synchronously supplied component that is rendered by this extension.\n   */\n  component: ComponentLoader<T>;\n\n  /**\n   * The name of this extension that will represent it at runtime. It is for example\n   * used to identify this extension in analytics data.\n   *\n   * If possible the name should always be the same as the name of the exported\n   * variable for this extension.\n   */\n  name?: string;\n}): Extension<T> {\n  const { component, name } = options;\n  return createReactExtension({ component, name });\n}\n\n/**\n * Used by {@link createComponentExtension} and {@link createRoutableExtension}.\n *\n * @remarks\n *\n * We do not use ComponentType as the return type, since it doesn't let us convey the children prop.\n * ComponentType inserts children as an optional prop whether the inner component accepts it or not,\n * making it impossible to make the usage of children type safe.\n *\n * See {@link https://backstage.io/docs/plugins/composability#extensions}.\n *\n * @public\n */\nexport function createReactExtension<\n  T extends (props: any) => JSX.Element | null,\n>(options: {\n  /**\n   * A loader or synchronously supplied component that is rendered by this extension.\n   */\n  component: ComponentLoader<T>;\n\n  /**\n   * Additional component data that is attached to the top-level extension component.\n   */\n  data?: Record<string, unknown>;\n\n  /**\n   * The name of this extension that will represent it at runtime. It is for example\n   * used to identify this extension in analytics data.\n   *\n   * If possible the name should always be the same as the name of the exported\n   * variable for this extension.\n   */\n  name?: string;\n}): Extension<T> {\n  const { data = {}, name } = options;\n  if (!name) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Declaring extensions without name is DEPRECATED. ' +\n        'Make sure that all usages of createReactExtension, createComponentExtension and createRoutableExtension provide a name.',\n    );\n  }\n\n  let Component: T;\n  if ('lazy' in options.component) {\n    const lazyLoader = options.component.lazy;\n    Component = lazy(() =>\n      lazyLoader().then(component => ({ default: component })),\n    ) as unknown as T;\n  } else {\n    Component = options.component.sync;\n  }\n  const componentName =\n    name ||\n    (Component as { displayName?: string }).displayName ||\n    Component.name ||\n    'Component';\n\n  return {\n    expose(plugin: BackstagePlugin) {\n      const Result: any = (props: any) => {\n        const app = useApp();\n        const { Progress } = app.getComponents();\n        // todo(iamEAP): Account for situations where this is attached via\n        // separate calls to attachComponentData().\n        const mountPoint = data?.['core.mountPoint'] as\n          | { id?: string }\n          | undefined;\n\n        return (\n          <Suspense fallback={<Progress />}>\n            <PluginErrorBoundary app={app} plugin={plugin}>\n              <AnalyticsContext\n                attributes={{\n                  pluginId: plugin.getId(),\n                  ...(name && { extension: name }),\n                  ...(mountPoint && { routeRef: mountPoint.id }),\n                }}\n              >\n                <PluginProvider plugin={plugin}>\n                  <Component {...props} />\n                </PluginProvider>\n              </AnalyticsContext>\n            </PluginErrorBoundary>\n          </Suspense>\n        );\n      };\n\n      attachComponentData(Result, 'core.plugin', plugin);\n      attachComponentData(Result, 'core.extensionName', name);\n      for (const [key, value] of Object.entries(data)) {\n        attachComponentData(Result, key, value);\n      }\n\n      Result.displayName = `Extension(${componentName})`;\n      return Result;\n    },\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Children,\n  Fragment,\n  isValidElement,\n  ReactNode,\n  ReactElement,\n  useMemo,\n} from 'react';\nimport { getComponentData } from './componentData';\nimport { useApi, FeatureFlagsApi, featureFlagsApiRef } from '../apis';\n\nfunction selectChildren(\n  rootNode: ReactNode,\n  featureFlagsApi: FeatureFlagsApi,\n  selector?: (element: ReactElement<unknown>) => boolean,\n  strictError?: string,\n): Array<ReactElement<unknown>> {\n  return Children.toArray(rootNode).flatMap(node => {\n    if (!isValidElement(node)) {\n      return [];\n    }\n\n    if (node.type === Fragment) {\n      return selectChildren(\n        node.props.children,\n        featureFlagsApi,\n        selector,\n        strictError,\n      );\n    }\n\n    if (getComponentData(node, 'core.featureFlagged')) {\n      const props = node.props as { with: string } | { without: string };\n      const isEnabled =\n        'with' in props\n          ? featureFlagsApi.isActive(props.with)\n          : !featureFlagsApi.isActive(props.without);\n      if (isEnabled) {\n        return selectChildren(\n          node.props.children,\n          featureFlagsApi,\n          selector,\n          strictError,\n        );\n      }\n      return [];\n    }\n\n    if (selector === undefined || selector(node)) {\n      return [node];\n    }\n\n    if (strictError) {\n      throw new Error(strictError);\n    }\n\n    return selectChildren(\n      node.props.children,\n      featureFlagsApi,\n      selector,\n      strictError,\n    );\n  });\n}\n\n/**\n * A querying interface tailored to traversing a set of selected React elements\n * and extracting data.\n *\n * @remarks\n *\n * Methods prefixed with `selectBy` are used to narrow the set of selected elements.\n *\n * Methods prefixed with `find` return concrete data using a deep traversal of the set.\n *\n * Methods prefixed with `get` return concrete data using a shallow traversal of the set.\n *\n * @public\n */\nexport interface ElementCollection {\n  /**\n   * Narrows the set of selected components by doing a deep traversal and\n   * only including those that have defined component data for the given `key`.\n   *\n   * @remarks\n   *\n   * Whether an element in the tree has component data set for the given key\n   * is determined by whether `getComponentData` returns undefined.\n   *\n   * The traversal does not continue deeper past elements that match the criteria,\n   * and it also includes the root children in the selection, meaning that if the,\n   * of all the currently selected elements contain data for the given key, this\n   * method is a no-op.\n   *\n   * If `withStrictError` is set, the resulting selection must be a full match, meaning\n   * there may be no elements that were excluded in the selection. If the selection\n   * is not a clean match, an error will be throw with `withStrictError` as the message.\n   *\n   * @param query - Filtering query.\n   */\n  selectByComponentData(query: {\n    key: string;\n    withStrictError?: string;\n  }): ElementCollection;\n\n  /**\n   * Finds all elements using the same criteria as `selectByComponentData`, but\n   * returns the actual component data of each of those elements instead.\n   *\n   * @param query - Lookup query.\n   */\n  findComponentData<T>(query: { key: string }): T[];\n\n  /**\n   * Returns all of the elements currently selected by this collection.\n   */\n  getElements<Props extends { [name: string]: unknown }>(): Array<\n    ReactElement<Props>\n  >;\n}\n\nclass Collection implements ElementCollection {\n  constructor(\n    private readonly node: ReactNode,\n    private readonly featureFlagsApi: FeatureFlagsApi,\n  ) {}\n\n  selectByComponentData(query: { key: string; withStrictError?: string }) {\n    const selection = selectChildren(\n      this.node,\n      this.featureFlagsApi,\n      node => getComponentData(node, query.key) !== undefined,\n      query.withStrictError,\n    );\n    return new Collection(selection, this.featureFlagsApi);\n  }\n\n  findComponentData<T>(query: { key: string }): T[] {\n    const selection = selectChildren(\n      this.node,\n      this.featureFlagsApi,\n      node => getComponentData(node, query.key) !== undefined,\n    );\n    return selection\n      .map(node => getComponentData<T>(node, query.key))\n      .filter((data: T | undefined): data is T => data !== undefined);\n  }\n\n  getElements<Props extends { [name: string]: unknown }>(): Array<\n    ReactElement<Props>\n  > {\n    return selectChildren(this.node, this.featureFlagsApi) as Array<\n      ReactElement<Props>\n    >;\n  }\n}\n\n/**\n * useElementFilter is a utility that helps you narrow down and retrieve data\n * from a React element tree, typically operating on the `children` property\n * passed in to a component.\n *\n * @remarks\n *\n * A common use-case is to construct declarative APIs\n * where a React component defines its behavior based on its children, such as\n * the relationship between `Routes` and `Route` in `react-router`.\n *\n * The purpose of this hook is similar to `React.Children.map`, and it expands upon\n * it to also handle traversal of fragments and Backstage specific things like the\n * `FeatureFlagged` component.\n *\n * The return value of the hook is computed by the provided filter function, but\n * with added memoization based on the input `node`. If further memoization\n * dependencies are used in the filter function, they should be added to the\n * third `dependencies` argument, just like `useMemo`, `useEffect`, etc.\n *\n * @public\n */\nexport function useElementFilter<T>(\n  node: ReactNode,\n  filterFn: (arg: ElementCollection) => T,\n  dependencies: any[] = [],\n) {\n  const featureFlagsApi = useApi(featureFlagsApiRef);\n  const elements = new Collection(node, featureFlagsApi);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => filterFn(elements), [node, ...dependencies]);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PluginConfig,\n  BackstagePlugin,\n  Extension,\n  AnyRoutes,\n  AnyExternalRoutes,\n  PluginFeatureFlagConfig,\n} from './types';\nimport { AnyApiFactory } from '../apis';\n\n/**\n * @internal\n */\nexport class PluginImpl<\n  Routes extends AnyRoutes,\n  ExternalRoutes extends AnyExternalRoutes,\n  PluginInputOptions extends {},\n> implements BackstagePlugin<Routes, ExternalRoutes, PluginInputOptions>\n{\n  constructor(\n    private readonly config: PluginConfig<\n      Routes,\n      ExternalRoutes,\n      PluginInputOptions\n    >,\n  ) {}\n\n  private options: {} | undefined = undefined;\n\n  getId(): string {\n    return this.config.id;\n  }\n\n  getApis(): Iterable<AnyApiFactory> {\n    return this.config.apis ?? [];\n  }\n\n  getFeatureFlags(): Iterable<PluginFeatureFlagConfig> {\n    return this.config.featureFlags?.slice() ?? [];\n  }\n\n  get routes(): Routes {\n    return this.config.routes ?? ({} as Routes);\n  }\n\n  get externalRoutes(): ExternalRoutes {\n    return this.config.externalRoutes ?? ({} as ExternalRoutes);\n  }\n\n  provide<T>(extension: Extension<T>): T {\n    return extension.expose(this);\n  }\n\n  __experimentalReconfigure(options: PluginInputOptions): void {\n    if (this.config.__experimentalConfigure) {\n      this.options = this.config.__experimentalConfigure(options);\n    }\n  }\n\n  getPluginOptions(): {} {\n    if (this.config.__experimentalConfigure && !this.options) {\n      this.options = this.config.__experimentalConfigure();\n    }\n    return this.options ?? {};\n  }\n\n  toString() {\n    return `plugin{${this.config.id}}`;\n  }\n}\n\n/**\n * Creates Backstage Plugin from config.\n *\n * @param config - Plugin configuration.\n * @public\n */\nexport function createPlugin<\n  Routes extends AnyRoutes = {},\n  ExternalRoutes extends AnyExternalRoutes = {},\n  PluginInputOptions extends {} = {},\n>(\n  config: PluginConfig<Routes, ExternalRoutes, PluginInputOptions>,\n): BackstagePlugin<Routes, ExternalRoutes, PluginInputOptions> {\n  return new PluginImpl(config);\n}\n"],"names":["SessionState","FeatureFlagState","_a"],"mappings":"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"}