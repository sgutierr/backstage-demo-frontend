import React, { useCallback, useState } from 'react';
import { Link, useNavigate, Navigate, useOutlet, Routes, Route } from 'react-router-dom';
import { useRouteRef, useApp, useApi, useRouteRefParams, AnalyticsContext } from '@backstage/core-plugin-api';
import { DocsIcon, Page, Header, Content, ContentHeader, SupportButton, ErrorPage } from '@backstage/core-components';
import { EntityListProvider, CatalogFilterLayout, EntitySearchBar, EntityKindPicker, UserListPicker, EntityTagPicker } from '@backstage/plugin-catalog-react';
import { ScaffolderPageContextMenu, TemplateCategoryPicker, TemplateGroups, Workflow } from '@backstage/plugin-scaffolder-react/alpha';
import Button from '@material-ui/core/Button';
import IconButton from '@material-ui/core/IconButton';
import useMediaQuery from '@material-ui/core/useMediaQuery';
import AddCircleOutline from '@material-ui/icons/AddCircleOutline';
import { catalogEntityCreatePermission } from '@backstage/plugin-catalog-common/alpha';
import { usePermission } from '@backstage/plugin-permission-react';
import { t as registerComponentRouteRef, o as editRouteRef, p as actionsRouteRef, q as scaffolderListTaskRouteRef, v as viewTechDocRouteRef, k as selectedTemplateRouteRef, r as rootRouteRef, u as scaffolderTaskRouteRef } from './TaskPage-3afec1cb.esm.js';
import { parseEntityRef, stringifyEntityRef } from '@backstage/catalog-model';
import { useTemplateSecrets, scaffolderApiRef, useCustomFieldExtensions, useCustomLayouts, SecretsContextProvider } from '@backstage/plugin-scaffolder-react';
import { D as DEFAULT_SCAFFOLDER_FIELD_EXTENSIONS, L as ListTasksPage } from './ListTasksPage-ad5803bd.esm.js';
import { T as TemplateEditor, a as TemplateFormPreviewer, C as CustomFieldExplorer, O as OngoingTask } from './TemplateFormPreviewer-f74a3d51.esm.js';
import { e as TemplateEditorIntro, W as WebFileSystemAccess, A as ActionsPage } from './TemplateEditorIntro-48f2a0ae.esm.js';
import '@backstage/integration-react';
import '@backstage/errors';
import 'qs';
import 'zen-observable';
import '@backstage/catalog-client';
import '@material-ui/core';
import '@material-ui/core/FormControl';
import '@material-ui/lab/Autocomplete';
import 'react-use/lib/useAsync';
import 'zod';
import 'zod-to-json-schema';
import '@material-ui/core/FormHelperText';
import '@material-ui/core/Input';
import '@material-ui/core/InputLabel';
import 'react-use/lib/useDebounce';
import 'react-use/lib/useEffectOnce';
import '@material-ui/lab';
import '@material-ui/core/Grid';
import '@material-ui/core/Step';
import '@material-ui/core/StepLabel';
import '@material-ui/core/Stepper';
import '@material-ui/core/styles';
import '@material-ui/core/Typography';
import '@material-ui/icons/Cancel';
import '@material-ui/icons/Check';
import '@material-ui/icons/FiberManualRecord';
import 'classnames';
import 'luxon';
import 'react-use/lib/useInterval';
import '@material-ui/icons/Language';
import 'humanize-duration';
import '@react-hookz/web';
import '@material-ui/icons/Repeat';
import '@material-ui/icons/Toc';
import '@material-ui/icons/ControlPoint';
import '@material-ui/icons/MoreVert';
import '@codemirror/language';
import '@codemirror/legacy-modes/mode/yaml';
import '@material-ui/icons/Close';
import '@uiw/react-codemirror';
import 'yaml';
import '@rjsf/validator-ajv8';
import '@material-ui/icons/ExpandMore';
import '@material-ui/icons/ExpandLess';
import '@material-ui/core/Chip';
import '@material-ui/icons/Settings';
import '@material-ui/icons/FontDownload';
import '@material-ui/core/Accordion';
import '@material-ui/core/AccordionDetails';
import '@material-ui/core/AccordionSummary';
import '@material-ui/core/Divider';
import '@material-ui/core/List';
import '@material-ui/core/ListItem';
import '@material-ui/core/ListItemIcon';
import '@material-ui/core/ListItemSecondaryAction';
import '@material-ui/core/ListItemText';
import '@material-ui/icons/Delete';
import '@material-ui/core/Box';
import '@material-ui/core/Tab';
import '@material-ui/core/Tabs';
import '@material-ui/icons/Refresh';
import '@material-ui/icons/Save';
import '@material-ui/lab/TreeView';
import '@material-ui/icons/ChevronRight';
import '@material-ui/lab/TreeItem';
import '@codemirror/view';
import '@material-ui/core/Card';
import '@material-ui/core/CardActionArea';
import '@material-ui/core/CardContent';
import '@material-ui/core/Tooltip';
import '@material-ui/icons/InfoOutlined';

const RegisterExistingButton = (props) => {
  const { title, to } = props;
  const { allowed } = usePermission({
    permission: catalogEntityCreatePermission
  });
  const isXSScreen = useMediaQuery(
    (theme) => theme.breakpoints.down("xs")
  );
  if (!to || !allowed) {
    return null;
  }
  return isXSScreen ? /* @__PURE__ */ React.createElement(
    IconButton,
    {
      component: Link,
      color: "primary",
      title,
      size: "small",
      to
    },
    /* @__PURE__ */ React.createElement(AddCircleOutline, null)
  ) : /* @__PURE__ */ React.createElement(Button, { component: Link, variant: "contained", color: "primary", to }, title);
};

const defaultGroup = {
  title: "Templates",
  filter: () => true
};
const createGroupsWithOther = (groups) => [
  ...groups,
  {
    title: "Other Templates",
    filter: (e) => ![...groups].some(({ filter }) => filter(e))
  }
];
const TemplateListPage = (props) => {
  var _a, _b, _c;
  const registerComponentLink = useRouteRef(registerComponentRouteRef);
  const {
    TemplateCardComponent,
    groups: givenGroups = [],
    templateFilter
  } = props;
  const navigate = useNavigate();
  const editorLink = useRouteRef(editRouteRef);
  const actionsLink = useRouteRef(actionsRouteRef);
  const tasksLink = useRouteRef(scaffolderListTaskRouteRef);
  const viewTechDocsLink = useRouteRef(viewTechDocRouteRef);
  const templateRoute = useRouteRef(selectedTemplateRouteRef);
  const app = useApp();
  const groups = givenGroups.length ? createGroupsWithOther(givenGroups) : [defaultGroup];
  const scaffolderPageContextMenuProps = {
    onEditorClicked: ((_a = props == null ? void 0 : props.contextMenu) == null ? void 0 : _a.editor) !== false ? () => navigate(editorLink()) : void 0,
    onActionsClicked: ((_b = props == null ? void 0 : props.contextMenu) == null ? void 0 : _b.actions) !== false ? () => navigate(actionsLink()) : void 0,
    onTasksClicked: ((_c = props == null ? void 0 : props.contextMenu) == null ? void 0 : _c.tasks) !== false ? () => navigate(tasksLink()) : void 0
  };
  const additionalLinksForEntity = useCallback(
    (template) => {
      var _a2, _b2;
      const { kind, namespace, name } = parseEntityRef(
        stringifyEntityRef(template)
      );
      return ((_a2 = template.metadata.annotations) == null ? void 0 : _a2["backstage.io/techdocs-ref"]) && viewTechDocsLink ? [
        {
          icon: (_b2 = app.getSystemIcon("docs")) != null ? _b2 : DocsIcon,
          text: "View TechDocs",
          url: viewTechDocsLink({ kind, namespace, name })
        }
      ] : [];
    },
    [app, viewTechDocsLink]
  );
  const onTemplateSelected = useCallback(
    (template) => {
      const { namespace, name } = parseEntityRef(stringifyEntityRef(template));
      navigate(templateRoute({ namespace, templateName: name }));
    },
    [navigate, templateRoute]
  );
  return /* @__PURE__ */ React.createElement(EntityListProvider, null, /* @__PURE__ */ React.createElement(Page, { themeId: "website" }, /* @__PURE__ */ React.createElement(
    Header,
    {
      pageTitleOverride: "Create a new component",
      title: "Create a new component",
      subtitle: "Create new software components using standard templates in your organization"
    },
    /* @__PURE__ */ React.createElement(ScaffolderPageContextMenu, { ...scaffolderPageContextMenuProps })
  ), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(ContentHeader, { title: "Available Templates" }, /* @__PURE__ */ React.createElement(
    RegisterExistingButton,
    {
      title: "Register Existing Component",
      to: registerComponentLink && registerComponentLink()
    }
  ), /* @__PURE__ */ React.createElement(SupportButton, null, "Create new software components using standard templates. Different templates create different kinds of components (services, websites, documentation, ...).")), /* @__PURE__ */ React.createElement(CatalogFilterLayout, null, /* @__PURE__ */ React.createElement(CatalogFilterLayout.Filters, null, /* @__PURE__ */ React.createElement(EntitySearchBar, null), /* @__PURE__ */ React.createElement(EntityKindPicker, { initialFilter: "template", hidden: true }), /* @__PURE__ */ React.createElement(
    UserListPicker,
    {
      initialFilter: "all",
      availableFilters: ["all", "starred"]
    }
  ), /* @__PURE__ */ React.createElement(TemplateCategoryPicker, null), /* @__PURE__ */ React.createElement(EntityTagPicker, null)), /* @__PURE__ */ React.createElement(CatalogFilterLayout.Content, null, /* @__PURE__ */ React.createElement(
    TemplateGroups,
    {
      groups,
      templateFilter,
      TemplateCardComponent,
      onTemplateSelected,
      additionalLinksForEntity
    }
  ))))));
};

const TemplateWizardPage = (props) => {
  const rootRef = useRouteRef(rootRouteRef);
  const taskRoute = useRouteRef(scaffolderTaskRouteRef);
  const { secrets } = useTemplateSecrets();
  const scaffolderApi = useApi(scaffolderApiRef);
  const navigate = useNavigate();
  const { templateName, namespace } = useRouteRefParams(
    selectedTemplateRouteRef
  );
  const templateRef = stringifyEntityRef({
    kind: "Template",
    namespace,
    name: templateName
  });
  const onCreate = async (values) => {
    const { taskId } = await scaffolderApi.scaffold({
      templateRef,
      values,
      secrets
    });
    navigate(taskRoute({ taskId }));
  };
  const onError = () => /* @__PURE__ */ React.createElement(Navigate, { to: rootRef() });
  return /* @__PURE__ */ React.createElement(AnalyticsContext, { attributes: { entityRef: templateRef } }, /* @__PURE__ */ React.createElement(Page, { themeId: "website" }, /* @__PURE__ */ React.createElement(
    Header,
    {
      pageTitleOverride: "Create a new component",
      title: "Create a new component",
      subtitle: "Create new software components using standard templates in your organization"
    }
  ), /* @__PURE__ */ React.createElement(
    Workflow,
    {
      namespace,
      templateName,
      onCreate,
      onError,
      extensions: props.customFieldExtensions,
      FormProps: props.FormProps,
      layouts: props.layouts
    }
  )));
};

function TemplateEditorPage(props) {
  const [selection, setSelection] = useState();
  let content = null;
  if ((selection == null ? void 0 : selection.type) === "local") {
    content = /* @__PURE__ */ React.createElement(
      TemplateEditor,
      {
        directory: selection.directory,
        fieldExtensions: props.customFieldExtensions,
        onClose: () => setSelection(void 0),
        layouts: props.layouts
      }
    );
  } else if ((selection == null ? void 0 : selection.type) === "form") {
    content = /* @__PURE__ */ React.createElement(
      TemplateFormPreviewer,
      {
        defaultPreviewTemplate: props.defaultPreviewTemplate,
        customFieldExtensions: props.customFieldExtensions,
        onClose: () => setSelection(void 0),
        layouts: props.layouts
      }
    );
  } else if ((selection == null ? void 0 : selection.type) === "field-explorer") {
    content = /* @__PURE__ */ React.createElement(
      CustomFieldExplorer,
      {
        customFieldExtensions: props.customFieldExtensions,
        onClose: () => setSelection(void 0)
      }
    );
  } else {
    content = /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(
      TemplateEditorIntro,
      {
        onSelect: (option) => {
          if (option === "local") {
            WebFileSystemAccess.requestDirectoryAccess().then((directory) => setSelection({ type: "local", directory })).catch(() => {
            });
          } else if (option === "form") {
            setSelection({ type: "form" });
          } else if (option === "field-explorer") {
            setSelection({ type: "field-explorer" });
          }
        }
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(Page, { themeId: "home" }, /* @__PURE__ */ React.createElement(
    Header,
    {
      title: "Template Editor",
      subtitle: "Edit, preview, and try out templates and template forms"
    }
  ), content);
}

const Router = (props) => {
  const {
    components: {
      TemplateCardComponent,
      TemplateOutputsComponent,
      TaskPageComponent = OngoingTask,
      TemplateListPageComponent = TemplateListPage,
      TemplateWizardPageComponent = TemplateWizardPage
    } = {}
  } = props;
  const outlet = useOutlet() || props.children;
  const customFieldExtensions = useCustomFieldExtensions(outlet);
  const fieldExtensions = [
    ...customFieldExtensions,
    ...DEFAULT_SCAFFOLDER_FIELD_EXTENSIONS.filter(
      ({ name }) => !customFieldExtensions.some(
        (customFieldExtension) => customFieldExtension.name === name
      )
    )
  ];
  const customLayouts = useCustomLayouts(outlet);
  return /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(
    Route,
    {
      path: "/",
      element: /* @__PURE__ */ React.createElement(
        TemplateListPageComponent,
        {
          TemplateCardComponent,
          contextMenu: props.contextMenu,
          groups: props.groups,
          templateFilter: props.templateFilter
        }
      )
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: selectedTemplateRouteRef.path,
      element: /* @__PURE__ */ React.createElement(SecretsContextProvider, null, /* @__PURE__ */ React.createElement(
        TemplateWizardPageComponent,
        {
          customFieldExtensions: fieldExtensions,
          layouts: customLayouts,
          FormProps: props.FormProps
        }
      ))
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: scaffolderTaskRouteRef.path,
      element: /* @__PURE__ */ React.createElement(
        TaskPageComponent,
        {
          TemplateOutputsComponent
        }
      )
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: editRouteRef.path,
      element: /* @__PURE__ */ React.createElement(SecretsContextProvider, null, /* @__PURE__ */ React.createElement(
        TemplateEditorPage,
        {
          customFieldExtensions: fieldExtensions,
          layouts: customLayouts
        }
      ))
    }
  ), /* @__PURE__ */ React.createElement(Route, { path: actionsRouteRef.path, element: /* @__PURE__ */ React.createElement(ActionsPage, null) }), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: scaffolderListTaskRouteRef.path,
      element: /* @__PURE__ */ React.createElement(ListTasksPage, null)
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: "*",
      element: /* @__PURE__ */ React.createElement(ErrorPage, { status: "404", statusMessage: "Page not found" })
    }
  ));
};

export { Router };
//# sourceMappingURL=index-9a46055b.esm.js.map
