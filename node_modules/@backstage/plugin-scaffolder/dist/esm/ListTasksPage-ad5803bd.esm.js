import { x as EntityPicker, y as EntityPickerSchema, z as EntityNamePicker, A as entityNamePickerValidation, B as EntityNamePickerSchema, C as EntityTagsPicker, D as EntityTagsPickerSchema, F as RepoUrlPicker, h as repoPickerValidation, G as RepoUrlPickerSchema, H as OwnerPicker, I as OwnerPickerSchema, J as OwnedEntityPicker, K as OwnedEntityPickerSchema, r as rootRouteRef } from './TaskPage-3afec1cb.esm.js';
import { StatusError, StatusOK, StatusPending, Page, Header, Lifecycle, Content, Progress, ErrorPanel, EmptyState, Table, Link } from '@backstage/core-components';
import { useApi, useRouteRef } from '@backstage/core-plugin-api';
import { catalogApiRef, EntityRefLink, CatalogFilterLayout } from '@backstage/plugin-catalog-react';
import useAsync from 'react-use/lib/useAsync';
import React, { useState } from 'react';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';
import { O as OwnerListPicker } from './TemplateEditorIntro-48f2a0ae.esm.js';
import { DateTime, Interval } from 'luxon';
import humanizeDuration from 'humanize-duration';
import Typography from '@material-ui/core/Typography';
import { parseEntityRef } from '@backstage/catalog-model';

const DEFAULT_SCAFFOLDER_FIELD_EXTENSIONS = [
  {
    component: EntityPicker,
    name: "EntityPicker",
    schema: EntityPickerSchema
  },
  {
    component: EntityNamePicker,
    name: "EntityNamePicker",
    validation: entityNamePickerValidation,
    schema: EntityNamePickerSchema
  },
  {
    component: EntityTagsPicker,
    name: "EntityTagsPicker",
    schema: EntityTagsPickerSchema
  },
  {
    component: RepoUrlPicker,
    name: "RepoUrlPicker",
    validation: repoPickerValidation,
    schema: RepoUrlPickerSchema
  },
  {
    component: OwnerPicker,
    name: "OwnerPicker",
    schema: OwnerPickerSchema
  },
  {
    component: OwnedEntityPicker,
    name: "OwnedEntityPicker",
    schema: OwnedEntityPickerSchema
  }
];

const CreatedAtColumn = ({ createdAt }) => {
  const createdAtTime = DateTime.fromISO(createdAt);
  const formatted = Interval.fromDateTimes(createdAtTime, DateTime.local()).toDuration().valueOf();
  return /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, humanizeDuration(formatted, { round: true }), " ago");
};

const OwnerEntityColumn = ({ entityRef }) => {
  var _a, _b, _c;
  const catalogApi = useApi(catalogApiRef);
  const { value, loading, error } = useAsync(
    () => catalogApi.getEntityByRef(entityRef || ""),
    [catalogApi, entityRef]
  );
  if (!entityRef) {
    return /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "Unknown");
  }
  if (loading || error) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(
    EntityRefLink,
    {
      entityRef: parseEntityRef(entityRef),
      title: (_c = (_b = (_a = value == null ? void 0 : value.spec) == null ? void 0 : _a.profile) == null ? void 0 : _b.displayName) != null ? _c : value == null ? void 0 : value.metadata.name
    }
  );
};

const TaskStatusColumn = ({ status }) => {
  switch (status) {
    case "processing":
      return /* @__PURE__ */ React.createElement(StatusPending, null, status);
    case "completed":
      return /* @__PURE__ */ React.createElement(StatusOK, null, status);
    case "error":
    default:
      return /* @__PURE__ */ React.createElement(StatusError, null, status);
  }
};

const TemplateTitleColumn = ({ entityRef }) => {
  const scaffolder = useApi(scaffolderApiRef);
  const { value, loading, error } = useAsync(
    () => scaffolder.getTemplateParameterSchema(entityRef || ""),
    [scaffolder, entityRef]
  );
  if (loading || error || !entityRef) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(EntityRefLink, { entityRef: parseEntityRef(entityRef), title: value == null ? void 0 : value.title });
};

const ListTaskPageContent = (props) => {
  var _a;
  const { initiallySelectedFilter = "owned" } = props;
  const scaffolderApi = useApi(scaffolderApiRef);
  const rootLink = useRouteRef(rootRouteRef);
  const [ownerFilter, setOwnerFilter] = useState(initiallySelectedFilter);
  const { value, loading, error } = useAsync(() => {
    var _a2;
    if (scaffolderApi.listTasks) {
      return (_a2 = scaffolderApi.listTasks) == null ? void 0 : _a2.call(scaffolderApi, { filterByOwnership: ownerFilter });
    }
    console.warn(
      "listTasks is not implemented in the scaffolderApi, please make sure to implement this method."
    );
    return Promise.resolve({ tasks: [] });
  }, [scaffolderApi, ownerFilter]);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(ErrorPanel, { error }), /* @__PURE__ */ React.createElement(
      EmptyState,
      {
        missing: "info",
        title: "No information to display",
        description: "There is no Tasks or there was an issue communicating with backend."
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(CatalogFilterLayout, null, /* @__PURE__ */ React.createElement(CatalogFilterLayout.Filters, null, /* @__PURE__ */ React.createElement(
    OwnerListPicker,
    {
      filter: ownerFilter,
      onSelectOwner: (id) => setOwnerFilter(id)
    }
  )), /* @__PURE__ */ React.createElement(CatalogFilterLayout.Content, null, /* @__PURE__ */ React.createElement(
    Table,
    {
      data: (_a = value == null ? void 0 : value.tasks) != null ? _a : [],
      title: "Tasks",
      columns: [
        {
          title: "Task ID",
          field: "id",
          render: (row) => /* @__PURE__ */ React.createElement(Link, { to: `${rootLink()}/tasks/${row.id}` }, row.id)
        },
        {
          title: "Template",
          render: (row) => {
            var _a2;
            return /* @__PURE__ */ React.createElement(
              TemplateTitleColumn,
              {
                entityRef: (_a2 = row.spec.templateInfo) == null ? void 0 : _a2.entityRef
              }
            );
          }
        },
        {
          title: "Created",
          field: "createdAt",
          render: (row) => /* @__PURE__ */ React.createElement(CreatedAtColumn, { createdAt: row.createdAt })
        },
        {
          title: "Owner",
          field: "createdBy",
          render: (row) => {
            var _a2, _b;
            return /* @__PURE__ */ React.createElement(OwnerEntityColumn, { entityRef: (_b = (_a2 = row.spec) == null ? void 0 : _a2.user) == null ? void 0 : _b.ref });
          }
        },
        {
          title: "Status",
          field: "status",
          render: (row) => /* @__PURE__ */ React.createElement(TaskStatusColumn, { status: row.status })
        }
      ]
    }
  )));
};
const ListTasksPage = (props) => {
  return /* @__PURE__ */ React.createElement(Page, { themeId: "home" }, /* @__PURE__ */ React.createElement(
    Header,
    {
      pageTitleOverride: "Templates Tasks",
      title: /* @__PURE__ */ React.createElement(React.Fragment, null, "List template tasks ", /* @__PURE__ */ React.createElement(Lifecycle, { shorthand: true, alpha: true })),
      subtitle: "All tasks that have been started"
    }
  ), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(ListTaskPageContent, { ...props })));
};

export { DEFAULT_SCAFFOLDER_FIELD_EXTENSIONS as D, ListTasksPage as L };
//# sourceMappingURL=ListTasksPage-ad5803bd.esm.js.map
