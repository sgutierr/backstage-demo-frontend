{"version":3,"file":"index.cjs.js","sources":["../src/schema/types.ts","../src/schema/compile.ts","../src/schema/collect.ts","../src/schema/filtering.ts","../src/schema/load.ts","../src/sources/EnvConfigSource.ts","../src/sources/transform/utils.ts","../src/sources/transform/substitution.ts","../src/sources/transform/include.ts","../src/sources/transform/apply.ts","../src/sources/FileConfigSource.ts","../src/sources/MergedConfigSource.ts","../src/sources/RemoteConfigSource.ts","../src/sources/ObservableConfigProxy.ts","../src/sources/ConfigSources.ts","../src/sources/utils.ts","../src/sources/MutableConfigSource.ts","../src/sources/StaticConfigSource.ts","../src/loader.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\n\n/**\n * An sub-set of configuration schema.\n */\nexport type ConfigSchemaPackageEntry = {\n  /**\n   * The configuration schema itself.\n   */\n  value: JsonObject;\n  /**\n   * The relative path that the configuration schema was discovered at.\n   */\n  path: string;\n};\n\n/**\n * A list of all possible configuration value visibilities.\n */\nexport const CONFIG_VISIBILITIES = ['frontend', 'backend', 'secret'] as const;\n\n/**\n * A type representing the possible configuration value visibilities\n *\n * @public\n */\nexport type ConfigVisibility = 'frontend' | 'backend' | 'secret';\n\n/**\n * The default configuration visibility if no other values is given.\n */\nexport const DEFAULT_CONFIG_VISIBILITY: ConfigVisibility = 'backend';\n\n/**\n * An explanation of a configuration validation error.\n */\nexport type ValidationError = {\n  keyword: string;\n  instancePath: string;\n  schemaPath: string;\n  params: Record<string, any>;\n  propertyName?: string;\n  message?: string;\n};\n\n/**\n * The result of validating configuration data using a schema.\n */\ntype ValidationResult = {\n  /**\n   * Errors that where emitted during validation, if any.\n   */\n  errors?: ValidationError[];\n  /**\n   * The configuration visibilities that were discovered during validation.\n   *\n   * The path in the key uses the form `/<key>/<sub-key>/<array-index>/<leaf-key>`\n   */\n  visibilityByDataPath: Map<string, ConfigVisibility>;\n\n  /**\n   * The configuration visibilities that were discovered during validation.\n   *\n   * The path in the key uses the form `/properties/<key>/items/additionalProperties/<leaf-key>`\n   */\n  visibilityBySchemaPath: Map<string, ConfigVisibility>;\n\n  /**\n   * The deprecated options that were discovered during validation.\n   *\n   * The path in the key uses the form `/<key>/<sub-key>/<array-index>/<leaf-key>`\n   */\n  deprecationByDataPath: Map<string, string>;\n};\n\n/**\n * A function used validate configuration data.\n */\nexport type ValidationFunc = (configs: AppConfig[]) => ValidationResult;\n\n/**\n * A function used to transform primitive configuration values.\n *\n * @public\n */\nexport type TransformFunc<T extends number | string | boolean> = (\n  value: T,\n  context: { visibility: ConfigVisibility },\n) => T | undefined;\n\n/**\n * Options used to process configuration data with a schema.\n *\n * @public\n */\nexport type ConfigSchemaProcessingOptions = {\n  /**\n   * The visibilities that should be included in the output data.\n   * If omitted, the data will not be filtered by visibility.\n   */\n  visibility?: ConfigVisibility[];\n\n  /**\n   * When set to `true`, any schema errors in the provided configuration will be ignored.\n   */\n  ignoreSchemaErrors?: boolean;\n\n  /**\n   * A transform function that can be used to transform primitive configuration values\n   * during validation. The value returned from the transform function will be used\n   * instead of the original value. If the transform returns `undefined`, the value\n   * will be omitted.\n   */\n  valueTransform?: TransformFunc<any>;\n\n  /**\n   * Whether or not to include the `filteredKeys` property in the output `AppConfig`s.\n   *\n   * Default: `false`.\n   */\n  withFilteredKeys?: boolean;\n\n  /**\n   * Whether or not to include the `deprecatedKeys` property in the output `AppConfig`s.\n   *\n   * Default: `true`.\n   */\n  withDeprecatedKeys?: boolean;\n};\n\n/**\n * A loaded configuration schema that is ready to process configuration data.\n *\n * @public\n */\nexport type ConfigSchema = {\n  process(\n    appConfigs: AppConfig[],\n    options?: ConfigSchemaProcessingOptions,\n  ): AppConfig[];\n\n  serialize(): JsonObject;\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Ajv from 'ajv';\nimport { JSONSchema7 as JSONSchema } from 'json-schema';\nimport mergeAllOf, { Resolvers } from 'json-schema-merge-allof';\nimport traverse from 'json-schema-traverse';\nimport { ConfigReader } from '@backstage/config';\nimport {\n  ConfigSchemaPackageEntry,\n  ValidationFunc,\n  CONFIG_VISIBILITIES,\n  ConfigVisibility,\n} from './types';\nimport { SchemaObject } from 'json-schema-traverse';\n\n/**\n * This takes a collection of Backstage configuration schemas from various\n * sources and compiles them down into a single schema validation function.\n *\n * It also handles the implementation of the custom \"visibility\" keyword used\n * to specify the scope of different config paths.\n */\nexport function compileConfigSchemas(\n  schemas: ConfigSchemaPackageEntry[],\n  options?: {\n    noUndeclaredProperties?: boolean;\n  },\n): ValidationFunc {\n  // The ajv instance below is stateful and doesn't really allow for additional\n  // output during validation. We work around this by having this extra piece\n  // of state that we reset before each validation.\n  const visibilityByDataPath = new Map<string, ConfigVisibility>();\n  const deprecationByDataPath = new Map<string, string>();\n\n  const ajv = new Ajv({\n    allErrors: true,\n    allowUnionTypes: true,\n    coerceTypes: true,\n    schemas: {\n      'https://backstage.io/schema/config-v1': true,\n    },\n  })\n    .addKeyword({\n      keyword: 'visibility',\n      metaSchema: {\n        type: 'string',\n        enum: CONFIG_VISIBILITIES,\n      },\n      compile(visibility: ConfigVisibility) {\n        return (_data, context) => {\n          if (context?.instancePath === undefined) {\n            return false;\n          }\n          if (visibility && visibility !== 'backend') {\n            const normalizedPath = context.instancePath.replace(\n              /\\['?(.*?)'?\\]/g,\n              (_, segment) => `/${segment}`,\n            );\n            visibilityByDataPath.set(normalizedPath, visibility);\n          }\n          return true;\n        };\n      },\n    })\n    .removeKeyword('deprecated') // remove `deprecated` keyword so that we can implement our own compiler\n    .addKeyword({\n      keyword: 'deprecated',\n      metaSchema: { type: 'string' },\n      compile(deprecationDescription: string) {\n        return (_data, context) => {\n          if (context?.instancePath === undefined) {\n            return false;\n          }\n          const normalizedPath = context.instancePath.replace(\n            /\\['?(.*?)'?\\]/g,\n            (_, segment) => `/${segment}`,\n          );\n          // create mapping of deprecation description and data path of property\n          deprecationByDataPath.set(normalizedPath, deprecationDescription);\n          return true;\n        };\n      },\n    });\n\n  for (const schema of schemas) {\n    try {\n      ajv.compile(schema.value);\n    } catch (error) {\n      throw new Error(`Schema at ${schema.path} is invalid, ${error}`);\n    }\n  }\n\n  const merged = mergeConfigSchemas(schemas.map(_ => _.value));\n\n  if (options?.noUndeclaredProperties) {\n    traverse(merged, (schema: SchemaObject) => {\n      /**\n       * The `additionalProperties` key can only be applied to `type: object` in the JSON\n       *  schema.\n       */\n      if (schema?.type === 'object') {\n        schema.additionalProperties ||= false;\n      }\n    });\n  }\n\n  const validate = ajv.compile(merged);\n\n  const visibilityBySchemaPath = new Map<string, ConfigVisibility>();\n  traverse(merged, (schema, path) => {\n    if (schema.visibility && schema.visibility !== 'backend') {\n      visibilityBySchemaPath.set(path, schema.visibility);\n    }\n  });\n\n  return configs => {\n    const config = ConfigReader.fromConfigs(configs).get();\n\n    visibilityByDataPath.clear();\n\n    const valid = validate(config);\n\n    if (!valid) {\n      return {\n        errors: validate.errors ?? [],\n        visibilityByDataPath: new Map(visibilityByDataPath),\n        visibilityBySchemaPath,\n        deprecationByDataPath,\n      };\n    }\n\n    return {\n      visibilityByDataPath: new Map(visibilityByDataPath),\n      visibilityBySchemaPath,\n      deprecationByDataPath,\n    };\n  };\n}\n\n/**\n * Given a list of configuration schemas from packages, merge them\n * into a single json schema.\n *\n * @public\n */\nexport function mergeConfigSchemas(schemas: JSONSchema[]): JSONSchema {\n  const merged = mergeAllOf(\n    { allOf: schemas },\n    {\n      // JSONSchema is typically subtractive, as in it always reduces the set of allowed\n      // inputs through constraints. This changes the object property merging to be additive\n      // rather than subtractive.\n      ignoreAdditionalProperties: true,\n      resolvers: {\n        // This ensures that the visibilities across different schemas are sound, and\n        // selects the most specific visibility for each path.\n        visibility(values: string[], path: string[]) {\n          const hasFrontend = values.some(_ => _ === 'frontend');\n          const hasSecret = values.some(_ => _ === 'secret');\n          if (hasFrontend && hasSecret) {\n            throw new Error(\n              `Config schema visibility is both 'frontend' and 'secret' for ${path.join(\n                '/',\n              )}`,\n            );\n          } else if (hasFrontend) {\n            return 'frontend';\n          } else if (hasSecret) {\n            return 'secret';\n          }\n\n          return 'backend';\n        },\n      } as Partial<Resolvers<JSONSchema>>,\n    },\n  );\n  return merged;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport {\n  resolve as resolvePath,\n  relative as relativePath,\n  dirname,\n  sep,\n} from 'path';\nimport { ConfigSchemaPackageEntry } from './types';\nimport { JsonObject } from '@backstage/types';\nimport { assertError } from '@backstage/errors';\n\ntype Item = {\n  name?: string;\n  parentPath?: string;\n  packagePath?: string;\n};\n\nconst req =\n  typeof __non_webpack_require__ === 'undefined'\n    ? require\n    : __non_webpack_require__;\n\n/**\n * This collects all known config schemas across all dependencies of the app.\n */\nexport async function collectConfigSchemas(\n  packageNames: string[],\n  packagePaths: string[],\n): Promise<ConfigSchemaPackageEntry[]> {\n  const schemas = new Array<ConfigSchemaPackageEntry>();\n  const tsSchemaPaths = new Array<string>();\n  const visitedPackageVersions = new Map<string, Set<string>>(); // pkgName: [versions...]\n\n  const currentDir = await fs.realpath(process.cwd());\n\n  async function processItem(item: Item) {\n    let pkgPath = item.packagePath;\n\n    if (pkgPath) {\n      const pkgExists = await fs.pathExists(pkgPath);\n      if (!pkgExists) {\n        return;\n      }\n    } else if (item.name) {\n      const { name, parentPath } = item;\n\n      try {\n        pkgPath = req.resolve(\n          `${name}/package.json`,\n          parentPath && {\n            paths: [parentPath],\n          },\n        );\n      } catch {\n        // We can somewhat safely ignore packages that don't export package.json,\n        // as they are likely not part of the Backstage ecosystem anyway.\n      }\n    }\n    if (!pkgPath) {\n      return;\n    }\n\n    const pkg = await fs.readJson(pkgPath);\n\n    // Ensures that we only process the same version of each package once.\n    let versions = visitedPackageVersions.get(pkg.name);\n    if (versions?.has(pkg.version)) {\n      return;\n    }\n    if (!versions) {\n      versions = new Set();\n      visitedPackageVersions.set(pkg.name, versions);\n    }\n    versions.add(pkg.version);\n\n    const depNames = [\n      ...Object.keys(pkg.dependencies ?? {}),\n      ...Object.keys(pkg.devDependencies ?? {}),\n      ...Object.keys(pkg.optionalDependencies ?? {}),\n      ...Object.keys(pkg.peerDependencies ?? {}),\n    ];\n\n    // TODO(Rugvip): Trying this out to avoid having to traverse the full dependency graph,\n    //               since that's pretty slow. We probably need a better way to determine when\n    //               we've left the Backstage ecosystem, but this will do for now.\n    const hasSchema = 'configSchema' in pkg;\n    const hasBackstageDep = depNames.some(_ => _.startsWith('@backstage/'));\n    if (!hasSchema && !hasBackstageDep) {\n      return;\n    }\n    if (hasSchema) {\n      if (typeof pkg.configSchema === 'string') {\n        const isJson = pkg.configSchema.endsWith('.json');\n        const isDts = pkg.configSchema.endsWith('.d.ts');\n        if (!isJson && !isDts) {\n          throw new Error(\n            `Config schema files must be .json or .d.ts, got ${pkg.configSchema}`,\n          );\n        }\n        if (isDts) {\n          tsSchemaPaths.push(\n            relativePath(\n              currentDir,\n              resolvePath(dirname(pkgPath), pkg.configSchema),\n            ),\n          );\n        } else {\n          const path = resolvePath(dirname(pkgPath), pkg.configSchema);\n          const value = await fs.readJson(path);\n          schemas.push({\n            value,\n            path: relativePath(currentDir, path),\n          });\n        }\n      } else {\n        schemas.push({\n          value: pkg.configSchema,\n          path: relativePath(currentDir, pkgPath),\n        });\n      }\n    }\n\n    await Promise.all(\n      depNames.map(depName =>\n        processItem({ name: depName, parentPath: pkgPath }),\n      ),\n    );\n  }\n\n  await Promise.all([\n    ...packageNames.map(name => processItem({ name, parentPath: currentDir })),\n    ...packagePaths.map(path => processItem({ name: path, packagePath: path })),\n  ]);\n\n  const tsSchemas = await compileTsSchemas(tsSchemaPaths);\n\n  return schemas.concat(tsSchemas);\n}\n\n// This handles the support of TypeScript .d.ts config schema declarations.\n// We collect all typescript schema definition and compile them all in one go.\n// This is much faster than compiling them separately.\nasync function compileTsSchemas(paths: string[]) {\n  if (paths.length === 0) {\n    return [];\n  }\n\n  // Lazy loaded, because this brings up all of TypeScript and we don't\n  // want that eagerly loaded in tests\n  const { getProgramFromFiles, generateSchema } = await import(\n    'typescript-json-schema'\n  );\n\n  const program = getProgramFromFiles(paths, {\n    incremental: false,\n    isolatedModules: true,\n    lib: ['ES5'], // Skipping most libs speeds processing up a lot, we just need the primitive types anyway\n    noEmit: true,\n    noResolve: true,\n    skipLibCheck: true, // Skipping lib checks speeds things up\n    skipDefaultLibCheck: true,\n    strict: true,\n    typeRoots: [], // Do not include any additional types\n    types: [],\n  });\n\n  const tsSchemas = paths.map(path => {\n    let value;\n    try {\n      value = generateSchema(\n        program,\n        // All schemas should export a `Config` symbol\n        'Config',\n        // This enables the use of these tags in TSDoc comments\n        {\n          required: true,\n          validationKeywords: ['visibility', 'deprecated'],\n        },\n        [path.split(sep).join('/')], // Unix paths are expected for all OSes here\n      ) as JsonObject | null;\n    } catch (error) {\n      assertError(error);\n      if (error.message !== 'type Config not found') {\n        throw error;\n      }\n    }\n\n    if (!value) {\n      throw new Error(`Invalid schema in ${path}, missing Config export`);\n    }\n    return { path, value };\n  });\n\n  return tsSchemas;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport {\n  ConfigVisibility,\n  DEFAULT_CONFIG_VISIBILITY,\n  TransformFunc,\n  ValidationError,\n} from './types';\n\n/**\n * This filters data by visibility by discovering the visibility of each\n * value, and then only keeping the ones that are specified in `includeVisibilities`.\n */\nexport function filterByVisibility(\n  data: JsonObject,\n  includeVisibilities: ConfigVisibility[],\n  visibilityByDataPath: Map<string, ConfigVisibility>,\n  deprecationByDataPath: Map<string, string>,\n  transformFunc?: TransformFunc<number | string | boolean>,\n  withFilteredKeys?: boolean,\n  withDeprecatedKeys?: boolean,\n): {\n  data: JsonObject;\n  filteredKeys?: string[];\n  deprecatedKeys?: { key: string; description: string }[];\n} {\n  const filteredKeys = new Array<string>();\n  const deprecatedKeys = new Array<{ key: string; description: string }>();\n\n  function transform(\n    jsonVal: JsonValue,\n    visibilityPath: string, // Matches the format we get from ajv\n    filterPath: string, // Matches the format of the ConfigReader\n  ): JsonValue | undefined {\n    const visibility =\n      visibilityByDataPath.get(visibilityPath) ?? DEFAULT_CONFIG_VISIBILITY;\n    const isVisible = includeVisibilities.includes(visibility);\n\n    // deprecated keys are added regardless of visibility indicator\n    const deprecation = deprecationByDataPath.get(visibilityPath);\n    if (deprecation) {\n      deprecatedKeys.push({ key: filterPath, description: deprecation });\n    }\n\n    if (typeof jsonVal !== 'object') {\n      if (isVisible) {\n        if (transformFunc) {\n          return transformFunc(jsonVal, { visibility });\n        }\n        return jsonVal;\n      }\n      if (withFilteredKeys) {\n        filteredKeys.push(filterPath);\n      }\n      return undefined;\n    } else if (jsonVal === null) {\n      return undefined;\n    } else if (Array.isArray(jsonVal)) {\n      const arr = new Array<JsonValue>();\n\n      for (const [index, value] of jsonVal.entries()) {\n        let path = visibilityPath;\n        const hasVisibilityInIndex = visibilityByDataPath.get(\n          `${visibilityPath}/${index}`,\n        );\n\n        if (hasVisibilityInIndex || typeof value === 'object') {\n          path = `${visibilityPath}/${index}`;\n        }\n\n        const out = transform(value, path, `${filterPath}[${index}]`);\n\n        if (out !== undefined) {\n          arr.push(out);\n        }\n      }\n\n      if (arr.length > 0 || isVisible) {\n        return arr;\n      }\n      return undefined;\n    }\n\n    const outObj: JsonObject = {};\n    let hasOutput = false;\n\n    for (const [key, value] of Object.entries(jsonVal)) {\n      if (value === undefined) {\n        continue;\n      }\n      const out = transform(\n        value,\n        `${visibilityPath}/${key}`,\n        filterPath ? `${filterPath}.${key}` : key,\n      );\n      if (out !== undefined) {\n        outObj[key] = out;\n        hasOutput = true;\n      }\n    }\n\n    if (hasOutput || isVisible) {\n      return outObj;\n    }\n    return undefined;\n  }\n\n  return {\n    filteredKeys: withFilteredKeys ? filteredKeys : undefined,\n    deprecatedKeys: withDeprecatedKeys ? deprecatedKeys : undefined,\n    data: (transform(data, '', '') as JsonObject) ?? {},\n  };\n}\n\nexport function filterErrorsByVisibility(\n  errors: ValidationError[] | undefined,\n  includeVisibilities: ConfigVisibility[] | undefined,\n  visibilityByDataPath: Map<string, ConfigVisibility>,\n  visibilityBySchemaPath: Map<string, ConfigVisibility>,\n): ValidationError[] {\n  if (!errors) {\n    return [];\n  }\n  if (!includeVisibilities) {\n    return errors;\n  }\n\n  const visibleSchemaPaths = Array.from(visibilityBySchemaPath)\n    .filter(([, v]) => includeVisibilities.includes(v))\n    .map(([k]) => k);\n\n  // If we're filtering by visibility we only care about the errors that happened\n  // in a visible path.\n  return errors.filter(error => {\n    // We always include structural errors as we don't know whether there are\n    // any visible paths within the structures.\n    if (\n      error.keyword === 'type' &&\n      ['object', 'array'].includes(error.params.type)\n    ) {\n      return true;\n    }\n\n    // For fields that were required we use the schema path to determine whether\n    // it was visible in addition to the data path. This is because the data path\n    // visibilities are only populated for values that we reached, which we won't\n    // if the value is missing.\n    // We don't use this method for all the errors as the data path is more robust\n    // and doesn't require us to properly trim the schema path.\n    if (error.keyword === 'required') {\n      const trimmedPath = error.schemaPath.slice(1, -'/required'.length);\n      const fullPath = `${trimmedPath}/properties/${error.params.missingProperty}`;\n      if (\n        visibleSchemaPaths.some(visiblePath => visiblePath.startsWith(fullPath))\n      ) {\n        return true;\n      }\n    }\n\n    const vis =\n      visibilityByDataPath.get(error.instancePath) ?? DEFAULT_CONFIG_VISIBILITY;\n    return vis && includeVisibilities.includes(vis);\n  });\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport { compileConfigSchemas } from './compile';\nimport { collectConfigSchemas } from './collect';\nimport { filterByVisibility, filterErrorsByVisibility } from './filtering';\nimport {\n  ValidationError,\n  ConfigSchema,\n  ConfigSchemaPackageEntry,\n  CONFIG_VISIBILITIES,\n} from './types';\n\n/**\n * Options that control the loading of configuration schema files in the backend.\n *\n * @public\n */\nexport type LoadConfigSchemaOptions =\n  | (\n      | {\n          dependencies: string[];\n          packagePaths?: string[];\n        }\n      | {\n          serialized: JsonObject;\n        }\n    ) & {\n      noUndeclaredProperties?: boolean;\n    };\n\nfunction errorsToError(errors: ValidationError[]): Error {\n  const messages = errors.map(({ instancePath, message, params }) => {\n    const paramStr = Object.entries(params)\n      .map(([name, value]) => `${name}=${value}`)\n      .join(' ');\n    return `Config ${message || ''} { ${paramStr} } at ${instancePath}`;\n  });\n  const error = new Error(`Config validation failed, ${messages.join('; ')}`);\n  (error as any).messages = messages;\n  return error;\n}\n\n/**\n * Loads config schema for a Backstage instance.\n *\n * @public\n */\nexport async function loadConfigSchema(\n  options: LoadConfigSchemaOptions,\n): Promise<ConfigSchema> {\n  let schemas: ConfigSchemaPackageEntry[];\n\n  if ('dependencies' in options) {\n    schemas = await collectConfigSchemas(\n      options.dependencies,\n      options.packagePaths ?? [],\n    );\n  } else {\n    const { serialized } = options;\n    if (serialized?.backstageConfigSchemaVersion !== 1) {\n      throw new Error(\n        'Serialized configuration schema is invalid or has an invalid version number',\n      );\n    }\n    schemas = serialized.schemas as ConfigSchemaPackageEntry[];\n  }\n\n  const validate = compileConfigSchemas(schemas, {\n    noUndeclaredProperties: options.noUndeclaredProperties,\n  });\n\n  return {\n    process(\n      configs: AppConfig[],\n      {\n        visibility,\n        valueTransform,\n        withFilteredKeys,\n        withDeprecatedKeys,\n        ignoreSchemaErrors,\n      } = {},\n    ): AppConfig[] {\n      const result = validate(configs);\n\n      if (!ignoreSchemaErrors) {\n        const visibleErrors = filterErrorsByVisibility(\n          result.errors,\n          visibility,\n          result.visibilityByDataPath,\n          result.visibilityBySchemaPath,\n        );\n        if (visibleErrors.length > 0) {\n          throw errorsToError(visibleErrors);\n        }\n      }\n\n      let processedConfigs = configs;\n\n      if (visibility) {\n        processedConfigs = processedConfigs.map(({ data, context }) => ({\n          context,\n          ...filterByVisibility(\n            data,\n            visibility,\n            result.visibilityByDataPath,\n            result.deprecationByDataPath,\n            valueTransform,\n            withFilteredKeys,\n            withDeprecatedKeys,\n          ),\n        }));\n      } else if (valueTransform) {\n        processedConfigs = processedConfigs.map(({ data, context }) => ({\n          context,\n          ...filterByVisibility(\n            data,\n            Array.from(CONFIG_VISIBILITIES),\n            result.visibilityByDataPath,\n            result.deprecationByDataPath,\n            valueTransform,\n            withFilteredKeys,\n            withDeprecatedKeys,\n          ),\n        }));\n      }\n\n      return processedConfigs;\n    },\n    serialize(): JsonObject {\n      return {\n        schemas,\n        backstageConfigSchemaVersion: 1,\n      };\n    },\n  };\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '@backstage/config';\nimport { assertError } from '@backstage/errors';\nimport { JsonObject } from '@backstage/types';\nimport { AsyncConfigSourceGenerator, ConfigSource } from './types';\n\n/**\n * Options for {@link EnvConfigSource.create}.\n *\n * @public\n */\nexport interface EnvConfigSourceOptions {\n  /**\n   * The environment variables to use, defaults to `process.env`.\n   */\n  env?: Record<string, string | undefined>;\n}\n\n/**\n * A config source that reads configuration from the environment.\n *\n * @remarks\n *\n * Only environment variables prefixed with APP_CONFIG_ will be considered.\n *\n * For each variable, the prefix will be removed, and rest of the key will\n * be split by '_'. Each part will then be used as keys to build up a nested\n * config object structure. The treatment of the entire environment variable\n * is case-sensitive.\n *\n * The value of the variable should be JSON serialized, as it will be parsed\n * and the type will be kept intact. For example \"true\" and true are treated\n * differently, as well as \"42\" and 42.\n *\n * For example, to set the config app.title to \"My Title\", use the following:\n *\n * APP_CONFIG_app_title='\"My Title\"'\n *\n * @public\n */\nexport class EnvConfigSource implements ConfigSource {\n  /**\n   * Creates a new config source that reads from the environment.\n   *\n   * @param options - Options for the config source.\n   * @returns A new config source that reads from the environment.\n   */\n  static create(options: EnvConfigSourceOptions): ConfigSource {\n    return new EnvConfigSource(options?.env ?? process.env);\n  }\n\n  private constructor(\n    private readonly env: { [name: string]: string | undefined },\n  ) {}\n\n  async *readConfigData(): AsyncConfigSourceGenerator {\n    const configs = readEnvConfig(this.env);\n    yield { configs };\n    return;\n  }\n\n  toString() {\n    const keys = Object.keys(this.env).filter(key =>\n      key.startsWith('APP_CONFIG_'),\n    );\n    return `EnvConfigSource{count=${keys.length}}`;\n  }\n}\n\nconst ENV_PREFIX = 'APP_CONFIG_';\n\n// Update the same pattern in config package if this is changed\nconst CONFIG_KEY_PART_PATTERN = /^[a-z][a-z0-9]*(?:[-_][a-z][a-z0-9]*)*$/i;\n\n/**\n * Read runtime configuration from the environment.\n *\n * @remarks\n *\n * Only environment variables prefixed with APP_CONFIG_ will be considered.\n *\n * For each variable, the prefix will be removed, and rest of the key will\n * be split by '_'. Each part will then be used as keys to build up a nested\n * config object structure. The treatment of the entire environment variable\n * is case-sensitive.\n *\n * The value of the variable should be JSON serialized, as it will be parsed\n * and the type will be kept intact. For example \"true\" and true are treated\n * differently, as well as \"42\" and 42.\n *\n * For example, to set the config app.title to \"My Title\", use the following:\n *\n * APP_CONFIG_app_title='\"My Title\"'\n *\n * @public\n * @deprecated Use {@link EnvConfigSource} instead\n */\nexport function readEnvConfig(env: {\n  [name: string]: string | undefined;\n}): AppConfig[] {\n  let data: JsonObject | undefined = undefined;\n\n  for (const [name, value] of Object.entries(env)) {\n    if (!value) {\n      continue;\n    }\n    if (name.startsWith(ENV_PREFIX)) {\n      const key = name.replace(ENV_PREFIX, '');\n      const keyParts = key.split('_');\n\n      let obj = (data = data ?? {});\n      for (const [index, part] of keyParts.entries()) {\n        if (!CONFIG_KEY_PART_PATTERN.test(part)) {\n          throw new TypeError(`Invalid env config key '${key}'`);\n        }\n        if (index < keyParts.length - 1) {\n          obj = (obj[part] = obj[part] ?? {}) as JsonObject;\n          if (typeof obj !== 'object' || Array.isArray(obj)) {\n            const subKey = keyParts.slice(0, index + 1).join('_');\n            throw new TypeError(\n              `Could not nest config for key '${key}' under existing value '${subKey}'`,\n            );\n          }\n        } else {\n          if (part in obj) {\n            throw new TypeError(\n              `Refusing to override existing config at key '${key}'`,\n            );\n          }\n          try {\n            const [, parsedValue] = safeJsonParse(value);\n            if (parsedValue === null) {\n              throw new Error('value may not be null');\n            }\n            obj[part] = parsedValue;\n          } catch (error) {\n            throw new TypeError(\n              `Failed to parse JSON-serialized config value for key '${key}', ${error}`,\n            );\n          }\n        }\n      }\n    }\n  }\n\n  return data ? [{ data, context: 'env' }] : [];\n}\n\nfunction safeJsonParse(str: string): [Error | null, any] {\n  try {\n    return [null, JSON.parse(str)];\n  } catch (err) {\n    assertError(err);\n    return [err, str];\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonValue, JsonObject } from '@backstage/types';\n\nexport function isObject(obj: JsonValue | undefined): obj is JsonObject {\n  if (typeof obj !== 'object') {\n    return false;\n  } else if (Array.isArray(obj)) {\n    return false;\n  }\n  return obj !== null;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonValue } from '@backstage/types';\nimport { TransformFunc } from './types';\nimport { SubstitutionFunc } from '../types';\n\n/**\n * A environment variable substitution transform that transforms e.g. 'token ${MY_TOKEN}'\n * to 'token abc' if MY_TOKEN is 'abc'. If any of the substituted variables are undefined,\n * the entire expression ends up undefined.\n */\nexport function createSubstitutionTransform(\n  env: SubstitutionFunc,\n): TransformFunc {\n  return async (input: JsonValue) => {\n    if (typeof input !== 'string') {\n      return { applied: false };\n    }\n\n    const parts: (string | undefined)[] = input.split(/(\\$?\\$\\{[^{}]*\\})/);\n    for (let i = 1; i < parts.length; i += 2) {\n      const part = parts[i]!;\n      if (part.startsWith('$$')) {\n        parts[i] = part.slice(1);\n      } else {\n        parts[i] = await env(part.slice(2, -1).trim());\n      }\n    }\n\n    if (parts.some(part => part === undefined)) {\n      return { applied: true, value: undefined };\n    }\n    return { applied: true, value: parts.join('') };\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport yaml from 'yaml';\nimport { extname, dirname, resolve as resolvePath } from 'path';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { isObject } from './utils';\nimport { TransformFunc, ReadFileFunc } from './types';\nimport { SubstitutionFunc } from '../types';\n\n// Parsers for each type of included file\nconst includeFileParser: {\n  [ext in string]: (content: string) => Promise<JsonObject>;\n} = {\n  '.json': async content => JSON.parse(content),\n  '.yaml': async content => yaml.parse(content),\n  '.yml': async content => yaml.parse(content),\n};\n\n/**\n * Transforms a include description into the actual included value.\n */\nexport function createIncludeTransform(\n  env: SubstitutionFunc,\n  readFile: ReadFileFunc,\n  substitute: TransformFunc,\n): TransformFunc {\n  return async (input, context) => {\n    const { dir } = context;\n    if (!dir) {\n      throw new Error('Include transform requires a base directory');\n    }\n    if (!isObject(input)) {\n      return { applied: false };\n    }\n    // Check if there's any key that starts with a '$', in that case we treat\n    // this entire object as an include description.\n    const [includeKey] = Object.keys(input).filter(key => key.startsWith('$'));\n    if (includeKey) {\n      if (Object.keys(input).length !== 1) {\n        throw new Error(\n          `include key ${includeKey} should not have adjacent keys`,\n        );\n      }\n    } else {\n      return { applied: false };\n    }\n\n    const rawIncludedValue = input[includeKey];\n    if (typeof rawIncludedValue !== 'string') {\n      throw new Error(`${includeKey} include value is not a string`);\n    }\n\n    const substituteResults = await substitute(rawIncludedValue, { dir });\n    const includeValue = substituteResults.applied\n      ? substituteResults.value\n      : rawIncludedValue;\n\n    // The second string check is needed for Typescript to know this is a string.\n    if (includeValue === undefined || typeof includeValue !== 'string') {\n      throw new Error(`${includeKey} substitution value was undefined`);\n    }\n\n    switch (includeKey) {\n      case '$file':\n        try {\n          const value = await readFile(resolvePath(dir, includeValue));\n          return { applied: true, value: value.trimEnd() };\n        } catch (error) {\n          throw new Error(`failed to read file ${includeValue}, ${error}`);\n        }\n      case '$env':\n        try {\n          return { applied: true, value: await env(includeValue) };\n        } catch (error) {\n          throw new Error(`failed to read env ${includeValue}, ${error}`);\n        }\n\n      case '$include': {\n        const [filePath, dataPath] = includeValue.split(/#(.*)/);\n\n        const ext = extname(filePath);\n        const parser = includeFileParser[ext];\n        if (!parser) {\n          throw new Error(\n            `no configuration parser available for included file ${filePath}`,\n          );\n        }\n\n        const path = resolvePath(dir, filePath);\n        const content = await readFile(path);\n        const newDir = dirname(path);\n\n        const parts = dataPath ? dataPath.split('.') : [];\n\n        let value: JsonValue | undefined;\n        try {\n          value = await parser(content);\n        } catch (error) {\n          throw new Error(\n            `failed to parse included file ${filePath}, ${error}`,\n          );\n        }\n\n        // This bit handles selecting a subtree in the included file, if a path was provided after a #\n        for (const [index, part] of parts.entries()) {\n          if (!isObject(value)) {\n            const errPath = parts.slice(0, index).join('.');\n            throw new Error(\n              `value at '${errPath}' in included file ${filePath} is not an object`,\n            );\n          }\n          value = value[part];\n        }\n\n        if (typeof value === 'string') {\n          const substituted = await substitute(value, { dir: newDir });\n          if (substituted.applied) {\n            value = substituted.value;\n          }\n        }\n\n        return {\n          applied: true,\n          value,\n          newDir: newDir !== dir ? newDir : undefined,\n        };\n      }\n\n      default:\n        throw new Error(`unknown include ${includeKey}`);\n    }\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { assertError } from '@backstage/errors';\nimport { TransformContext, TransformFunc } from './types';\nimport { isObject } from './utils';\nimport { createSubstitutionTransform } from './substitution';\nimport { createIncludeTransform } from './include';\nimport { SubstitutionFunc } from '../types';\n\n/**\n * Applies a set of transforms to raw configuration data.\n */\nexport async function applyConfigTransforms(\n  input: JsonValue,\n  context: { dir?: string },\n  transforms: TransformFunc[],\n): Promise<JsonObject> {\n  async function transform(\n    inputObj: JsonValue,\n    path: string,\n    baseDir?: string,\n  ): Promise<JsonValue | undefined> {\n    let obj = inputObj;\n    let dir = baseDir;\n\n    for (const tf of transforms) {\n      try {\n        const result = await tf(inputObj, { dir });\n        if (result.applied) {\n          if (result.value === undefined) {\n            return undefined;\n          }\n          obj = result.value;\n          dir = result?.newDir ?? dir;\n          break;\n        }\n      } catch (error) {\n        assertError(error);\n        throw new Error(`error at ${path}, ${error.message}`);\n      }\n    }\n\n    if (typeof obj !== 'object') {\n      return obj;\n    } else if (obj === null) {\n      return undefined;\n    } else if (Array.isArray(obj)) {\n      const arr = new Array<JsonValue>();\n\n      for (const [index, value] of obj.entries()) {\n        const out = await transform(value, `${path}[${index}]`, dir);\n        if (out !== undefined) {\n          arr.push(out);\n        }\n      }\n\n      return arr;\n    }\n\n    const out: JsonObject = {};\n\n    for (const [key, value] of Object.entries(obj)) {\n      // undefined covers optional fields\n      if (value !== undefined) {\n        const result = await transform(value, `${path}.${key}`, dir);\n        if (result !== undefined) {\n          out[key] = result;\n        }\n      }\n    }\n\n    return out;\n  }\n\n  const finalData = await transform(input, '', context?.dir);\n  if (!isObject(finalData)) {\n    throw new TypeError('expected object at config root');\n  }\n  return finalData;\n}\n\n/** @internal */\nexport type ConfigTransformer = (\n  input: JsonObject,\n  context?: TransformContext,\n) => Promise<JsonObject>;\n\n/** @internal */\nexport function createConfigTransformer(options: {\n  substitutionFunc?: SubstitutionFunc;\n  readFile?(path: string): Promise<string>;\n}): ConfigTransformer {\n  const { substitutionFunc = async name => process.env[name], readFile } =\n    options;\n  const substitutionTransform = createSubstitutionTransform(substitutionFunc);\n  const transforms = [substitutionTransform];\n  if (readFile) {\n    const includeTransform = createIncludeTransform(\n      substitutionFunc,\n      readFile,\n      substitutionTransform,\n    );\n    transforms.push(includeTransform);\n  }\n\n  return async (input, ctx) =>\n    applyConfigTransforms(input, ctx ?? {}, transforms);\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport chokidar, { FSWatcher } from 'chokidar';\nimport fs from 'fs-extra';\nimport { basename, dirname, isAbsolute, resolve as resolvePath } from 'path';\nimport yaml from 'yaml';\nimport {\n  AsyncConfigSourceGenerator,\n  ConfigSource,\n  ConfigSourceData,\n  SubstitutionFunc,\n  ReadConfigDataOptions,\n} from './types';\nimport { createConfigTransformer } from './transform';\nimport { NotFoundError } from '@backstage/errors';\n\n/**\n * Options for {@link FileConfigSource.create}.\n *\n * @public\n */\nexport interface FileConfigSourceOptions {\n  /**\n   * The path to the config file that should be loaded.\n   */\n  path: string;\n\n  /**\n   * A substitution function to use instead of the default environment substitution.\n   */\n  substitutionFunc?: SubstitutionFunc;\n}\n\nasync function readFile(path: string): Promise<string | undefined> {\n  try {\n    return await fs.readFile(path, 'utf8');\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return undefined;\n    }\n    throw error;\n  }\n}\n\n/**\n * A config source that loads configuration from a local file.\n *\n * @public\n */\nexport class FileConfigSource implements ConfigSource {\n  /**\n   * Creates a new config source that loads configuration from the given path.\n   *\n   * @remarks\n   *\n   * The source will watch the file for changes, as well as any referenced files.\n   *\n   * @param options - Options for the config source.\n   * @returns A new config source that loads from the given path.\n   */\n  static create(options: FileConfigSourceOptions): ConfigSource {\n    if (!isAbsolute(options.path)) {\n      throw new Error(`Config load path is not absolute: \"${options.path}\"`);\n    }\n    return new FileConfigSource(options);\n  }\n\n  readonly #path: string;\n  readonly #substitutionFunc?: SubstitutionFunc;\n\n  private constructor(options: FileConfigSourceOptions) {\n    this.#path = options.path;\n    this.#substitutionFunc = options.substitutionFunc;\n  }\n\n  // Work is duplicated across each read, in practice that should not\n  // have any impact since there won't be multiple consumers. If that\n  // changes it might be worth refactoring this to avoid duplicate work.\n  async *readConfigData(\n    options?: ReadConfigDataOptions,\n  ): AsyncConfigSourceGenerator {\n    const signal = options?.signal;\n    const configFileName = basename(this.#path);\n\n    // Keep track of watched paths, since this is simpler than resetting the watcher\n    const watchedPaths = new Array<string>();\n    const watcher = chokidar.watch(this.#path, {\n      usePolling: process.env.NODE_ENV === 'test',\n    });\n\n    const dir = dirname(this.#path);\n    const transformer = createConfigTransformer({\n      substitutionFunc: this.#substitutionFunc,\n      readFile: async path => {\n        const fullPath = resolvePath(dir, path);\n        // Any files discovered while reading this config should be watched too\n        watcher.add(fullPath);\n        watchedPaths.push(fullPath);\n\n        const data = await readFile(fullPath);\n        if (data === undefined) {\n          throw new NotFoundError(\n            `failed to include \"${fullPath}\", file does not exist`,\n          );\n        }\n        return data;\n      },\n    });\n\n    // This is the entry point for reading the file, called initially and on change\n    const readConfigFile = async (): Promise<ConfigSourceData[]> => {\n      // We clear the watched files every time we initiate a new read\n      watcher.unwatch(watchedPaths);\n      watchedPaths.length = 0;\n\n      watcher.add(this.#path);\n      watchedPaths.push(this.#path);\n      const content = await readFile(this.#path);\n      if (content === undefined) {\n        throw new NotFoundError(`Config file \"${this.#path}\" does not exist`);\n      }\n      const parsed = yaml.parse(content);\n      if (parsed === null) {\n        return [];\n      }\n      try {\n        const data = await transformer(parsed, { dir });\n        return [{ data, context: configFileName, path: this.#path }];\n      } catch (error) {\n        throw new Error(\n          `Failed to read config file at \"${this.#path}\", ${error.message}`,\n        );\n      }\n    };\n\n    const onAbort = () => {\n      signal?.removeEventListener('abort', onAbort);\n      watcher.close();\n    };\n    signal?.addEventListener('abort', onAbort);\n\n    yield { configs: await readConfigFile() };\n\n    for (;;) {\n      const event = await this.#waitForEvent(watcher, signal);\n      if (event === 'abort') {\n        return;\n      }\n      yield { configs: await readConfigFile() };\n    }\n  }\n\n  toString() {\n    return `FileConfigSource{path=\"${this.#path}\"}`;\n  }\n\n  #waitForEvent(\n    watcher: FSWatcher,\n    signal?: AbortSignal,\n  ): Promise<'change' | 'abort'> {\n    return new Promise(resolve => {\n      function onChange() {\n        resolve('change');\n        onDone();\n      }\n      function onAbort() {\n        resolve('abort');\n        onDone();\n      }\n      function onDone() {\n        watcher.removeListener('change', onChange);\n        signal?.removeEventListener('abort', onAbort);\n      }\n      watcher.addListener('change', onChange);\n      signal?.addEventListener('abort', onAbort);\n    });\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AsyncConfigSourceGenerator,\n  ConfigSource,\n  ConfigSourceData,\n  ReadConfigDataOptions,\n} from './types';\n\nconst sourcesSymbol = Symbol.for(\n  '@backstage/config-loader#MergedConfigSource.sources',\n);\n\n/** @internal */\nexport class MergedConfigSource implements ConfigSource {\n  // An optimization to flatten nested merged sources to avid unnecessary microtasks\n  static #flattenSources(sources: ConfigSource[]): ConfigSource[] {\n    return sources.flatMap(source => {\n      if (\n        sourcesSymbol in source &&\n        Array.isArray((source as any)[sourcesSymbol])\n      ) {\n        return this.#flattenSources(\n          (source as any)[sourcesSymbol] as ConfigSource[],\n        );\n      }\n      return source;\n    });\n  }\n\n  static from(sources: ConfigSource[]): ConfigSource {\n    return new MergedConfigSource(this.#flattenSources(sources));\n  }\n\n  [sourcesSymbol]: ConfigSource[];\n\n  private constructor(private readonly sources: ConfigSource[]) {\n    this[sourcesSymbol] = this.sources;\n  }\n\n  async *readConfigData(\n    options?: ReadConfigDataOptions,\n  ): AsyncConfigSourceGenerator {\n    const its = this.sources.map(source => source.readConfigData(options));\n    const initialResults = await Promise.all(its.map(it => it.next()));\n    const configs = initialResults.map((result, i) => {\n      if (result.done) {\n        throw new Error(\n          `Config source ${String(this.sources[i])} returned no data`,\n        );\n      }\n      return result.value.configs;\n    });\n\n    yield { configs: configs.flat(1) };\n\n    const results: Array<\n      | Promise<\n          readonly [\n            number,\n            IteratorResult<{ configs: ConfigSourceData[] }, void>,\n          ]\n        >\n      | undefined\n    > = its.map((it, i) => nextWithIndex(it, i));\n\n    while (results.some(Boolean)) {\n      try {\n        const [i, result] = (await Promise.race(results.filter(Boolean)))!;\n        if (result.done) {\n          results[i] = undefined;\n        } else {\n          results[i] = nextWithIndex(its[i], i);\n          configs[i] = result.value.configs;\n          yield { configs: configs.flat(1) };\n        }\n      } catch (error) {\n        const source = this.sources[error.index];\n        if (source) {\n          throw new Error(`Config source ${String(source)} failed: ${error}`);\n        }\n        throw error;\n      }\n    }\n  }\n\n  toString() {\n    return `MergedConfigSource{${this.sources.map(String).join(', ')}}`;\n  }\n}\n\n// Helper to wait for the next value of the iterator, while decorating the value\n// or error with the index of the iterator.\nfunction nextWithIndex<T>(\n  iterator: AsyncIterator<T, void, void>,\n  index: number,\n): Promise<readonly [index: number, result: IteratorResult<T, void>]> {\n  return iterator.next().then(\n    r => [index, r] as const,\n    e => {\n      throw Object.assign(e, { index });\n    },\n  );\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResponseError } from '@backstage/errors';\nimport { HumanDuration, JsonObject } from '@backstage/types';\nimport isEqual from 'lodash/isEqual';\nimport fetch from 'node-fetch';\nimport yaml from 'yaml';\nimport { ConfigTransformer, createConfigTransformer } from './transform';\nimport {\n  AsyncConfigSourceGenerator,\n  ConfigSource,\n  SubstitutionFunc,\n  ReadConfigDataOptions,\n} from './types';\n\nconst DEFAULT_RELOAD_INTERVAL = { seconds: 60 };\n\nfunction durationToMs(duration: HumanDuration): number {\n  const {\n    years = 0,\n    months = 0,\n    weeks = 0,\n    days = 0,\n    hours = 0,\n    minutes = 0,\n    seconds = 0,\n    milliseconds = 0,\n  } = duration;\n\n  const totalDays = years * 365 + months * 30 + weeks * 7 + days;\n  const totalHours = totalDays * 24 + hours;\n  const totalMinutes = totalHours * 60 + minutes;\n  const totalSeconds = totalMinutes * 60 + seconds;\n  const totalMilliseconds = totalSeconds * 1000 + milliseconds;\n\n  return totalMilliseconds;\n}\n\n/**\n * Options for {@link RemoteConfigSource.create}.\n *\n * @public\n */\nexport interface RemoteConfigSourceOptions {\n  /**\n   * The URL to load the config from.\n   */\n  url: string;\n\n  /**\n   * How often to reload the config from the remote URL, defaults to 1 minute.\n   *\n   * Set to Infinity to disable reloading, for example `{ days: Infinity }`.\n   */\n  reloadInterval?: HumanDuration;\n\n  /**\n   * A substitution function to use instead of the default environment substitution.\n   */\n  substitutionFunc?: SubstitutionFunc;\n}\n\n/**\n * A config source that loads configuration from a remote URL.\n *\n * @public\n */\nexport class RemoteConfigSource implements ConfigSource {\n  /**\n   * Creates a new {@link RemoteConfigSource}.\n   *\n   * @param options - Options for the source.\n   * @returns A new remote config source.\n   */\n  static create(options: RemoteConfigSourceOptions): ConfigSource {\n    try {\n      // eslint-disable-next-line no-new\n      new URL(options.url);\n    } catch (error) {\n      throw new Error(\n        `Invalid URL provided to remote config source, '${options.url}', ${error}`,\n      );\n    }\n    return new RemoteConfigSource(options);\n  }\n\n  readonly #url: string;\n  readonly #reloadIntervalMs: number;\n  readonly #transformer: ConfigTransformer;\n\n  private constructor(options: RemoteConfigSourceOptions) {\n    this.#url = options.url;\n    this.#reloadIntervalMs = durationToMs(\n      options.reloadInterval ?? DEFAULT_RELOAD_INTERVAL,\n    );\n    this.#transformer = createConfigTransformer({\n      substitutionFunc: options.substitutionFunc,\n    });\n  }\n\n  async *readConfigData(\n    options?: ReadConfigDataOptions | undefined,\n  ): AsyncConfigSourceGenerator {\n    let data = await this.#load();\n\n    yield { configs: [{ data, context: this.#url }] };\n\n    for (;;) {\n      await this.#wait(options?.signal);\n\n      if (options?.signal?.aborted) {\n        return;\n      }\n\n      try {\n        const newData = await this.#load(options?.signal);\n        if (newData && !isEqual(data, newData)) {\n          data = newData;\n          yield { configs: [{ data, context: this.#url }] };\n        }\n      } catch (error) {\n        if (error.name !== 'AbortError') {\n          console.error(`Failed to read config from ${this.#url}, ${error}`);\n        }\n      }\n    }\n  }\n\n  toString() {\n    return `RemoteConfigSource{path=\"${this.#url}\"}`;\n  }\n\n  async #load(signal?: AbortSignal): Promise<JsonObject> {\n    const res = await fetch(this.#url, {\n      signal: signal as import('node-fetch').RequestInit['signal'],\n    });\n    if (!res.ok) {\n      throw await ResponseError.fromResponse(res);\n    }\n\n    const content = await res.text();\n    const data = await this.#transformer(yaml.parse(content));\n    if (data === null) {\n      throw new Error('configuration data is null');\n    } else if (typeof data !== 'object') {\n      throw new Error('configuration data is not an object');\n    } else if (Array.isArray(data)) {\n      throw new Error(\n        'configuration data is an array, expected an object instead',\n      );\n    }\n    return data;\n  }\n\n  async #wait(signal?: AbortSignal) {\n    return new Promise<void>(resolve => {\n      const timeoutId = setTimeout(onDone, this.#reloadIntervalMs);\n      signal?.addEventListener('abort', onDone);\n\n      function onDone() {\n        clearTimeout(timeoutId);\n        signal?.removeEventListener('abort', onDone);\n        resolve();\n      }\n    });\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config, ConfigReader } from '@backstage/config';\nimport { JsonValue } from '@backstage/types';\n\nexport class ObservableConfigProxy implements Config {\n  private config: Config = new ConfigReader({});\n\n  private readonly subscribers: (() => void)[] = [];\n\n  static create(abortController: AbortController): ObservableConfigProxy {\n    return new ObservableConfigProxy(undefined, undefined, abortController);\n  }\n\n  private constructor(\n    private readonly parent?: ObservableConfigProxy,\n    private readonly parentKey?: string,\n    private readonly abortController?: AbortController,\n  ) {\n    if (parent && !parentKey) {\n      throw new Error('parentKey is required if parent is set');\n    }\n  }\n\n  setConfig(config: Config) {\n    if (this.parent) {\n      throw new Error('immutable');\n    }\n    this.config = config;\n    for (const subscriber of this.subscribers) {\n      try {\n        subscriber();\n      } catch (error) {\n        console.error(`Config subscriber threw error, ${error}`);\n      }\n    }\n  }\n\n  close() {\n    if (!this.abortController) {\n      throw new Error('Only the root config can be closed');\n    }\n    this.abortController.abort();\n  }\n\n  subscribe(onChange: () => void): { unsubscribe: () => void } {\n    if (this.parent) {\n      return this.parent.subscribe(onChange);\n    }\n\n    this.subscribers.push(onChange);\n    return {\n      unsubscribe: () => {\n        const index = this.subscribers.indexOf(onChange);\n        if (index >= 0) {\n          this.subscribers.splice(index, 1);\n        }\n      },\n    };\n  }\n\n  private select(required: true): Config;\n  private select(required: false): Config | undefined;\n  private select(required: boolean): Config | undefined {\n    if (this.parent && this.parentKey) {\n      if (required) {\n        return this.parent.select(true).getConfig(this.parentKey);\n      }\n      return this.parent.select(false)?.getOptionalConfig(this.parentKey);\n    }\n\n    return this.config;\n  }\n\n  has(key: string): boolean {\n    return this.select(false)?.has(key) ?? false;\n  }\n  keys(): string[] {\n    return this.select(false)?.keys() ?? [];\n  }\n  get<T = JsonValue>(key?: string): T {\n    return this.select(true).get(key);\n  }\n  getOptional<T = JsonValue>(key?: string): T | undefined {\n    return this.select(false)?.getOptional(key);\n  }\n  getConfig(key: string): Config {\n    return new ObservableConfigProxy(this, key);\n  }\n  getOptionalConfig(key: string): Config | undefined {\n    if (this.select(false)?.has(key)) {\n      return new ObservableConfigProxy(this, key);\n    }\n    return undefined;\n  }\n  getConfigArray(key: string): Config[] {\n    return this.select(true).getConfigArray(key);\n  }\n  getOptionalConfigArray(key: string): Config[] | undefined {\n    return this.select(false)?.getOptionalConfigArray(key);\n  }\n  getNumber(key: string): number {\n    return this.select(true).getNumber(key);\n  }\n  getOptionalNumber(key: string): number | undefined {\n    return this.select(false)?.getOptionalNumber(key);\n  }\n  getBoolean(key: string): boolean {\n    return this.select(true).getBoolean(key);\n  }\n  getOptionalBoolean(key: string): boolean | undefined {\n    return this.select(false)?.getOptionalBoolean(key);\n  }\n  getString(key: string): string {\n    return this.select(true).getString(key);\n  }\n  getOptionalString(key: string): string | undefined {\n    return this.select(false)?.getOptionalString(key);\n  }\n  getStringArray(key: string): string[] {\n    return this.select(true).getStringArray(key);\n  }\n  getOptionalStringArray(key: string): string[] | undefined {\n    return this.select(false)?.getOptionalStringArray(key);\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolve as resolvePath } from 'path';\nimport fs from 'fs-extra';\nimport { Config, ConfigReader } from '@backstage/config';\nimport parseArgs from 'minimist';\nimport { EnvConfigSource } from './EnvConfigSource';\nimport { FileConfigSource } from './FileConfigSource';\nimport { MergedConfigSource } from './MergedConfigSource';\nimport {\n  RemoteConfigSource,\n  RemoteConfigSourceOptions,\n} from './RemoteConfigSource';\nimport { ConfigSource, SubstitutionFunc } from './types';\nimport { ObservableConfigProxy } from './ObservableConfigProxy';\nimport { findPaths } from '@backstage/cli-common';\n\n/**\n * A target to read configuration from.\n *\n * @public\n */\nexport type ConfigSourceTarget =\n  | {\n      type: 'path';\n      target: string;\n    }\n  | {\n      type: 'url';\n      target: string;\n    };\n\n/**\n * A config implementation that can be closed.\n *\n * @remarks\n *\n * Closing the configuration instance will stop the reading from the underlying source.\n *\n * @public\n */\nexport interface ClosableConfig extends Config {\n  /**\n   * Closes the configuration instance.\n   *\n   * @remarks\n   *\n   * The configuration instance will still be usable after closing, but it will\n   * no longer be updated with new values from the underlying source.\n   */\n  close(): void;\n}\n\n/**\n * Common options for the default Backstage configuration sources.\n *\n * @public\n */\nexport interface BaseConfigSourcesOptions {\n  rootDir?: string;\n  remote?: Pick<RemoteConfigSourceOptions, 'reloadInterval'>;\n  substitutionFunc?: SubstitutionFunc;\n}\n\n/**\n * Options for {@link ConfigSources.defaultForTargets}.\n *\n * @public\n */\nexport interface ConfigSourcesDefaultForTargetsOptions\n  extends BaseConfigSourcesOptions {\n  targets: ConfigSourceTarget[];\n}\n\n/**\n * Options for {@link ConfigSources.default}.\n *\n * @public\n */\nexport interface ConfigSourcesDefaultOptions extends BaseConfigSourcesOptions {\n  argv?: string[];\n  env?: Record<string, string>;\n}\n\n/**\n * A collection of utilities for working with and creating {@link ConfigSource}s.\n *\n * @public\n */\nexport class ConfigSources {\n  /**\n   * Parses command line arguments and returns the config targets.\n   *\n   * @param argv - The command line arguments to parse. Defaults to `process.argv`\n   * @returns A list of config targets\n   */\n  static parseArgs(argv: string[] = process.argv): ConfigSourceTarget[] {\n    const args: string[] = [parseArgs(argv).config].flat().filter(Boolean);\n    return args.map(target => {\n      try {\n        const url = new URL(target);\n\n        // Some file paths are valid relative URLs, so check if the host is empty too\n        if (!url.host) {\n          return { type: 'path', target };\n        }\n        return { type: 'url', target };\n      } catch {\n        return { type: 'path', target };\n      }\n    });\n  }\n\n  /**\n   * Creates the default config sources for the provided targets.\n   *\n   * @remarks\n   *\n   * This will create {@link FileConfigSource}s and {@link RemoteConfigSource}s\n   * for the provided targets, and merge them together to a single source.\n   * If no targets are provided it will fall back to `app-config.yaml` and\n   * `app-config.local.yaml`.\n   *\n   * URL targets are only supported if the `remote` option is provided.\n   *\n   * @param options - Options\n   * @returns A config source for the provided targets\n   */\n  static defaultForTargets(\n    options: ConfigSourcesDefaultForTargetsOptions,\n  ): ConfigSource {\n    const rootDir = options.rootDir ?? findPaths(process.cwd()).targetRoot;\n\n    const argSources = options.targets.map(arg => {\n      if (arg.type === 'url') {\n        if (!options.remote) {\n          throw new Error(\n            `Config argument \"${arg.target}\" looks like a URL but remote configuration is not enabled. Enable it by passing the \\`remote\\` option`,\n          );\n        }\n        return RemoteConfigSource.create({\n          url: arg.target,\n          substitutionFunc: options.substitutionFunc,\n          reloadInterval: options.remote.reloadInterval,\n        });\n      }\n      return FileConfigSource.create({\n        path: arg.target,\n        substitutionFunc: options.substitutionFunc,\n      });\n    });\n\n    if (argSources.length === 0) {\n      const defaultPath = resolvePath(rootDir, 'app-config.yaml');\n      const localPath = resolvePath(rootDir, 'app-config.local.yaml');\n\n      argSources.push(\n        FileConfigSource.create({\n          path: defaultPath,\n          substitutionFunc: options.substitutionFunc,\n        }),\n      );\n      if (fs.pathExistsSync(localPath)) {\n        argSources.push(\n          FileConfigSource.create({\n            path: localPath,\n            substitutionFunc: options.substitutionFunc,\n          }),\n        );\n      }\n    }\n\n    return this.merge(argSources);\n  }\n\n  /**\n   * Creates the default config source for Backstage.\n   *\n   * @remarks\n   *\n   * This will read from `app-config.yaml` and `app-config.local.yaml` by\n   * default, as well as environment variables prefixed with `APP_CONFIG_`.\n   * If `--config <path|url>` command line arguments are passed, these will\n   * override the default configuration file paths. URLs are only supported\n   * if the `remote` option is provided.\n   *\n   * @param options - Options\n   * @returns The default Backstage config source\n   */\n  static default(options: ConfigSourcesDefaultOptions): ConfigSource {\n    const argSource = this.defaultForTargets({\n      ...options,\n      targets: this.parseArgs(options.argv),\n    });\n\n    const envSource = EnvConfigSource.create({\n      env: options.env,\n    });\n\n    return this.merge([argSource, envSource]);\n  }\n\n  /**\n   * Merges multiple config sources into a single source that reads from all\n   * sources and concatenates the result.\n   *\n   * @param sources - The config sources to merge\n   * @returns A single config source that concatenates the data from the given sources\n   */\n  static merge(sources: ConfigSource[]): ConfigSource {\n    return MergedConfigSource.from(sources);\n  }\n\n  /**\n   * Creates an observable {@link @backstage/config#Config} implementation from a {@link ConfigSource}.\n   *\n   * @remarks\n   *\n   * If you only want to read the config once you can close the returned config immediately.\n   *\n   * @example\n   *\n   * ```ts\n   * const sources = ConfigSources.default(...)\n   * const config = await ConfigSources.toConfig(source)\n   * config.close()\n   * const example = config.getString(...)\n   * ```\n   *\n   * @param source - The config source to read from\n   * @returns A promise that resolves to a closable config\n   */\n  static toConfig(source: ConfigSource): Promise<ClosableConfig> {\n    return new Promise(async (resolve, reject) => {\n      let config: ObservableConfigProxy | undefined = undefined;\n      try {\n        const abortController = new AbortController();\n        for await (const { configs } of source.readConfigData({\n          signal: abortController.signal,\n        })) {\n          if (config) {\n            config.setConfig(ConfigReader.fromConfigs(configs));\n          } else {\n            config = ObservableConfigProxy.create(abortController);\n            config!.setConfig(ConfigReader.fromConfigs(configs));\n            resolve(config);\n          }\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @internal */\nexport interface SimpleDeferred<T> {\n  promise: Promise<T>;\n  resolve(value: T): void;\n}\n\n/** @internal */\nexport function simpleDefer<T>(): SimpleDeferred<T> {\n  let resolve: (value: T) => void;\n  const promise = new Promise<T>(_resolve => {\n    resolve = _resolve;\n  });\n  return { promise, resolve: resolve! };\n}\n\n/** @internal */\nexport async function waitOrAbort<T>(\n  promise: PromiseLike<T>,\n  signal?: AbortSignal | Array<AbortSignal | undefined>,\n): Promise<[ok: true, value: T] | [ok: false]> {\n  const signals = [signal].flat().filter((x): x is AbortSignal => !!x);\n  return new Promise((resolve, reject) => {\n    if (signals.some(s => s.aborted)) {\n      resolve([false]);\n    }\n    const onAbort = () => {\n      resolve([false]);\n    };\n    promise.then(\n      value => {\n        resolve([true, value]);\n        signals.forEach(s => s.removeEventListener('abort', onAbort));\n      },\n      error => {\n        reject(error);\n        signals.forEach(s => s.removeEventListener('abort', onAbort));\n      },\n    );\n    signals.forEach(s => s.addEventListener('abort', onAbort));\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '@backstage/types';\nimport {\n  AsyncConfigSourceGenerator,\n  ConfigSource,\n  ReadConfigDataOptions,\n} from './types';\nimport { simpleDefer, SimpleDeferred, waitOrAbort } from './utils';\n\n/**\n * Options for {@link MutableConfigSource.create}.\n *\n * @public\n */\nexport interface MutableConfigSourceOptions {\n  data?: JsonObject;\n  context?: string;\n}\n\n/**\n * A config source that can be updated with new data.\n *\n * @public\n */\nexport class MutableConfigSource implements ConfigSource {\n  /**\n   * Creates a new mutable config source.\n   *\n   * @param options - Options for the config source.\n   * @returns A new mutable config source.\n   */\n  static create(options?: MutableConfigSourceOptions): MutableConfigSource {\n    return new MutableConfigSource(\n      options?.context ?? 'mutable-config',\n      options?.data,\n    );\n  }\n\n  #currentData?: JsonObject;\n  #deferred: SimpleDeferred<void>;\n  readonly #context: string;\n  readonly #abortController = new AbortController();\n\n  private constructor(context: string, initialData?: JsonObject) {\n    this.#currentData = initialData;\n    this.#context = context;\n    this.#deferred = simpleDefer();\n  }\n\n  async *readConfigData(\n    options?: ReadConfigDataOptions | undefined,\n  ): AsyncConfigSourceGenerator {\n    let deferredPromise = this.#deferred.promise;\n\n    if (this.#currentData !== undefined) {\n      yield { configs: [{ data: this.#currentData, context: this.#context }] };\n    }\n\n    for (;;) {\n      const [ok] = await waitOrAbort(deferredPromise, [\n        options?.signal,\n        this.#abortController.signal,\n      ]);\n      if (!ok) {\n        return;\n      }\n      deferredPromise = this.#deferred.promise;\n\n      if (this.#currentData !== undefined) {\n        yield {\n          configs: [{ data: this.#currentData, context: this.#context }],\n        };\n      }\n    }\n  }\n\n  /**\n   * Set the data of the config source.\n   *\n   * @param data - The new data to set\n   */\n  setData(data: JsonObject): void {\n    if (!this.#abortController.signal.aborted) {\n      this.#currentData = data;\n      const oldDeferred = this.#deferred;\n      this.#deferred = simpleDefer();\n      oldDeferred.resolve();\n    }\n  }\n\n  /**\n   * Close the config source, preventing any further updates.\n   */\n  close(): void {\n    this.#currentData = undefined;\n    this.#abortController.abort();\n  }\n\n  toString() {\n    return `MutableConfigSource{}`;\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject, Observable } from '@backstage/types';\nimport {\n  AsyncConfigSourceGenerator,\n  ConfigSource,\n  ReadConfigDataOptions,\n} from './types';\nimport { simpleDefer } from './utils';\n\n/**\n * Options for {@link StaticConfigSource.create}.\n *\n * @public\n */\nexport interface StaticConfigSourceOptions {\n  data:\n    | JsonObject\n    | Observable<JsonObject>\n    | PromiseLike<JsonObject>\n    | AsyncIterable<JsonObject>;\n  context?: string;\n}\n\n/** @internal */\nclass StaticObservableConfigSource implements ConfigSource {\n  constructor(\n    private readonly data: Observable<JsonObject>,\n    private readonly context: string,\n  ) {}\n\n  async *readConfigData(\n    options?: ReadConfigDataOptions | undefined,\n  ): AsyncConfigSourceGenerator {\n    const queue = new Array<JsonObject>();\n    let deferred = simpleDefer<void>();\n\n    const sub = this.data.subscribe({\n      next(value) {\n        queue.push(value);\n        deferred.resolve();\n        deferred = simpleDefer();\n      },\n      complete() {\n        deferred.resolve();\n      },\n    });\n\n    const signal = options?.signal;\n    if (signal) {\n      const onAbort = () => {\n        sub.unsubscribe();\n        queue.length = 0;\n        deferred.resolve();\n        signal.removeEventListener('abort', onAbort);\n      };\n\n      signal.addEventListener('abort', onAbort);\n    }\n\n    for (;;) {\n      await deferred.promise;\n      if (queue.length === 0) {\n        return;\n      }\n      while (queue.length > 0) {\n        yield { configs: [{ data: queue.shift()!, context: this.context }] };\n      }\n    }\n  }\n}\n\nfunction isObservable<T>(value: {}): value is Observable<T> {\n  return 'subscribe' in value && typeof (value as any).subscribe === 'function';\n}\n\nfunction isAsyncIterable<T>(value: {}): value is AsyncIterable<T> {\n  return Symbol.asyncIterator in value;\n}\n\n/**\n * A configuration source that reads from a static object, promise, iterable, or observable.\n *\n * @public\n */\nexport class StaticConfigSource implements ConfigSource {\n  /**\n   * Creates a new {@link StaticConfigSource}.\n   *\n   * @param options - Options for the config source\n   * @returns A new static config source\n   */\n  static create(options: StaticConfigSourceOptions): ConfigSource {\n    const { data, context = 'static-config' } = options;\n    if (!data) {\n      return {\n        async *readConfigData(): AsyncConfigSourceGenerator {\n          yield { configs: [] };\n          return;\n        },\n      };\n    }\n\n    if (isObservable<JsonObject>(data)) {\n      return new StaticObservableConfigSource(data, context);\n    }\n\n    if (isAsyncIterable(data)) {\n      return {\n        async *readConfigData(): AsyncConfigSourceGenerator {\n          for await (const value of data) {\n            yield { configs: [{ data: value, context }] };\n          }\n        },\n      };\n    }\n\n    return new StaticConfigSource(data, context);\n  }\n\n  private constructor(\n    private readonly promise: JsonObject | PromiseLike<JsonObject>,\n    private readonly context: string,\n  ) {}\n\n  async *readConfigData(): AsyncConfigSourceGenerator {\n    yield { configs: [{ data: await this.promise, context: this.context }] };\n    return;\n  }\n\n  toString() {\n    return `StaticConfigSource{}`;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '@backstage/config';\nimport { ConfigSources } from './sources';\n\n/**\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport type ConfigTarget = { path: string } | { url: string };\n\n/**\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport type LoadConfigOptionsWatch = {\n  /**\n   * A listener that is called when a config file is changed.\n   */\n  onChange: (configs: AppConfig[]) => void;\n\n  /**\n   * An optional signal that stops the watcher once the promise resolves.\n   */\n  stopSignal?: Promise<void>;\n};\n\n/**\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport type LoadConfigOptionsRemote = {\n  /**\n   * A remote config reloading period, in seconds\n   */\n  reloadIntervalSeconds: number;\n};\n\n/**\n * Options that control the loading of configuration files in the backend.\n *\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport type LoadConfigOptions = {\n  // The root directory of the config loading context. Used to find default configs.\n  configRoot: string;\n\n  // Paths to load config files from. Configs from earlier paths have lower priority.\n  configTargets: ConfigTarget[];\n\n  /**\n   * Custom environment variable loading function\n   *\n   * @experimental This API is not stable and may change at any point\n   */\n  experimentalEnvFunc?: (name: string) => Promise<string | undefined>;\n\n  /**\n   * An optional remote config\n   */\n  remote?: LoadConfigOptionsRemote;\n\n  /**\n   * An optional configuration that enables watching of config files.\n   */\n  watch?: LoadConfigOptionsWatch;\n};\n\n/**\n * Results of loading configuration files.\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport type LoadConfigResult = {\n  /**\n   * Array of all loaded configs.\n   */\n  appConfigs: AppConfig[];\n};\n\n/**\n * Load configuration data.\n *\n * @public\n * @deprecated Use {@link ConfigSources.default} instead.\n */\nexport async function loadConfig(\n  options: LoadConfigOptions,\n): Promise<LoadConfigResult> {\n  const source = ConfigSources.default({\n    substitutionFunc: options.experimentalEnvFunc,\n    remote: options.remote && {\n      reloadInterval: { seconds: options.remote.reloadIntervalSeconds },\n    },\n    rootDir: options.configRoot,\n    argv: options.configTargets.flatMap(t => [\n      '--config',\n      'url' in t ? t.url : t.path,\n    ]),\n  });\n\n  return new Promise<LoadConfigResult>((resolve, reject) => {\n    async function loadConfigReaderLoop() {\n      let loaded = false;\n\n      try {\n        const abortController = new AbortController();\n        options.watch?.stopSignal?.then(() => abortController.abort());\n\n        for await (const { configs } of source.readConfigData({\n          signal: abortController.signal,\n        })) {\n          if (loaded) {\n            options.watch?.onChange(configs);\n          } else {\n            resolve({ appConfigs: configs });\n            loaded = true;\n\n            if (options.watch) {\n              options.watch.stopSignal?.then(() => abortController.abort());\n            } else {\n              abortController.abort();\n            }\n          }\n        }\n      } catch (error) {\n        if (loaded) {\n          console.error(`Failed to reload configuration, ${error}`);\n        } else {\n          reject(error);\n        }\n      }\n    }\n    loadConfigReaderLoop();\n  });\n}\n"],"names":["Ajv","traverse","config","ConfigReader","mergeAllOf","fs","relativePath","resolvePath","dirname","path","sep","assertError","_a","yaml","extname","out","__privateAdd","__privateSet","isAbsolute","basename","__privateGet","chokidar","NotFoundError","__privateMethod","isEqual","fetch","ResponseError","parseArgs","findPaths"],"mappings":"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"}