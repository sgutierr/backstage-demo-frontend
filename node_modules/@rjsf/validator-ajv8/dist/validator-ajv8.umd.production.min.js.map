{"version":3,"file":"validator-ajv8.umd.production.min.js","sources":["../src/createAjvInstance.ts","../src/validator.ts","../src/customizeValidator.ts","../src/index.ts"],"sourcesContent":["import Ajv, { Options } from 'ajv';\nimport addFormats, { FormatsPluginOptions } from 'ajv-formats';\nimport isObject from 'lodash/isObject';\n\nimport { CustomValidatorOptionsType } from './types';\nimport { ADDITIONAL_PROPERTY_FLAG, RJSF_ADDITONAL_PROPERTIES_FLAG } from '@rjsf/utils';\n\nexport const AJV_CONFIG: Options = {\n  allErrors: true,\n  multipleOfPrecision: 8,\n  strict: false,\n  verbose: true,\n} as const;\nexport const COLOR_FORMAT_REGEX =\n  /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX = /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n * @param [AjvClass] - The `Ajv` class to use when creating the validator instance\n */\nexport default function createAjvInstance(\n  additionalMetaSchemas?: CustomValidatorOptionsType['additionalMetaSchemas'],\n  customFormats?: CustomValidatorOptionsType['customFormats'],\n  ajvOptionsOverrides: CustomValidatorOptionsType['ajvOptionsOverrides'] = {},\n  ajvFormatOptions?: FormatsPluginOptions | false,\n  AjvClass: typeof Ajv = Ajv\n) {\n  const ajv = new AjvClass({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n  if (ajvFormatOptions) {\n    addFormats(ajv, ajvFormatOptions);\n  } else if (ajvFormatOptions !== false) {\n    addFormats(ajv);\n  }\n\n  // add custom formats\n  ajv.addFormat('data-url', DATA_URL_FORMAT_REGEX);\n  ajv.addFormat('color', COLOR_FORMAT_REGEX);\n\n  // Add RJSF-specific additional properties keywords so Ajv doesn't report errors if strict is enabled.\n  ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);\n  ajv.addKeyword(RJSF_ADDITONAL_PROPERTIES_FLAG);\n\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach((formatName) => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n\n  return ajv;\n}\n","import Ajv, { ErrorObject, ValidateFunction } from 'ajv';\nimport get from 'lodash/get';\nimport {\n  createErrorHandler,\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  getDefaultFormState,\n  getUiOptions,\n  PROPERTIES_KEY,\n  RJSFSchema,\n  RJSFValidationError,\n  ROOT_SCHEMA_PREFIX,\n  StrictRJSFSchema,\n  toErrorList,\n  toErrorSchema,\n  UiSchema,\n  unwrapErrorHandler,\n  ValidationData,\n  validationDataMerge,\n  ValidatorType,\n  withIdRefPrefix,\n} from '@rjsf/utils';\n\nimport { CustomValidatorOptionsType, Localizer } from './types';\nimport createAjvInstance from './createAjvInstance';\n\n/** `ValidatorType` implementation that uses the AJV 8 validation mechanism.\n */\nexport default class AJV8Validator<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements ValidatorType<T, S, F>\n{\n  /** The AJV instance to use for all validations\n   *\n   * @private\n   */\n  private ajv: Ajv;\n\n  /** The Localizer function to use for localizing Ajv errors\n   *\n   * @private\n   */\n  readonly localizer?: Localizer;\n\n  /** Constructs an `AJV8Validator` instance using the `options`\n   *\n   * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   */\n  constructor(options: CustomValidatorOptionsType, localizer?: Localizer) {\n    const { additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass } = options;\n    this.ajv = createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass);\n    this.localizer = localizer;\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in\n   *        the next major release.\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    return toErrorList(errorSchema, fieldPath);\n  }\n\n  /** Transforming the error output from ajv to format used by @rjsf/utils.\n   * At some point, components should be updated to support ajv.\n   *\n   * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`\n   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n   * @protected\n   */\n  protected transformRJSFValidationErrors(\n    errors: ErrorObject[] = [],\n    uiSchema?: UiSchema<T, S, F>\n  ): RJSFValidationError[] {\n    return errors.map((e: ErrorObject) => {\n      const { instancePath, keyword, params, schemaPath, parentSchema, ...rest } = e;\n      let { message = '' } = rest;\n      let property = instancePath.replace(/\\//g, '.');\n      let stack = `${property} ${message}`.trim();\n\n      if ('missingProperty' in params) {\n        property = property ? `${property}.${params.missingProperty}` : params.missingProperty;\n        const currentProperty: string = params.missingProperty;\n        const uiSchemaTitle = getUiOptions(get(uiSchema, `${property.replace(/^\\./, '')}`)).title;\n\n        if (uiSchemaTitle) {\n          message = message.replace(currentProperty, uiSchemaTitle);\n        } else {\n          const parentSchemaTitle = get(parentSchema, [PROPERTIES_KEY, currentProperty, 'title']);\n\n          if (parentSchemaTitle) {\n            message = message.replace(currentProperty, parentSchemaTitle);\n          }\n        }\n\n        stack = message;\n      } else {\n        const uiSchemaTitle = getUiOptions<T, S, F>(get(uiSchema, `${property.replace(/^\\./, '')}`)).title;\n\n        if (uiSchemaTitle) {\n          stack = `'${uiSchemaTitle}' ${message}`.trim();\n        } else {\n          const parentSchemaTitle = parentSchema?.title;\n\n          if (parentSchemaTitle) {\n            stack = `'${parentSchemaTitle}' ${message}`.trim();\n          }\n        }\n      }\n\n      // put data in expected format\n      return {\n        name: keyword,\n        property,\n        message,\n        params, // specific to ajv\n        stack,\n        schemaPath,\n      };\n    });\n  }\n\n  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n   * by the playground. Returns the `errors` from the validation\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData - The form data to validate\n   */\n  rawValidation<Result = any>(schema: RJSFSchema, formData?: T): { errors?: Result[]; validationError?: Error } {\n    let compilationError: Error | undefined = undefined;\n    let compiledValidator: ValidateFunction | undefined;\n    if (schema['$id']) {\n      compiledValidator = this.ajv.getSchema(schema['$id']);\n    }\n    try {\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schema);\n      }\n      compiledValidator(formData);\n    } catch (err) {\n      compilationError = err as Error;\n    }\n\n    let errors;\n    if (compiledValidator) {\n      if (typeof this.localizer === 'function') {\n        this.localizer(compiledValidator.errors);\n      }\n      errors = compiledValidator.errors || undefined;\n\n      // Clear errors to prevent persistent errors, see #1104\n      compiledValidator.errors = null;\n    }\n\n    return {\n      errors: errors as unknown as Result[],\n      validationError: compilationError,\n    };\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n   */\n  validateFormData(\n    formData: T | undefined,\n    schema: S,\n    customValidate?: CustomValidator<T, S, F>,\n    transformErrors?: ErrorTransformer<T, S, F>,\n    uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    const rawErrors = this.rawValidation<ErrorObject>(schema, formData);\n    const { validationError: invalidSchemaError } = rawErrors;\n    let errors = this.transformRJSFValidationErrors(rawErrors.errors, uiSchema);\n\n    if (invalidSchemaError) {\n      errors = [...errors, { stack: invalidSchemaError!.message }];\n    }\n    if (typeof transformErrors === 'function') {\n      errors = transformErrors(errors, uiSchema);\n    }\n\n    let errorSchema = toErrorSchema<T>(errors);\n\n    if (invalidSchemaError) {\n      errorSchema = {\n        ...errorSchema,\n        $schema: {\n          __errors: [invalidSchemaError!.message],\n        },\n      };\n    }\n\n    if (typeof customValidate !== 'function') {\n      return { errors, errorSchema };\n    }\n\n    // Include form data with undefined values, which is required for custom validation.\n    const newFormData = getDefaultFormState<T, S, F>(this, schema, formData, schema, true) as T;\n\n    const errorHandler = customValidate(newFormData, createErrorHandler<T>(newFormData), uiSchema);\n    const userErrorSchema = unwrapErrorHandler<T>(errorHandler);\n    return validationDataMerge<T>({ errors, errorSchema }, userErrorSchema);\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or\n   * false otherwise. If the schema is invalid, then this function will return\n   * false.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param formData - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   */\n  isValid(schema: S, formData: T | undefined, rootSchema: S) {\n    const rootSchemaId = rootSchema['$id'] ?? ROOT_SCHEMA_PREFIX;\n    try {\n      // add the rootSchema ROOT_SCHEMA_PREFIX as id.\n      // then rewrite the schema ref's to point to the rootSchema\n      // this accounts for the case where schema have references to models\n      // that lives in the rootSchema but not in the schema in question.\n      if (this.ajv.getSchema(rootSchemaId) === undefined) {\n        this.ajv.addSchema(rootSchema, rootSchemaId);\n      }\n      const schemaWithIdRefPrefix = withIdRefPrefix<S>(schema) as S;\n      let compiledValidator: ValidateFunction | undefined;\n      if (schemaWithIdRefPrefix['$id']) {\n        compiledValidator = this.ajv.getSchema(schemaWithIdRefPrefix['$id']);\n      }\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schemaWithIdRefPrefix);\n      }\n      const result = compiledValidator(formData);\n      return result as boolean;\n    } catch (e) {\n      console.warn('Error encountered compiling schema:', e);\n      return false;\n    } finally {\n      // TODO: A function should be called if the root schema changes so we don't have to remove and recompile the schema every run.\n      // make sure we remove the rootSchema from the global ajv instance\n      this.ajv.removeSchema(rootSchemaId);\n    }\n  }\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '@rjsf/utils';\n\nimport { CustomValidatorOptionsType, Localizer } from './types';\nimport AJV8Validator from './validator';\n\n/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if\n * provided.\n *\n * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n */\nexport default function customizeValidator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(options: CustomValidatorOptionsType = {}, localizer?: Localizer): ValidatorType<T, S, F> {\n  return new AJV8Validator<T, S, F>(options, localizer);\n}\n","import customizeValidator from './customizeValidator';\n\nexport { customizeValidator };\nexport * from './types';\n\nexport default customizeValidator();\n"],"names":["AJV_CONFIG","allErrors","multipleOfPrecision","strict","verbose","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","AJV8Validator","options","localizer","this","ajv","additionalMetaSchemas","customFormats","ajvOptionsOverrides","ajvFormatOptions","AjvClass","Ajv","_extends","addFormats","addFormat","addKeyword","ADDITIONAL_PROPERTY_FLAG","RJSF_ADDITONAL_PROPERTIES_FLAG","Array","isArray","addMetaSchema","isObject","Object","keys","forEach","formatName","createAjvInstance","_proto","prototype","toErrorList","errorSchema","fieldPath","transformRJSFValidationErrors","errors","uiSchema","map","e","instancePath","keyword","params","schemaPath","parentSchema","_rest$message","_objectWithoutPropertiesLoose","_excluded","message","property","replace","stack","trim","currentProperty","missingProperty","uiSchemaTitle","getUiOptions","get","title","parentSchemaTitle","PROPERTIES_KEY","name","rawValidation","schema","formData","compiledValidator","compilationError","undefined","getSchema","compile","err","validationError","validateFormData","customValidate","transformErrors","rawErrors","invalidSchemaError","concat","toErrorSchema","$schema","__errors","newFormData","getDefaultFormState","errorHandler","createErrorHandler","userErrorSchema","unwrapErrorHandler","validationDataMerge","isValid","rootSchema","_rootSchema$$id","rootSchemaId","ROOT_SCHEMA_PREFIX","addSchema","schemaWithIdRefPrefix","withIdRefPrefix","console","warn","removeSchema","customizeValidator","index"],"mappings":"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"}