{"version":3,"file":"validator-ajv8.umd.development.js","sources":["../src/createAjvInstance.ts","../src/validator.ts","../src/customizeValidator.ts","../src/index.ts"],"sourcesContent":["import Ajv, { Options } from 'ajv';\nimport addFormats, { FormatsPluginOptions } from 'ajv-formats';\nimport isObject from 'lodash/isObject';\n\nimport { CustomValidatorOptionsType } from './types';\nimport { ADDITIONAL_PROPERTY_FLAG, RJSF_ADDITONAL_PROPERTIES_FLAG } from '@rjsf/utils';\n\nexport const AJV_CONFIG: Options = {\n  allErrors: true,\n  multipleOfPrecision: 8,\n  strict: false,\n  verbose: true,\n} as const;\nexport const COLOR_FORMAT_REGEX =\n  /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX = /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n * @param [AjvClass] - The `Ajv` class to use when creating the validator instance\n */\nexport default function createAjvInstance(\n  additionalMetaSchemas?: CustomValidatorOptionsType['additionalMetaSchemas'],\n  customFormats?: CustomValidatorOptionsType['customFormats'],\n  ajvOptionsOverrides: CustomValidatorOptionsType['ajvOptionsOverrides'] = {},\n  ajvFormatOptions?: FormatsPluginOptions | false,\n  AjvClass: typeof Ajv = Ajv\n) {\n  const ajv = new AjvClass({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n  if (ajvFormatOptions) {\n    addFormats(ajv, ajvFormatOptions);\n  } else if (ajvFormatOptions !== false) {\n    addFormats(ajv);\n  }\n\n  // add custom formats\n  ajv.addFormat('data-url', DATA_URL_FORMAT_REGEX);\n  ajv.addFormat('color', COLOR_FORMAT_REGEX);\n\n  // Add RJSF-specific additional properties keywords so Ajv doesn't report errors if strict is enabled.\n  ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);\n  ajv.addKeyword(RJSF_ADDITONAL_PROPERTIES_FLAG);\n\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach((formatName) => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n\n  return ajv;\n}\n","import Ajv, { ErrorObject, ValidateFunction } from 'ajv';\nimport get from 'lodash/get';\nimport {\n  createErrorHandler,\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  getDefaultFormState,\n  getUiOptions,\n  PROPERTIES_KEY,\n  RJSFSchema,\n  RJSFValidationError,\n  ROOT_SCHEMA_PREFIX,\n  StrictRJSFSchema,\n  toErrorList,\n  toErrorSchema,\n  UiSchema,\n  unwrapErrorHandler,\n  ValidationData,\n  validationDataMerge,\n  ValidatorType,\n  withIdRefPrefix,\n} from '@rjsf/utils';\n\nimport { CustomValidatorOptionsType, Localizer } from './types';\nimport createAjvInstance from './createAjvInstance';\n\n/** `ValidatorType` implementation that uses the AJV 8 validation mechanism.\n */\nexport default class AJV8Validator<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements ValidatorType<T, S, F>\n{\n  /** The AJV instance to use for all validations\n   *\n   * @private\n   */\n  private ajv: Ajv;\n\n  /** The Localizer function to use for localizing Ajv errors\n   *\n   * @private\n   */\n  readonly localizer?: Localizer;\n\n  /** Constructs an `AJV8Validator` instance using the `options`\n   *\n   * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   */\n  constructor(options: CustomValidatorOptionsType, localizer?: Localizer) {\n    const { additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass } = options;\n    this.ajv = createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass);\n    this.localizer = localizer;\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in\n   *        the next major release.\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    return toErrorList(errorSchema, fieldPath);\n  }\n\n  /** Transforming the error output from ajv to format used by @rjsf/utils.\n   * At some point, components should be updated to support ajv.\n   *\n   * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`\n   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n   * @protected\n   */\n  protected transformRJSFValidationErrors(\n    errors: ErrorObject[] = [],\n    uiSchema?: UiSchema<T, S, F>\n  ): RJSFValidationError[] {\n    return errors.map((e: ErrorObject) => {\n      const { instancePath, keyword, params, schemaPath, parentSchema, ...rest } = e;\n      let { message = '' } = rest;\n      let property = instancePath.replace(/\\//g, '.');\n      let stack = `${property} ${message}`.trim();\n\n      if ('missingProperty' in params) {\n        property = property ? `${property}.${params.missingProperty}` : params.missingProperty;\n        const currentProperty: string = params.missingProperty;\n        const uiSchemaTitle = getUiOptions(get(uiSchema, `${property.replace(/^\\./, '')}`)).title;\n\n        if (uiSchemaTitle) {\n          message = message.replace(currentProperty, uiSchemaTitle);\n        } else {\n          const parentSchemaTitle = get(parentSchema, [PROPERTIES_KEY, currentProperty, 'title']);\n\n          if (parentSchemaTitle) {\n            message = message.replace(currentProperty, parentSchemaTitle);\n          }\n        }\n\n        stack = message;\n      } else {\n        const uiSchemaTitle = getUiOptions<T, S, F>(get(uiSchema, `${property.replace(/^\\./, '')}`)).title;\n\n        if (uiSchemaTitle) {\n          stack = `'${uiSchemaTitle}' ${message}`.trim();\n        } else {\n          const parentSchemaTitle = parentSchema?.title;\n\n          if (parentSchemaTitle) {\n            stack = `'${parentSchemaTitle}' ${message}`.trim();\n          }\n        }\n      }\n\n      // put data in expected format\n      return {\n        name: keyword,\n        property,\n        message,\n        params, // specific to ajv\n        stack,\n        schemaPath,\n      };\n    });\n  }\n\n  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n   * by the playground. Returns the `errors` from the validation\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData - The form data to validate\n   */\n  rawValidation<Result = any>(schema: RJSFSchema, formData?: T): { errors?: Result[]; validationError?: Error } {\n    let compilationError: Error | undefined = undefined;\n    let compiledValidator: ValidateFunction | undefined;\n    if (schema['$id']) {\n      compiledValidator = this.ajv.getSchema(schema['$id']);\n    }\n    try {\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schema);\n      }\n      compiledValidator(formData);\n    } catch (err) {\n      compilationError = err as Error;\n    }\n\n    let errors;\n    if (compiledValidator) {\n      if (typeof this.localizer === 'function') {\n        this.localizer(compiledValidator.errors);\n      }\n      errors = compiledValidator.errors || undefined;\n\n      // Clear errors to prevent persistent errors, see #1104\n      compiledValidator.errors = null;\n    }\n\n    return {\n      errors: errors as unknown as Result[],\n      validationError: compilationError,\n    };\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n   */\n  validateFormData(\n    formData: T | undefined,\n    schema: S,\n    customValidate?: CustomValidator<T, S, F>,\n    transformErrors?: ErrorTransformer<T, S, F>,\n    uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    const rawErrors = this.rawValidation<ErrorObject>(schema, formData);\n    const { validationError: invalidSchemaError } = rawErrors;\n    let errors = this.transformRJSFValidationErrors(rawErrors.errors, uiSchema);\n\n    if (invalidSchemaError) {\n      errors = [...errors, { stack: invalidSchemaError!.message }];\n    }\n    if (typeof transformErrors === 'function') {\n      errors = transformErrors(errors, uiSchema);\n    }\n\n    let errorSchema = toErrorSchema<T>(errors);\n\n    if (invalidSchemaError) {\n      errorSchema = {\n        ...errorSchema,\n        $schema: {\n          __errors: [invalidSchemaError!.message],\n        },\n      };\n    }\n\n    if (typeof customValidate !== 'function') {\n      return { errors, errorSchema };\n    }\n\n    // Include form data with undefined values, which is required for custom validation.\n    const newFormData = getDefaultFormState<T, S, F>(this, schema, formData, schema, true) as T;\n\n    const errorHandler = customValidate(newFormData, createErrorHandler<T>(newFormData), uiSchema);\n    const userErrorSchema = unwrapErrorHandler<T>(errorHandler);\n    return validationDataMerge<T>({ errors, errorSchema }, userErrorSchema);\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or\n   * false otherwise. If the schema is invalid, then this function will return\n   * false.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param formData - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   */\n  isValid(schema: S, formData: T | undefined, rootSchema: S) {\n    const rootSchemaId = rootSchema['$id'] ?? ROOT_SCHEMA_PREFIX;\n    try {\n      // add the rootSchema ROOT_SCHEMA_PREFIX as id.\n      // then rewrite the schema ref's to point to the rootSchema\n      // this accounts for the case where schema have references to models\n      // that lives in the rootSchema but not in the schema in question.\n      if (this.ajv.getSchema(rootSchemaId) === undefined) {\n        this.ajv.addSchema(rootSchema, rootSchemaId);\n      }\n      const schemaWithIdRefPrefix = withIdRefPrefix<S>(schema) as S;\n      let compiledValidator: ValidateFunction | undefined;\n      if (schemaWithIdRefPrefix['$id']) {\n        compiledValidator = this.ajv.getSchema(schemaWithIdRefPrefix['$id']);\n      }\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schemaWithIdRefPrefix);\n      }\n      const result = compiledValidator(formData);\n      return result as boolean;\n    } catch (e) {\n      console.warn('Error encountered compiling schema:', e);\n      return false;\n    } finally {\n      // TODO: A function should be called if the root schema changes so we don't have to remove and recompile the schema every run.\n      // make sure we remove the rootSchema from the global ajv instance\n      this.ajv.removeSchema(rootSchemaId);\n    }\n  }\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '@rjsf/utils';\n\nimport { CustomValidatorOptionsType, Localizer } from './types';\nimport AJV8Validator from './validator';\n\n/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if\n * provided.\n *\n * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n */\nexport default function customizeValidator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(options: CustomValidatorOptionsType = {}, localizer?: Localizer): ValidatorType<T, S, F> {\n  return new AJV8Validator<T, S, F>(options, localizer);\n}\n","import customizeValidator from './customizeValidator';\n\nexport { customizeValidator };\nexport * from './types';\n\nexport default customizeValidator();\n"],"names":["AJV_CONFIG","allErrors","multipleOfPrecision","strict","verbose","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","createAjvInstance","additionalMetaSchemas","customFormats","ajvOptionsOverrides","ajvFormatOptions","AjvClass","Ajv","ajv","_extends","addFormats","addFormat","addKeyword","ADDITIONAL_PROPERTY_FLAG","RJSF_ADDITONAL_PROPERTIES_FLAG","Array","isArray","addMetaSchema","isObject","Object","keys","forEach","formatName","AJV8Validator","options","localizer","_proto","prototype","toErrorList","errorSchema","fieldPath","transformRJSFValidationErrors","errors","uiSchema","map","e","instancePath","keyword","params","schemaPath","parentSchema","rest","_objectWithoutPropertiesLoose","_excluded","_rest$message","message","property","replace","stack","trim","missingProperty","currentProperty","uiSchemaTitle","getUiOptions","get","title","parentSchemaTitle","PROPERTIES_KEY","name","rawValidation","schema","formData","compilationError","undefined","compiledValidator","getSchema","compile","err","validationError","validateFormData","customValidate","transformErrors","rawErrors","invalidSchemaError","concat","toErrorSchema","$schema","__errors","newFormData","getDefaultFormState","errorHandler","createErrorHandler","userErrorSchema","unwrapErrorHandler","validationDataMerge","isValid","rootSchema","_rootSchema$$id","rootSchemaId","ROOT_SCHEMA_PREFIX","addSchema","schemaWithIdRefPrefix","withIdRefPrefix","result","console","warn","removeSchema","customizeValidator"],"mappings":"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"}