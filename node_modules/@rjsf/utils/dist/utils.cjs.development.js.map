{"version":3,"file":"utils.cjs.development.js","sources":["../src/isObject.ts","../src/allowAdditionalItems.ts","../src/asNumber.ts","../src/constants.ts","../src/getUiOptions.ts","../src/canExpand.ts","../src/createErrorHandler.ts","../src/deepEquals.ts","../src/findSchemaDefinition.ts","../src/schema/getMatchingOption.ts","../src/schema/getFirstMatchingOption.ts","../src/guessType.ts","../src/getSchemaType.ts","../src/mergeSchemas.ts","../src/schema/retrieveSchema.ts","../src/schema/getClosestMatchingOption.ts","../src/isFixedItems.ts","../src/mergeDefaultsWithFormData.ts","../src/mergeObjects.ts","../src/isConstant.ts","../src/schema/isSelect.ts","../src/schema/isMultiSelect.ts","../src/schema/getDefaultFormState.ts","../src/isCustomWidget.ts","../src/schema/isFilesArray.ts","../src/schema/getDisplayLabel.ts","../src/schema/mergeValidationData.ts","../src/schema/sanitizeDataForNewSchema.ts","../src/schema/toIdSchema.ts","../src/schema/toPathSchema.ts","../src/createSchemaUtils.ts","../src/dataURItoBlob.ts","../src/replaceStringParameters.ts","../src/englishStringTranslator.ts","../src/enumOptionsValueForIndex.ts","../src/enumOptionsDeselectValue.ts","../src/enumOptionsIsSelected.ts","../src/enumOptionsIndexForValue.ts","../src/enumOptionsSelectValue.ts","../src/ErrorSchemaBuilder.ts","../src/rangeSpec.ts","../src/getInputProps.ts","../src/getSubmitButtonOptions.ts","../src/getTemplate.ts","../src/getWidget.tsx","../src/hasWidget.ts","../src/idGenerators.ts","../src/labelValue.ts","../src/localToUTC.ts","../src/toConstant.ts","../src/optionsList.ts","../src/orderProperties.ts","../src/pad.ts","../src/parseDateString.ts","../src/schemaRequiresTrueValue.ts","../src/shouldRender.ts","../src/toDateString.ts","../src/toErrorList.ts","../src/toErrorSchema.ts","../src/unwrapErrorHandler.ts","../src/utcToLocal.ts","../src/validationDataMerge.ts","../src/withIdRefPrefix.ts","../src/enums.ts"],"sourcesContent":["/** Determines whether a `thing` is an object for the purposes of RSJF. In this case, `thing` is an object if it has\n * the type `object` but is NOT null, an array or a File.\n *\n * @param thing - The thing to check to see whether it is an object\n * @returns - True if it is a non-null, non-array, non-File object\n */\nexport default function isObject(thing: any) {\n  if (typeof File !== 'undefined' && thing instanceof File) {\n    return false;\n  }\n  if (typeof Date !== 'undefined' && thing instanceof Date) {\n    return false;\n  }\n  return typeof thing === 'object' && thing !== null && !Array.isArray(thing);\n}\n","import isObject from './isObject';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Checks the schema to see if it is allowing additional items, by verifying that `schema.additionalItems` is an\n * object. The user is warned in the console if `schema.additionalItems` has the value `true`.\n *\n * @param schema - The schema object to check\n * @returns - True if additional items is allowed, otherwise false\n */\nexport default function allowAdditionalItems<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  if (schema.additionalItems === true) {\n    console.warn('additionalItems=true is currently not supported');\n  }\n  return isObject(schema.additionalItems);\n}\n","/** Attempts to convert the string into a number. If an empty string is provided, then `undefined` is returned. If a\n * `null` is provided, it is returned. If the string ends in a `.` then the string is returned because the user may be\n * in the middle of typing a float number. If a number ends in a pattern like `.0`, `.20`, `.030`, string is returned\n * because the user may be typing number that will end in a non-zero digit. Otherwise, the string is wrapped by\n * `Number()` and if that result is not `NaN`, that number will be returned, otherwise the string `value` will be.\n *\n * @param value - The string or null value to convert to a number\n * @returns - The `value` converted to a number when appropriate, otherwise the `value`\n */\nexport default function asNumber(value: string | null) {\n  if (value === '') {\n    return undefined;\n  }\n  if (value === null) {\n    return null;\n  }\n  if (/\\.$/.test(value)) {\n    // '3.' can't really be considered a number even if it parses in js. The\n    // user is most likely entering a float.\n    return value;\n  }\n  if (/\\.0$/.test(value)) {\n    // we need to return this as a string here, to allow for input like 3.07\n    return value;\n  }\n\n  if (/\\.\\d*0$/.test(value)) {\n    // It's a number, that's cool - but we need it as a string so it doesn't screw\n    // with the user when entering dollar amounts or other values (such as those with\n    // specific precision or number of significant digits)\n    return value;\n  }\n\n  const n = Number(value);\n  const valid = typeof n === 'number' && !Number.isNaN(n);\n\n  return valid ? n : value;\n}\n","/** Below are the list of all the keys into various elements of a RJSFSchema or UiSchema that are used by the various\n * utility functions. In addition to those keys, there are the special `ADDITIONAL_PROPERTY_FLAG` and\n * `RJSF_ADDITONAL_PROPERTIES_FLAG` flags that is added to a schema under certain conditions by the `retrieveSchema()`\n * utility.\n */\nexport const ADDITIONAL_PROPERTY_FLAG = '__additional_property';\nexport const ADDITIONAL_PROPERTIES_KEY = 'additionalProperties';\nexport const ALL_OF_KEY = 'allOf';\nexport const ANY_OF_KEY = 'anyOf';\nexport const CONST_KEY = 'const';\nexport const DEFAULT_KEY = 'default';\nexport const DEFINITIONS_KEY = 'definitions';\nexport const DEPENDENCIES_KEY = 'dependencies';\nexport const ENUM_KEY = 'enum';\nexport const ERRORS_KEY = '__errors';\nexport const ID_KEY = '$id';\nexport const ITEMS_KEY = 'items';\nexport const NAME_KEY = '$name';\nexport const ONE_OF_KEY = 'oneOf';\nexport const PROPERTIES_KEY = 'properties';\nexport const REQUIRED_KEY = 'required';\nexport const SUBMIT_BTN_OPTIONS_KEY = 'submitButtonOptions';\nexport const REF_KEY = '$ref';\nexport const RJSF_ADDITONAL_PROPERTIES_FLAG = '__rjsf_additionalProperties';\nexport const ROOT_SCHEMA_PREFIX = '__rjsf_rootSchema';\nexport const UI_FIELD_KEY = 'ui:field';\nexport const UI_WIDGET_KEY = 'ui:widget';\nexport const UI_OPTIONS_KEY = 'ui:options';\nexport const UI_GLOBAL_OPTIONS_KEY = 'ui:globalOptions';\n","import { UI_OPTIONS_KEY, UI_WIDGET_KEY } from './constants';\nimport isObject from './isObject';\nimport { FormContextType, GlobalUISchemaOptions, RJSFSchema, StrictRJSFSchema, UIOptionsType, UiSchema } from './types';\n\n/** Get all passed options from ui:options, and ui:<optionName>, returning them in an object with the `ui:`\n * stripped off. Any `globalOptions` will always be returned, unless they are overridden by options in the `uiSchema`.\n *\n * @param [uiSchema={}] - The UI Schema from which to get any `ui:xxx` options\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - An object containing all the `ui:xxx` options with the `ui:` stripped off along with all `globalOptions`\n */\nexport default function getUiOptions<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  uiSchema: UiSchema<T, S, F> = {},\n  globalOptions: GlobalUISchemaOptions = {}\n): UIOptionsType<T, S, F> {\n  return Object.keys(uiSchema)\n    .filter((key) => key.indexOf('ui:') === 0)\n    .reduce(\n      (options, key) => {\n        const value = uiSchema[key];\n        if (key === UI_WIDGET_KEY && isObject(value)) {\n          console.error('Setting options via ui:widget object is no longer supported, use ui:options instead');\n          return options;\n        }\n        if (key === UI_OPTIONS_KEY && isObject(value)) {\n          return { ...options, ...value };\n        }\n        return { ...options, [key.substring(3)]: value };\n      },\n      { ...globalOptions }\n    );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\nimport getUiOptions from './getUiOptions';\n\n/** Checks whether the field described by `schema`, having the `uiSchema` and `formData` supports expanding. The UI for\n * the field can expand if it has additional properties, is not forced as non-expandable by the `uiSchema` and the\n * `formData` object doesn't already have `schema.maxProperties` elements.\n *\n * @param schema - The schema for the field that is being checked\n * @param [uiSchema={}] - The uiSchema for the field\n * @param [formData] - The formData for the field\n * @returns - True if the schema element has additionalProperties, is expandable, and not at the maxProperties limit\n */\nexport default function canExpand<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  uiSchema: UiSchema<T, S, F> = {},\n  formData?: T\n) {\n  if (!schema.additionalProperties) {\n    return false;\n  }\n  const { expandable = true } = getUiOptions<T, S, F>(uiSchema);\n  if (expandable === false) {\n    return expandable;\n  }\n  // if ui:options.expandable was not explicitly set to false, we can add\n  // another property if we have not exceeded maxProperties yet\n  if (schema.maxProperties !== undefined && formData) {\n    return Object.keys(formData).length < schema.maxProperties;\n  }\n  return true;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { FieldValidation, FormValidation, GenericObjectType } from './types';\n\n/** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n *\n * @param formData - The form data around which the error handler is created\n * @returns - A `FormValidation` object based on the `formData` structure\n */\nexport default function createErrorHandler<T = any>(formData: T): FormValidation<T> {\n  const handler: FieldValidation = {\n    // We store the list of errors for this node in a property named __errors\n    // to avoid name collision with a possible sub schema field named\n    // 'errors' (see `utils.toErrorSchema`).\n    [ERRORS_KEY]: [],\n    addError(message: string) {\n      this[ERRORS_KEY]!.push(message);\n    },\n  };\n  if (Array.isArray(formData)) {\n    return formData.reduce((acc, value, key) => {\n      return { ...acc, [key]: createErrorHandler(value) };\n    }, handler);\n  }\n  if (isPlainObject(formData)) {\n    const formObject: GenericObjectType = formData as GenericObjectType;\n    return Object.keys(formObject).reduce((acc, key) => {\n      return { ...acc, [key]: createErrorHandler(formObject[key]) };\n    }, handler as FormValidation<T>);\n  }\n  return handler as FormValidation<T>;\n}\n","import isEqualWith from 'lodash/isEqualWith';\n\n/** Implements a deep equals using the `lodash.isEqualWith` function, that provides a customized comparator that\n * assumes all functions are equivalent.\n *\n * @param a - The first element to compare\n * @param b - The second element to compare\n * @returns - True if the `a` and `b` are deeply equal, false otherwise\n */\nexport default function deepEquals(a: any, b: any): boolean {\n  return isEqualWith(a, b, (obj: any, other: any) => {\n    if (typeof obj === 'function' && typeof other === 'function') {\n      // Assume all functions are equivalent\n      // see https://github.com/rjsf-team/react-jsonschema-form/issues/255\n      return true;\n    }\n    return undefined; // fallback to default isEquals behavior\n  });\n}\n","import jsonpointer from 'jsonpointer';\nimport omit from 'lodash/omit';\n\nimport { REF_KEY } from './constants';\nimport { GenericObjectType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Splits out the value at the `key` in `object` from the `object`, returning an array that contains in the first\n * location, the `object` minus the `key: value` and in the second location the `value`.\n *\n * @param key - The key from the object to extract\n * @param object - The object from which to extract the element\n * @returns - An array with the first value being the object minus the `key` element and the second element being the\n *      value from `object[key]`\n */\nexport function splitKeyElementFromObject(key: string, object: GenericObjectType) {\n  const value = object[key];\n  const remaining = omit(object, [key]);\n  return [remaining, value];\n}\n\n/** Given the name of a `$ref` from within a schema, using the `rootSchema`, look up and return the sub-schema using the\n * path provided by that reference. If `#` is not the first character of the reference, or the path does not exist in\n * the schema, then throw an Error. Otherwise return the sub-schema. Also deals with nested `$ref`s in the sub-schema.\n *\n * @param $ref - The ref string for which the schema definition is desired\n * @param [rootSchema={}] - The root schema in which to search for the definition\n * @returns - The sub-schema within the `rootSchema` which matches the `$ref` if it exists\n * @throws - Error indicating that no schema for that reference exists\n */\nexport default function findSchemaDefinition<S extends StrictRJSFSchema = RJSFSchema>(\n  $ref?: string,\n  rootSchema: S = {} as S\n): S {\n  let ref = $ref || '';\n  if (ref.startsWith('#')) {\n    // Decode URI fragment representation.\n    ref = decodeURIComponent(ref.substring(1));\n  } else {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  const current: S = jsonpointer.get(rootSchema, ref);\n  if (current === undefined) {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  if (current[REF_KEY]) {\n    const [remaining, theRef] = splitKeyElementFromObject(REF_KEY, current);\n    const subSchema = findSchemaDefinition<S>(theRef, rootSchema);\n    if (Object.keys(remaining).length > 0) {\n      return { ...remaining, ...subSchema };\n    }\n    return subSchema;\n  }\n  return current;\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\n\nimport { PROPERTIES_KEY } from '../constants';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n * Deprecated, use `getFirstMatchingOption()` instead.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the matched option or 0 if none is available\n * @deprecated\n */\nexport default function getMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S,\n  discriminatorField?: string\n): number {\n  // For performance, skip validating subschemas if formData is undefined. We just\n  // want to get the first option in that case.\n  if (formData === undefined) {\n    return 0;\n  }\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n\n    // If we have a discriminator field, then we will use this to make the determination\n    if (discriminatorField && has(option, [PROPERTIES_KEY, discriminatorField])) {\n      const value = get(formData, discriminatorField);\n      const discriminator = get(option, [PROPERTIES_KEY, discriminatorField], {});\n      if (validator.isValid(discriminator, value, rootSchema)) {\n        return i;\n      }\n    } else if (option[PROPERTIES_KEY]) {\n      // If the schema describes an object then we need to add slightly more\n      // strict matching to the schema, because unless the schema uses the\n      // \"requires\" keyword, an object will match the schema as long as it\n      // doesn't have matching keys with a conflicting type. To do this we use an\n      // \"anyOf\" with an array of requires. This augmentation expresses that the\n      // schema should match if any of the keys in the schema are present on the\n      // object and pass validation.\n      //\n      // Create an \"anyOf\" schema that requires at least one of the keys in the\n      // \"properties\" object\n      const requiresAnyOf = {\n        anyOf: Object.keys(option[PROPERTIES_KEY]).map((key) => ({\n          required: [key],\n        })),\n      };\n\n      let augmentedSchema;\n\n      // If the \"anyOf\" keyword already exists, wrap the augmentation in an \"allOf\"\n      if (option.anyOf) {\n        // Create a shallow clone of the option\n        const { ...shallowClone } = option;\n\n        if (!shallowClone.allOf) {\n          shallowClone.allOf = [];\n        } else {\n          // If \"allOf\" already exists, shallow clone the array\n          shallowClone.allOf = shallowClone.allOf.slice();\n        }\n\n        shallowClone.allOf.push(requiresAnyOf);\n\n        augmentedSchema = shallowClone;\n      } else {\n        augmentedSchema = Object.assign({}, option, requiresAnyOf);\n      }\n\n      // Remove the \"required\" field as it's likely that not all fields have\n      // been filled in yet, which will mean that the schema is not valid\n      delete augmentedSchema.required;\n\n      if (validator.isValid(augmentedSchema, formData, rootSchema)) {\n        return i;\n      }\n    } else if (validator.isValid(option, formData, rootSchema)) {\n      return i;\n    }\n  }\n  return 0;\n}\n","import getMatchingOption from './getMatchingOption';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n * Always returns the first option if there is nothing that matches.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the first matched option or 0 if none is available\n */\nexport default function getFirstMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S,\n  discriminatorField?: string\n): number {\n  return getMatchingOption<T, S, F>(validator, formData, options, rootSchema, discriminatorField);\n}\n","/** Given a specific `value` attempts to guess the type of a schema element. In the case where we have to implicitly\n *  create a schema, it is useful to know what type to use based on the data we are defining.\n *\n * @param value - The value from which to guess the type\n * @returns - The best guess for the object type\n */\nexport default function guessType(value: any) {\n  if (Array.isArray(value)) {\n    return 'array';\n  }\n  if (typeof value === 'string') {\n    return 'string';\n  }\n  if (value == null) {\n    return 'null';\n  }\n  if (typeof value === 'boolean') {\n    return 'boolean';\n  }\n  if (!isNaN(value)) {\n    return 'number';\n  }\n  if (typeof value === 'object') {\n    return 'object';\n  }\n  // Default to string if we can't figure it out\n  return 'string';\n}\n","import guessType from './guessType';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Gets the type of a given `schema`. If the type is not explicitly defined, then an attempt is made to infer it from\n * other elements of the schema as follows:\n * - schema.const: Returns the `guessType()` of that value\n * - schema.enum: Returns `string`\n * - schema.properties: Returns `object`\n * - schema.additionalProperties: Returns `object`\n * - type is an array with a length of 2 and one type is 'null': Returns the other type\n *\n * @param schema - The schema for which to get the type\n * @returns - The type of the schema\n */\nexport default function getSchemaType<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): string | string[] | undefined {\n  let { type } = schema;\n\n  if (!type && schema.const) {\n    return guessType(schema.const);\n  }\n\n  if (!type && schema.enum) {\n    return 'string';\n  }\n\n  if (!type && (schema.properties || schema.additionalProperties)) {\n    return 'object';\n  }\n\n  if (Array.isArray(type) && type.length === 2 && type.includes('null')) {\n    type = type.find((type) => type !== 'null');\n  }\n\n  return type;\n}\n","import union from 'lodash/union';\n\nimport { REQUIRED_KEY } from './constants';\nimport getSchemaType from './getSchemaType';\nimport isObject from './isObject';\nimport { GenericObjectType } from './types';\n\n/** Recursively merge deeply nested schemas. The difference between `mergeSchemas` and `mergeObjects` is that\n * `mergeSchemas` only concats arrays for values under the 'required' keyword, and when it does, it doesn't include\n * duplicate values.\n *\n * @param obj1 - The first schema object to merge\n * @param obj2 - The second schema object to merge\n * @returns - The merged schema object\n */\nexport default function mergeSchemas(obj1: GenericObjectType, obj2: GenericObjectType) {\n  const acc = Object.assign({}, obj1); // Prevent mutation of source object.\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeSchemas(left, right);\n    } else if (\n      obj1 &&\n      obj2 &&\n      (getSchemaType(obj1) === 'object' || getSchemaType(obj2) === 'object') &&\n      key === REQUIRED_KEY &&\n      Array.isArray(left) &&\n      Array.isArray(right)\n    ) {\n      // Don't include duplicate values when merging 'required' fields.\n      acc[key] = union(left, right);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, acc);\n}\n","import get from 'lodash/get';\nimport set from 'lodash/set';\nimport mergeAllOf, { Options } from 'json-schema-merge-allof';\n\nimport {\n  ADDITIONAL_PROPERTIES_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  DEPENDENCIES_KEY,\n  ONE_OF_KEY,\n  REF_KEY,\n} from '../constants';\nimport findSchemaDefinition, { splitKeyElementFromObject } from '../findSchemaDefinition';\nimport guessType from '../guessType';\nimport isObject from '../isObject';\nimport mergeSchemas from '../mergeSchemas';\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport getFirstMatchingOption from './getFirstMatchingOption';\n\n/** Resolves a conditional block (if/else/then) by removing the condition and merging the appropriate conditional branch\n * with the rest of the schema\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that is used to detect valid schema conditions\n * @param schema - The schema for which resolving a condition is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns - A schema with the appropriate condition resolved\n */\nexport function resolveCondition<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  formData?: T\n) {\n  const { if: expression, then, else: otherwise, ...resolvedSchemaLessConditional } = schema;\n\n  const conditionalSchema = validator.isValid(expression as S, formData, rootSchema) ? then : otherwise;\n\n  if (conditionalSchema && typeof conditionalSchema !== 'boolean') {\n    return retrieveSchema<T, S>(\n      validator,\n      mergeSchemas(\n        resolvedSchemaLessConditional,\n        retrieveSchema<T, S, F>(validator, conditionalSchema as S, rootSchema, formData)\n      ) as S,\n      rootSchema,\n      formData\n    );\n  }\n  return retrieveSchema<T, S, F>(validator, resolvedSchemaLessConditional as S, rootSchema, formData);\n}\n\n/** Resolves references and dependencies within a schema and its 'allOf' children.\n * Called internally by retrieveSchema.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its references and dependencies resolved\n */\nexport function resolveSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S = {} as S,\n  formData?: T\n): S {\n  if (REF_KEY in schema) {\n    return resolveReference<T, S, F>(validator, schema, rootSchema, formData);\n  }\n  if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchema = resolveDependencies<T, S, F>(validator, schema, rootSchema, formData);\n    return retrieveSchema<T, S, F>(validator, resolvedSchema, rootSchema, formData);\n  }\n  if (ALL_OF_KEY in schema) {\n    return {\n      ...schema,\n      allOf: schema.allOf!.map((allOfSubschema) =>\n        retrieveSchema<T, S, F>(validator, allOfSubschema as S, rootSchema, formData)\n      ),\n    };\n  }\n  // No $ref or dependencies attribute found, returning the original schema.\n  return schema;\n}\n\n/** Resolves references within a schema and its 'allOf' children.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a reference is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its references resolved\n */\nexport function resolveReference<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  formData?: T\n): S {\n  // Retrieve the referenced schema definition.\n  const $refSchema = findSchemaDefinition<S>(schema.$ref, rootSchema);\n  // Drop the $ref property of the source schema.\n  const { $ref, ...localSchema } = schema;\n  // Update referenced schema definition with local schema properties.\n  return retrieveSchema<T, S, F>(validator, { ...$refSchema, ...localSchema }, rootSchema, formData);\n}\n\n/** Creates new 'properties' items for each key in the `formData`\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be used when necessary\n * @param theSchema - The schema for which the existing additional properties is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s * @param validator\n * @param [aFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The updated schema with additional properties stubbed\n */\nexport function stubExistingAdditionalProperties<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, theSchema: S, rootSchema?: S, aFormData?: T): S {\n  // Clone the schema so we don't ruin the consumer's original\n  const schema = {\n    ...theSchema,\n    properties: { ...theSchema.properties },\n  };\n\n  // make sure formData is an object\n  const formData: GenericObjectType = aFormData && isObject(aFormData) ? aFormData : {};\n  Object.keys(formData).forEach((key) => {\n    if (key in schema.properties) {\n      // No need to stub, our schema already has the property\n      return;\n    }\n\n    let additionalProperties: S['additionalProperties'] = {};\n    if (typeof schema.additionalProperties !== 'boolean') {\n      if (REF_KEY in schema.additionalProperties!) {\n        additionalProperties = retrieveSchema<T, S, F>(\n          validator,\n          { $ref: get(schema.additionalProperties, [REF_KEY]) } as S,\n          rootSchema,\n          formData as T\n        );\n      } else if ('type' in schema.additionalProperties!) {\n        additionalProperties = { ...schema.additionalProperties };\n      } else if (ANY_OF_KEY in schema.additionalProperties! || ONE_OF_KEY in schema.additionalProperties!) {\n        additionalProperties = {\n          type: 'object',\n          ...schema.additionalProperties,\n        };\n      } else {\n        additionalProperties = { type: guessType(get(formData, [key])) };\n      }\n    } else {\n      additionalProperties = { type: guessType(get(formData, [key])) };\n    }\n\n    // The type of our new key should match the additionalProperties value;\n    schema.properties[key] = additionalProperties;\n    // Set our additional property flag so we know it was dynamically added\n    set(schema.properties, [key, ADDITIONAL_PROPERTY_FLAG], true);\n  });\n\n  return schema;\n}\n\n/** Retrieves an expanded schema that has had all of its conditions, additional properties, references and dependencies\n * resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData` that is used to do the\n * potentially recursive resolution.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n */\nexport default function retrieveSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S = {} as S, rawFormData?: T): S {\n  if (!isObject(schema)) {\n    return {} as S;\n  }\n  let resolvedSchema = resolveSchema<T, S, F>(validator, schema, rootSchema, rawFormData);\n\n  if ('if' in schema) {\n    return resolveCondition<T, S, F>(validator, schema, rootSchema, rawFormData as T);\n  }\n\n  const formData: GenericObjectType = rawFormData || {};\n\n  if (ALL_OF_KEY in schema) {\n    try {\n      resolvedSchema = mergeAllOf(resolvedSchema, {\n        deep: false,\n      } as Options) as S;\n    } catch (e) {\n      console.warn('could not merge subschemas in allOf:\\n', e);\n      const { allOf, ...resolvedSchemaWithoutAllOf } = resolvedSchema;\n      return resolvedSchemaWithoutAllOf as S;\n    }\n  }\n  const hasAdditionalProperties =\n    ADDITIONAL_PROPERTIES_KEY in resolvedSchema && resolvedSchema.additionalProperties !== false;\n  if (hasAdditionalProperties) {\n    return stubExistingAdditionalProperties<T, S, F>(validator, resolvedSchema, rootSchema, formData as T);\n  }\n  return resolvedSchema;\n}\n\n/** Resolves dependencies within a schema and its 'allOf' children.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependency is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with its dependencies resolved\n */\nexport function resolveDependencies<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  formData?: T\n): S {\n  // Drop the dependencies from the source schema.\n  const { dependencies, ...remainingSchema } = schema;\n  let resolvedSchema: S = remainingSchema as S;\n  if (Array.isArray(resolvedSchema.oneOf)) {\n    resolvedSchema = resolvedSchema.oneOf[\n      getFirstMatchingOption<T, S, F>(validator, formData, resolvedSchema.oneOf as S[], rootSchema)\n    ] as S;\n  } else if (Array.isArray(resolvedSchema.anyOf)) {\n    resolvedSchema = resolvedSchema.anyOf[\n      getFirstMatchingOption<T, S, F>(validator, formData, resolvedSchema.anyOf as S[], rootSchema)\n    ] as S;\n  }\n  return processDependencies<T, S, F>(validator, dependencies, resolvedSchema, rootSchema, formData);\n}\n\n/** Processes all the `dependencies` recursively into the `resolvedSchema` as needed\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param dependencies - The set of dependencies that needs to be processed\n * @param resolvedSchema - The schema for which processing dependencies is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with the `dependencies` resolved into it\n */\nexport function processDependencies<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  dependencies: S['dependencies'],\n  resolvedSchema: S,\n  rootSchema: S,\n  formData?: T\n): S {\n  let schema = resolvedSchema;\n  // Process dependencies updating the local schema properties as appropriate.\n  for (const dependencyKey in dependencies) {\n    // Skip this dependency if its trigger property is not present.\n    if (get(formData, [dependencyKey]) === undefined) {\n      continue;\n    }\n    // Skip this dependency if it is not included in the schema (such as when dependencyKey is itself a hidden dependency.)\n    if (schema.properties && !(dependencyKey in schema.properties)) {\n      continue;\n    }\n    const [remainingDependencies, dependencyValue] = splitKeyElementFromObject(\n      dependencyKey,\n      dependencies as GenericObjectType\n    );\n    if (Array.isArray(dependencyValue)) {\n      schema = withDependentProperties<S>(schema, dependencyValue);\n    } else if (isObject(dependencyValue)) {\n      schema = withDependentSchema<T, S, F>(\n        validator,\n        schema,\n        rootSchema,\n        dependencyKey,\n        dependencyValue as S,\n        formData\n      );\n    }\n    return processDependencies<T, S, F>(validator, remainingDependencies, schema, rootSchema, formData);\n  }\n  return schema;\n}\n\n/** Updates a schema with additionally required properties added\n *\n * @param schema - The schema for which resolving a dependent properties is desired\n * @param [additionallyRequired] - An optional array of additionally required names\n * @returns - The schema with the additional required values merged in\n */\nexport function withDependentProperties<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  additionallyRequired?: string[]\n) {\n  if (!additionallyRequired) {\n    return schema;\n  }\n  const required = Array.isArray(schema.required)\n    ? Array.from(new Set([...schema.required, ...additionallyRequired]))\n    : additionallyRequired;\n  return { ...schema, required: required };\n}\n\n/** Merges a dependent schema into the `schema` dealing with oneOfs and references\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependent schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the dependency\n * @param dependencyValue - The potentially dependent schema\n * @param formData- The current formData to assist retrieving a schema\n * @returns - The schema with the dependent schema resolved into it\n */\nexport function withDependentSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  dependencyValue: S,\n  formData?: T\n) {\n  const { oneOf, ...dependentSchema } = retrieveSchema<T, S, F>(validator, dependencyValue, rootSchema, formData);\n  schema = mergeSchemas(schema, dependentSchema) as S;\n  // Since it does not contain oneOf, we return the original schema.\n  if (oneOf === undefined) {\n    return schema;\n  }\n  // Resolve $refs inside oneOf.\n  const resolvedOneOf = oneOf.map((subschema) => {\n    if (typeof subschema === 'boolean' || !(REF_KEY in subschema)) {\n      return subschema;\n    }\n    return resolveReference<T, S, F>(validator, subschema as S, rootSchema, formData);\n  });\n  return withExactlyOneSubschema<T, S, F>(validator, schema, rootSchema, dependencyKey, resolvedOneOf, formData);\n}\n\n/** Returns a `schema` with the best choice from the `oneOf` options merged into it\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be used to validate oneOf options\n * @param schema - The schema for which resolving a oneOf subschema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the oneOf dependency\n * @param oneOf - The list of schemas representing the oneOf options\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns  The schema with the best choice of oneOf schemas merged into\n */\nexport function withExactlyOneSubschema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  oneOf: S['oneOf'],\n  formData?: T\n): S {\n  const validSubschemas = oneOf!.filter((subschema) => {\n    if (typeof subschema === 'boolean' || !subschema || !subschema.properties) {\n      return false;\n    }\n    const { [dependencyKey]: conditionPropertySchema } = subschema.properties;\n    if (conditionPropertySchema) {\n      const conditionSchema: S = {\n        type: 'object',\n        properties: {\n          [dependencyKey]: conditionPropertySchema,\n        },\n      } as S;\n      return validator.isValid(conditionSchema, formData, rootSchema);\n    }\n    return false;\n  });\n\n  if (validSubschemas!.length !== 1) {\n    console.warn(\"ignoring oneOf in dependencies because there isn't exactly one subschema that is valid\");\n    return schema;\n  }\n  const subschema: S = validSubschemas[0] as S;\n  const [dependentSubschema] = splitKeyElementFromObject(dependencyKey, subschema.properties as GenericObjectType);\n  const dependentSchema = { ...subschema, properties: dependentSubschema };\n  return mergeSchemas(schema, retrieveSchema<T, S>(validator, dependentSchema, rootSchema, formData)) as S;\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport reduce from 'lodash/reduce';\nimport times from 'lodash/times';\n\nimport getFirstMatchingOption from './getFirstMatchingOption';\nimport retrieveSchema from './retrieveSchema';\nimport { ONE_OF_KEY, REF_KEY } from '../constants';\nimport guessType from '../guessType';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** A junk option used to determine when the getFirstMatchingOption call really matches an option rather than returning\n * the first item\n */\nexport const JUNK_OPTION: StrictRJSFSchema = {\n  type: 'object',\n  properties: {\n    __not_really_there__: {\n      type: 'number',\n    },\n  },\n};\n\n/** Recursive function that calculates the score of a `formData` against the given `schema`. The computation is fairly\n * simple. Initially the total score is 0. When `schema.properties` object exists, then all the `key/value` pairs within\n * the object are processed as follows after obtaining the formValue from `formData` using the `key`:\n * - If the `value` contains a `$ref`, `calculateIndexScore()` is called recursively with the formValue and the new\n *   schema that is the result of the ref in the schema being resolved and that sub-schema's resulting score is added to\n *   the total.\n * - If the `value` contains a `oneOf` and there is a formValue, then score based on the index returned from calling\n *   `getClosestMatchingOption()` of that oneOf.\n * - If the type of the `value` is 'object', `calculateIndexScore()` is called recursively with the formValue and the\n *   `value` itself as the sub-schema, and the score is added to the total.\n * - If the type of the `value` matches the guessed-type of the `formValue`, the score is incremented by 1, UNLESS the\n *   value has a `default` or `const`. In those case, if the `default` or `const` and the `formValue` match, the score\n *   is incremented by another 1 otherwise it is decremented by 1.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param schema - The schema for which the score is being calculated\n * @param formData - The form data associated with the schema, used to calculate the score\n * @returns - The score a schema against the formData\n */\nexport function calculateIndexScore<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  schema?: S,\n  formData: any = {}\n): number {\n  let totalScore = 0;\n  if (schema) {\n    if (isObject(schema.properties)) {\n      totalScore += reduce(\n        schema.properties,\n        (score, value, key) => {\n          const formValue = get(formData, key);\n          if (typeof value === 'boolean') {\n            return score;\n          }\n          if (has(value, REF_KEY)) {\n            const newSchema = retrieveSchema<T, S, F>(validator, value as S, rootSchema, formValue);\n            return score + calculateIndexScore<T, S, F>(validator, rootSchema, newSchema, formValue || {});\n          }\n          if (has(value, ONE_OF_KEY) && formValue) {\n            return (\n              score + getClosestMatchingOption<T, S, F>(validator, rootSchema, formValue, get(value, ONE_OF_KEY) as S[])\n            );\n          }\n          if (value.type === 'object') {\n            return score + calculateIndexScore<T, S, F>(validator, rootSchema, value as S, formValue || {});\n          }\n          if (value.type === guessType(formValue)) {\n            // If the types match, then we bump the score by one\n            let newScore = score + 1;\n            if (value.default) {\n              // If the schema contains a readonly default value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.default ? 1 : -1;\n            } else if (value.const) {\n              // If the schema contains a const value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.const ? 1 : -1;\n            }\n            // TODO eventually, deal with enums/arrays\n            return newScore;\n          }\n          return score;\n        },\n        0\n      );\n    } else if (isString(schema.type) && schema.type === guessType(formData)) {\n      totalScore += 1;\n    }\n  }\n  return totalScore;\n}\n\n/** Determines which of the given `options` provided most closely matches the `formData`. Using\n * `getFirstMatchingOption()` to match two schemas that differ only by the readOnly, default or const value of a field\n * based on the `formData` and returns 0 when there is no match. Rather than passing in all the `options` at once to\n * this utility, instead an array of valid option indexes is created by iterating over the list of options, call\n * `getFirstMatchingOptions` with a list of one junk option and one good option, seeing if the good option is considered\n * matched.\n *\n * Once the list of valid indexes is created, if there is only one valid index, just return it. Otherwise, if there are\n * no valid indexes, then fill the valid indexes array with the indexes of all the options. Next, the index of the\n * option with the highest score is determined by iterating over the list of valid options, calling\n * `calculateIndexScore()` on each, comparing it against the current best score, and returning the index of the one that\n * eventually has the best score.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param formData - The form data associated with the schema\n * @param options - The list of options that can be selected from\n * @param [selectedOption=-1] - The index of the currently selected option, defaulted to -1 if not specified\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n */\nexport default function getClosestMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  formData: T | undefined,\n  options: S[],\n  selectedOption = -1,\n  discriminatorField?: string\n): number {\n  // Reduce the array of options down to a list of the indexes that are considered matching options\n  const allValidIndexes = options.reduce((validList: number[], option, index: number) => {\n    const testOptions: S[] = [JUNK_OPTION as S, option];\n    const match = getFirstMatchingOption<T, S, F>(validator, formData, testOptions, rootSchema, discriminatorField);\n    // The match is the real option, so add its index to list of valid indexes\n    if (match === 1) {\n      validList.push(index);\n    }\n    return validList;\n  }, []);\n\n  // There is only one valid index, so return it!\n  if (allValidIndexes.length === 1) {\n    return allValidIndexes[0];\n  }\n  if (!allValidIndexes.length) {\n    // No indexes were valid, so we'll score all the options, add all the indexes\n    times(options.length, (i) => allValidIndexes.push(i));\n  }\n  type BestType = { bestIndex: number; bestScore: number };\n  // Score all the options in the list of valid indexes and return the index with the best score\n  const { bestIndex }: BestType = allValidIndexes.reduce(\n    (scoreData: BestType, index: number) => {\n      const { bestScore } = scoreData;\n      let option = options[index];\n      if (has(option, REF_KEY)) {\n        option = retrieveSchema<T, S, F>(validator, option, rootSchema, formData);\n      }\n      const score = calculateIndexScore(validator, rootSchema, option, formData);\n      if (score > bestScore) {\n        return { bestIndex: index, bestScore: score };\n      }\n      return scoreData;\n    },\n    { bestIndex: selectedOption, bestScore: 0 }\n  );\n  return bestIndex;\n}\n","import isObject from './isObject';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Detects whether the given `schema` contains fixed items. This is the case when `schema.items` is a non-empty array\n * that only contains objects.\n *\n * @param schema - The schema in which to check for fixed items\n * @returns - True if there are fixed items in the schema, false otherwise\n */\nexport default function isFixedItems<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every((item) => isObject(item));\n}\n","import get from 'lodash/get';\n\nimport isObject from './isObject';\nimport { GenericObjectType } from '../src';\n\n/** Merges the `defaults` object of type `T` into the `formData` of type `T`\n *\n * When merging defaults and form data, we want to merge in this specific way:\n * - objects are deeply merged\n * - arrays are merged in such a way that:\n *   - when the array is set in form data, only array entries set in form data\n *     are deeply merged; additional entries from the defaults are ignored\n *   - when the array is not set in form data, the default is copied over\n * - scalars are overwritten/set by form data\n *\n * @param [defaults] - The defaults to merge\n * @param [formData] - The form data into which the defaults will be merged\n * @returns - The resulting merged form data with defaults\n */\nexport default function mergeDefaultsWithFormData<T = any>(defaults?: T, formData?: T): T | undefined {\n  if (Array.isArray(formData)) {\n    const defaultsArray = Array.isArray(defaults) ? defaults : [];\n    const mapped = formData.map((value, idx) => {\n      if (defaultsArray[idx]) {\n        return mergeDefaultsWithFormData<any>(defaultsArray[idx], value);\n      }\n      return value;\n    });\n    return mapped as unknown as T;\n  }\n  if (isObject(formData)) {\n    const acc: { [key in keyof T]: any } = Object.assign({}, defaults); // Prevent mutation of source object.\n    return Object.keys(formData as GenericObjectType).reduce((acc, key) => {\n      acc[key as keyof T] = mergeDefaultsWithFormData<T>(defaults ? get(defaults, key) : {}, get(formData, key));\n      return acc;\n    }, acc);\n  }\n  return formData;\n}\n","import isObject from './isObject';\nimport { GenericObjectType } from './types';\n\n/** Recursively merge deeply nested objects.\n *\n * @param obj1 - The first object to merge\n * @param obj2 - The second object to merge\n * @param [concatArrays=false] - Optional flag that, when true, will cause arrays to be concatenated. Use\n *          \"preventDuplicates\" to merge arrays in a manner that prevents any duplicate entries from being merged.\n *          NOTE: Uses shallow comparison for the duplicate checking.\n * @returns - A new object that is the merge of the two given objects\n */\nexport default function mergeObjects(\n  obj1: GenericObjectType,\n  obj2: GenericObjectType,\n  concatArrays: boolean | 'preventDuplicates' = false\n) {\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeObjects(left, right, concatArrays);\n    } else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {\n      let toMerge = right;\n      if (concatArrays === 'preventDuplicates') {\n        toMerge = right.reduce((result, value) => {\n          if (!left.includes(value)) {\n            result.push(value);\n          }\n          return result;\n        }, []);\n      }\n      acc[key] = left.concat(toMerge);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, Object.assign({}, obj1)); // Prevent mutation of source object.\n}\n","import { CONST_KEY } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** This function checks if the given `schema` matches a single constant value. This happens when either the schema has\n * an `enum` array with a single value or there is a `const` defined.\n *\n * @param schema - The schema for a field\n * @returns - True if the `schema` has a single constant value, false otherwise\n */\nexport default function isConstant<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return (Array.isArray(schema.enum) && schema.enum.length === 1) || CONST_KEY in schema;\n}\n","import isConstant from '../isConstant';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` combination represents a select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which check for a select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a select, otherwise false\n */\nexport default function isSelect<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  rootSchema: S = {} as S\n) {\n  const schema = retrieveSchema<T, S, F>(validator, theSchema, rootSchema, undefined);\n  const altSchemas = schema.oneOf || schema.anyOf;\n  if (Array.isArray(schema.enum)) {\n    return true;\n  }\n  if (Array.isArray(altSchemas)) {\n    return altSchemas.every((altSchemas) => typeof altSchemas !== 'boolean' && isConstant(altSchemas));\n  }\n  return false;\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\nimport isSelect from './isSelect';\n\n/** Checks to see if the `schema` combination represents a multi-select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for a multi-select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a multi-select, otherwise false\n */\nexport default function isMultiSelect<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema?: S) {\n  if (!schema.uniqueItems || !schema.items || typeof schema.items === 'boolean') {\n    return false;\n  }\n  return isSelect<T, S, F>(validator, schema.items as S, rootSchema);\n}\n","import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { ANY_OF_KEY, DEFAULT_KEY, DEPENDENCIES_KEY, PROPERTIES_KEY, ONE_OF_KEY, REF_KEY } from '../constants';\nimport findSchemaDefinition from '../findSchemaDefinition';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport getSchemaType from '../getSchemaType';\nimport isObject from '../isObject';\nimport isFixedItems from '../isFixedItems';\nimport mergeDefaultsWithFormData from '../mergeDefaultsWithFormData';\nimport mergeObjects from '../mergeObjects';\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport isMultiSelect from './isMultiSelect';\nimport retrieveSchema, { resolveDependencies } from './retrieveSchema';\n\n/** Enum that indicates how `schema.additionalItems` should be handled by the `getInnerSchemaForArrayItem()` function.\n */\nexport enum AdditionalItemsHandling {\n  Ignore,\n  Invert,\n  Fallback,\n}\n\n/** Given a `schema` will return an inner schema that for an array item. This is computed differently based on the\n * `additionalItems` enum and the value of `idx`. There are four possible returns:\n * 1. If `idx` is >= 0, then if `schema.items` is an array the `idx`th element of the array is returned if it is a valid\n *    index and not a boolean, otherwise it falls through to 3.\n * 2. If `schema.items` is not an array AND truthy and not a boolean, then `schema.items` is returned since it actually\n *    is a schema, otherwise it falls through to 3.\n * 3. If `additionalItems` is not `AdditionalItemsHandling.Ignore` and `schema.additionalItems` is an object, then\n *    `schema.additionalItems` is returned since it actually is a schema, otherwise it falls through to 4.\n * 4. {} is returned representing an empty schema\n *\n * @param schema - The schema from which to get the particular item\n * @param [additionalItems=AdditionalItemsHandling.Ignore] - How do we want to handle additional items?\n * @param [idx=-1] - Index, if non-negative, will be used to return the idx-th element in a `schema.items` array\n * @returns - The best fit schema object from the `schema` given the `additionalItems` and `idx` modifiers\n */\nexport function getInnerSchemaForArrayItem<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  additionalItems: AdditionalItemsHandling = AdditionalItemsHandling.Ignore,\n  idx = -1\n): S {\n  if (idx >= 0) {\n    if (Array.isArray(schema.items) && idx < schema.items.length) {\n      const item = schema.items[idx];\n      if (typeof item !== 'boolean') {\n        return item as S;\n      }\n    }\n  } else if (schema.items && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n    return schema.items as S;\n  }\n  if (additionalItems !== AdditionalItemsHandling.Ignore && isObject(schema.additionalItems)) {\n    return schema.additionalItems as S;\n  }\n  return {} as S;\n}\n\n/** Either add `computedDefault` at `key` into `obj` or not add it based on its value and the value of\n * `includeUndefinedValues`. Generally undefined `computedDefault` values are added only when `includeUndefinedValues`\n * is either true or \"excludeObjectChildren\". If `includeUndefinedValues` is false, then non-undefined and\n * non-empty-object values will be added.\n *\n * @param obj - The object into which the computed default may be added\n * @param key - The key into the object at which the computed default may be added\n * @param computedDefault - The computed default value that maybe should be added to the obj\n * @param includeUndefinedValues - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties. If \"allowEmptyObject\", prevents undefined\n *          values in this object while allow the object itself to be empty and passing `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param requiredFields - The list of fields that are required\n */\nfunction maybeAddDefaultToObject<T = any>(\n  obj: GenericObjectType,\n  key: string,\n  computedDefault: T | T[] | undefined,\n  includeUndefinedValues: boolean | 'excludeObjectChildren',\n  requiredFields: string[] = []\n) {\n  if (includeUndefinedValues) {\n    obj[key] = computedDefault;\n  } else if (isObject(computedDefault)) {\n    // Store computedDefault if it's a non-empty object (e.g. not {})\n    if (!isEmpty(computedDefault) || requiredFields.includes(key)) {\n      obj[key] = computedDefault;\n    }\n  } else if (computedDefault !== undefined) {\n    // Store computedDefault if it's a defined primitive (e.g. true)\n    obj[key] = computedDefault;\n  }\n}\n\n/** Computes the defaults for the current `schema` given the `rawFormData` and `parentDefaults` if any. This drills into\n * each level of the schema, recursively, to fill out every level of defaults provided by the schema.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be used when necessary\n * @param rawSchema - The schema for which the default state is desired\n * @param [parentDefaults] - Any defaults provided by the parent field in the schema\n * @param [rootSchema] - The options root schema, used to primarily to look up `$ref`s\n * @param [rawFormData] - The current formData, if any, onto which to provide any missing defaults\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param [_recurseList=[]] - The list of ref names currently being recursed, used to prevent infinite recursion\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport function computeDefaults<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  rawSchema: S,\n  parentDefaults?: T,\n  rootSchema: S = {} as S,\n  rawFormData?: T,\n  includeUndefinedValues: boolean | 'excludeObjectChildren' = false,\n  _recurseList: string[] = []\n): T | T[] | undefined {\n  const formData: T = (isObject(rawFormData) ? rawFormData : {}) as T;\n  let schema: S = isObject(rawSchema) ? rawSchema : ({} as S);\n  // Compute the defaults recursively: give highest priority to deepest nodes.\n  let defaults: T | T[] | undefined = parentDefaults;\n  if (isObject(defaults) && isObject(schema.default)) {\n    // For object defaults, only override parent defaults that are defined in\n    // schema.default.\n    defaults = mergeObjects(defaults!, schema.default as GenericObjectType) as T;\n  } else if (DEFAULT_KEY in schema) {\n    defaults = schema.default as unknown as T;\n  } else if (REF_KEY in schema) {\n    const refName = schema[REF_KEY];\n    // Use referenced schema defaults for this node.\n    if (!_recurseList.includes(refName!)) {\n      const refSchema = findSchemaDefinition<S>(refName, rootSchema);\n      return computeDefaults<T, S, F>(\n        validator,\n        refSchema,\n        defaults,\n        rootSchema,\n        formData as T,\n        includeUndefinedValues,\n        _recurseList.concat(refName!)\n      );\n    }\n  } else if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchema = resolveDependencies<T, S, F>(validator, schema, rootSchema, formData);\n    return computeDefaults<T, S, F>(\n      validator,\n      resolvedSchema,\n      defaults,\n      rootSchema,\n      formData as T,\n      includeUndefinedValues,\n      _recurseList\n    );\n  } else if (isFixedItems(schema)) {\n    defaults = (schema.items! as S[]).map((itemSchema: S, idx: number) =>\n      computeDefaults<T, S>(\n        validator,\n        itemSchema,\n        Array.isArray(parentDefaults) ? parentDefaults[idx] : undefined,\n        rootSchema,\n        formData as T,\n        includeUndefinedValues,\n        _recurseList\n      )\n    ) as T[];\n  } else if (ONE_OF_KEY in schema) {\n    if (schema.oneOf!.length === 0) {\n      return undefined;\n    }\n    schema = schema.oneOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        schema.oneOf as S[],\n        0\n      )\n    ] as S;\n  } else if (ANY_OF_KEY in schema) {\n    if (schema.anyOf!.length === 0) {\n      return undefined;\n    }\n    schema = schema.anyOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        schema.anyOf as S[],\n        0\n      )\n    ] as S;\n  }\n\n  // Not defaults defined for this node, fallback to generic typed ones.\n  if (typeof defaults === 'undefined') {\n    defaults = schema.default as unknown as T;\n  }\n\n  switch (getSchemaType<S>(schema)) {\n    // We need to recur for object schema inner default values.\n    case 'object': {\n      const objectDefaults = Object.keys(schema.properties || {}).reduce((acc: GenericObjectType, key: string) => {\n        // Compute the defaults for this node, with the parent defaults we might\n        // have from a previous run: defaults[key].\n        const computedDefault = computeDefaults<T, S, F>(\n          validator,\n          get(schema, [PROPERTIES_KEY, key]),\n          get(defaults, [key]),\n          rootSchema,\n          get(formData, [key]),\n          includeUndefinedValues === true,\n          _recurseList\n        );\n        maybeAddDefaultToObject<T>(acc, key, computedDefault, includeUndefinedValues, schema.required);\n        return acc;\n      }, {}) as T;\n      if (schema.additionalProperties) {\n        // as per spec additionalProperties may be either schema or boolean\n        const additionalPropertiesSchema = isObject(schema.additionalProperties) ? schema.additionalProperties : {};\n        const keys = new Set<string>();\n        if (isObject(defaults)) {\n          Object.keys(defaults as GenericObjectType)\n            .filter((key) => !schema.properties || !schema.properties[key])\n            .forEach((key) => keys.add(key));\n        }\n        if (isObject(formData)) {\n          Object.keys(formData as GenericObjectType)\n            .filter((key) => !schema.properties || !schema.properties[key])\n            .forEach((key) => keys.add(key));\n        }\n        keys.forEach((key) => {\n          const computedDefault = computeDefaults(\n            validator,\n            additionalPropertiesSchema as S,\n            get(defaults, [key]),\n            rootSchema,\n            get(formData, [key]),\n            includeUndefinedValues === true,\n            _recurseList\n          );\n          maybeAddDefaultToObject<T>(objectDefaults as GenericObjectType, key, computedDefault, includeUndefinedValues);\n        });\n      }\n      return objectDefaults;\n    }\n    case 'array':\n      // Inject defaults into existing array defaults\n      if (Array.isArray(defaults)) {\n        defaults = defaults.map((item, idx) => {\n          const schemaItem: S = getInnerSchemaForArrayItem<S>(schema, AdditionalItemsHandling.Fallback, idx);\n          return computeDefaults<T, S, F>(validator, schemaItem, item, rootSchema, undefined, undefined, _recurseList);\n        }) as T[];\n      }\n\n      // Deeply inject defaults into already existing form data\n      if (Array.isArray(rawFormData)) {\n        const schemaItem: S = getInnerSchemaForArrayItem<S>(schema);\n        defaults = rawFormData.map((item: T, idx: number) => {\n          return computeDefaults<T, S, F>(\n            validator,\n            schemaItem,\n            get(defaults, [idx]),\n            rootSchema,\n            item,\n            undefined,\n            _recurseList\n          );\n        }) as T[];\n      }\n      if (schema.minItems) {\n        if (!isMultiSelect<T, S, F>(validator, schema, rootSchema)) {\n          const defaultsLength = Array.isArray(defaults) ? defaults.length : 0;\n          if (schema.minItems > defaultsLength) {\n            const defaultEntries: T[] = (defaults || []) as T[];\n            // populate the array with the defaults\n            const fillerSchema: S = getInnerSchemaForArrayItem<S>(schema, AdditionalItemsHandling.Invert);\n            const fillerDefault = fillerSchema.default;\n            const fillerEntries: T[] = new Array(schema.minItems - defaultsLength).fill(\n              computeDefaults<any, S, F>(\n                validator,\n                fillerSchema,\n                fillerDefault,\n                rootSchema,\n                undefined,\n                undefined,\n                _recurseList\n              )\n            ) as T[];\n            // then fill up the rest with either the item default or empty, up to minItems\n            return defaultEntries.concat(fillerEntries);\n          }\n        }\n        return defaults ? defaults : [];\n      }\n  }\n  return defaults;\n}\n\n/** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n * computed to have defaults provided in the `schema`.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the default state is desired\n * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport default function getDefaultFormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  formData?: T,\n  rootSchema?: S,\n  includeUndefinedValues: boolean | 'excludeObjectChildren' = false\n) {\n  if (!isObject(theSchema)) {\n    throw new Error('Invalid schema: ' + theSchema);\n  }\n  const schema = retrieveSchema<T, S, F>(validator, theSchema, rootSchema, formData);\n  const defaults = computeDefaults<T, S, F>(validator, schema, undefined, rootSchema, formData, includeUndefinedValues);\n  if (typeof formData === 'undefined' || formData === null || (typeof formData === 'number' && isNaN(formData))) {\n    // No form data? Use schema defaults.\n    return defaults;\n  }\n  if (isObject(formData)) {\n    return mergeDefaultsWithFormData<T>(defaults as T, formData);\n  }\n  if (Array.isArray(formData)) {\n    return mergeDefaultsWithFormData<T[]>(defaults as T[], formData);\n  }\n  return formData;\n}\n","import getUiOptions from './getUiOptions';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\n\n/** Checks to see if the `uiSchema` contains the `widget` field and that the widget is not `hidden`\n *\n * @param uiSchema - The UI Schema from which to detect if it is customized\n * @returns - True if the `uiSchema` describes a custom widget, false otherwise\n */\nexport default function isCustomWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}) {\n  return (\n    // TODO: Remove the `&& uiSchema['ui:widget'] !== 'hidden'` once we support hidden widgets for arrays.\n    // https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/#hidden-widgets\n    'widget' in getUiOptions<T, S, F>(uiSchema) && getUiOptions<T, S, F>(uiSchema)['widget'] !== 'hidden'\n  );\n}\n","import { UI_WIDGET_KEY } from '../constants';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for array of files flag is desired\n * @param [uiSchema={}] - The UI schema from which to check the widget\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema/uiSchema contains an array of files, otherwise false\n */\nexport default function isFilesArray<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S\n) {\n  if (uiSchema[UI_WIDGET_KEY] === 'files') {\n    return true;\n  }\n  if (schema.items) {\n    const itemsSchema = retrieveSchema<T, S, F>(validator, schema.items as S, rootSchema);\n    return itemsSchema.type === 'string' && itemsSchema.format === 'data-url';\n  }\n  return false;\n}\n","import { UI_FIELD_KEY, UI_WIDGET_KEY } from '../constants';\nimport getSchemaType from '../getSchemaType';\nimport getUiOptions from '../getUiOptions';\nimport isCustomWidget from '../isCustomWidget';\nimport {\n  FormContextType,\n  GlobalUISchemaOptions,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidatorType,\n} from '../types';\nimport isFilesArray from './isFilesArray';\nimport isMultiSelect from './isMultiSelect';\n\n/** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n * should be displayed in a UI.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the display label flag is desired\n * @param [uiSchema={}] - The UI schema from which to derive potentially displayable information\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - True if the label should be displayed or false if it should not\n */\nexport default function getDisplayLabel<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S,\n  globalOptions?: GlobalUISchemaOptions\n): boolean {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalOptions);\n  const { label = true } = uiOptions;\n  let displayLabel = !!label;\n  const schemaType = getSchemaType<S>(schema);\n\n  if (schemaType === 'array') {\n    displayLabel =\n      isMultiSelect<T, S, F>(validator, schema, rootSchema) ||\n      isFilesArray<T, S, F>(validator, schema, uiSchema, rootSchema) ||\n      isCustomWidget(uiSchema);\n  }\n\n  if (schemaType === 'object') {\n    displayLabel = false;\n  }\n  if (schemaType === 'boolean' && !uiSchema[UI_WIDGET_KEY]) {\n    displayLabel = false;\n  }\n  if (uiSchema[UI_FIELD_KEY]) {\n    displayLabel = false;\n  }\n  return displayLabel;\n}\n","import isEmpty from 'lodash/isEmpty';\n\nimport mergeObjects from '../mergeObjects';\nimport { ErrorSchema, FormContextType, RJSFSchema, StrictRJSFSchema, ValidationData, ValidatorType } from '../types';\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `validator.toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validator - The validator used to convert an ErrorSchema to a list of errors\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n *        removed in the next major release.\n */\nexport default function mergeValidationData<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = validator.toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\n\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport { PROPERTIES_KEY, REF_KEY } from '../constants';\nimport retrieveSchema from './retrieveSchema';\n\nconst NO_VALUE = Symbol('no Value');\n\n/** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the new\n * schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the nature\n * of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the old schema\n * that are non-existent in the new schema are set to `undefined`. The data sanitization process has the following flow:\n *\n * - If the new schema is an object that contains a `properties` object then:\n *   - Create a `removeOldSchemaData` object, setting each key in the `oldSchema.properties` having `data` to undefined\n *   - Create an empty `nestedData` object for use in the key filtering below:\n *   - Iterate over each key in the `newSchema.properties` as follows:\n *     - Get the `formValue` of the key from the `data`\n *     - Get the `oldKeySchema` and `newKeyedSchema` for the key, defaulting to `{}` when it doesn't exist\n *     - Retrieve the schema for any refs within each `oldKeySchema` and/or `newKeySchema`\n *     - Get the types of the old and new keyed schemas and if the old doesn't exist or the old & new are the same then:\n *       - If `removeOldSchemaData` has an entry for the key, delete it since the new schema has the same property\n *       - If type of the key in the new schema is `object`:\n *         - Store the value from the recursive `sanitizeDataForNewSchema` call in `nestedData[key]`\n *       - Otherwise, check for default or const values:\n *         - Get the old and new `default` values from the schema and check:\n *           - If the new `default` value does not match the form value:\n *             - If the old `default` value DOES match the form value, then:\n *               - Replace `removeOldSchemaData[key]` with the new `default`\n *               - Otherwise, if the new schema is `readOnly` then replace `removeOldSchemaData[key]` with undefined\n *         - Get the old and new `const` values from the schema and check:\n *           - If the new `const` value does not match the form value:\n *           - If the old `const` value DOES match the form value, then:\n *             - Replace `removeOldSchemaData[key]` with the new `const`\n *             - Otherwise, replace `removeOldSchemaData[key]` with undefined\n *   - Once all keys have been processed, return an object built as follows:\n *     - `{ ...removeOldSchemaData, ...nestedData, ...pick(data, keysToKeep) }`\n * - If the new and old schema types are array and the `data` is an array then:\n *   - If the type of the old and new schema `items` are a non-array objects:\n *     - Retrieve the schema for any refs within each `oldKeySchema.items` and/or `newKeySchema.items`\n *     - If the `type`s of both items are the same (or the old does not have a type):\n *       - If the type is \"object\", then:\n *         - For each element in the `data` recursively sanitize the data, stopping at `maxItems` if specified\n *       - Otherwise, just return the `data` removing any values after `maxItems` if it is set\n *   - If the type of the old and new schema `items` are booleans of the same value, return `data` as is\n * - Otherwise return `undefined`\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param [newSchema] - The new schema for which the data is being sanitized\n * @param [oldSchema] - The old schema from which the data originated\n * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n * @returns - The new form data, with all the fields uniquely associated with the old schema set\n *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n */\nexport default function sanitizeDataForNewSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, rootSchema: S, newSchema?: S, oldSchema?: S, data: any = {}): T {\n  // By default, we will clear the form data\n  let newFormData;\n  // If the new schema is of type object and that object contains a list of properties\n  if (has(newSchema, PROPERTIES_KEY)) {\n    // Create an object containing root-level keys in the old schema, setting each key to undefined to remove the data\n    const removeOldSchemaData: GenericObjectType = {};\n    if (has(oldSchema, PROPERTIES_KEY)) {\n      const properties = get(oldSchema, PROPERTIES_KEY, {});\n      Object.keys(properties).forEach((key) => {\n        if (has(data, key)) {\n          removeOldSchemaData[key] = undefined;\n        }\n      });\n    }\n    const keys: string[] = Object.keys(get(newSchema, PROPERTIES_KEY, {}));\n    // Create a place to store nested data that will be a side-effect of the filter\n    const nestedData: GenericObjectType = {};\n    keys.forEach((key) => {\n      const formValue = get(data, key);\n      let oldKeyedSchema: S = get(oldSchema, [PROPERTIES_KEY, key], {});\n      let newKeyedSchema: S = get(newSchema, [PROPERTIES_KEY, key], {});\n      // Resolve the refs if they exist\n      if (has(oldKeyedSchema, REF_KEY)) {\n        oldKeyedSchema = retrieveSchema<T, S, F>(validator, oldKeyedSchema, rootSchema, formValue);\n      }\n      if (has(newKeyedSchema, REF_KEY)) {\n        newKeyedSchema = retrieveSchema<T, S, F>(validator, newKeyedSchema, rootSchema, formValue);\n      }\n      // Now get types and see if they are the same\n      const oldSchemaTypeForKey = get(oldKeyedSchema, 'type');\n      const newSchemaTypeForKey = get(newKeyedSchema, 'type');\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaTypeForKey || oldSchemaTypeForKey === newSchemaTypeForKey) {\n        if (has(removeOldSchemaData, key)) {\n          // SIDE-EFFECT: remove the undefined value for a key that has the same type between the old and new schemas\n          delete removeOldSchemaData[key];\n        }\n        // If it is an object, we'll recurse and store the resulting sanitized data for the key\n        if (newSchemaTypeForKey === 'object' || (newSchemaTypeForKey === 'array' && Array.isArray(formValue))) {\n          // SIDE-EFFECT: process the new schema type of object recursively to save iterations\n          const itemData = sanitizeDataForNewSchema<T, S, F>(\n            validator,\n            rootSchema,\n            newKeyedSchema,\n            oldKeyedSchema,\n            formValue\n          );\n          if (itemData !== undefined || newSchemaTypeForKey === 'array') {\n            // only put undefined values for the array type and not the object type\n            nestedData[key] = itemData;\n          }\n        } else {\n          // Ok, the non-object types match, let's make sure that a default or a const of a different value is replaced\n          // with the new default or const. This allows the case where two schemas differ that only by the default/const\n          // value to be properly selected\n          const newOptionDefault = get(newKeyedSchema, 'default', NO_VALUE);\n          const oldOptionDefault = get(oldKeyedSchema, 'default', NO_VALUE);\n          if (newOptionDefault !== NO_VALUE && newOptionDefault !== formValue) {\n            if (oldOptionDefault === formValue) {\n              // If the old default matches the formValue, we'll update the new value to match the new default\n              removeOldSchemaData[key] = newOptionDefault;\n            } else if (get(newKeyedSchema, 'readOnly') === true) {\n              // If the new schema has the default set to read-only, treat it like a const and remove the value\n              removeOldSchemaData[key] = undefined;\n            }\n          }\n\n          const newOptionConst = get(newKeyedSchema, 'const', NO_VALUE);\n          const oldOptionConst = get(oldKeyedSchema, 'const', NO_VALUE);\n          if (newOptionConst !== NO_VALUE && newOptionConst !== formValue) {\n            // Since this is a const, if the old value matches, replace the value with the new const otherwise clear it\n            removeOldSchemaData[key] = oldOptionConst === formValue ? newOptionConst : undefined;\n          }\n        }\n      }\n    });\n\n    newFormData = {\n      ...data,\n      ...removeOldSchemaData,\n      ...nestedData,\n    };\n    // First apply removing the old schema data, then apply the nested data, then apply the old data keys to keep\n  } else if (get(oldSchema, 'type') === 'array' && get(newSchema, 'type') === 'array' && Array.isArray(data)) {\n    let oldSchemaItems = get(oldSchema, 'items');\n    let newSchemaItems = get(newSchema, 'items');\n    // If any of the array types `items` are arrays (remember arrays are objects) then we'll just drop the data\n    // Eventually, we may want to deal with when either of the `items` are arrays since those tuple validations\n    if (\n      typeof oldSchemaItems === 'object' &&\n      typeof newSchemaItems === 'object' &&\n      !Array.isArray(oldSchemaItems) &&\n      !Array.isArray(newSchemaItems)\n    ) {\n      if (has(oldSchemaItems, REF_KEY)) {\n        oldSchemaItems = retrieveSchema<T, S, F>(validator, oldSchemaItems as S, rootSchema, data as T);\n      }\n      if (has(newSchemaItems, REF_KEY)) {\n        newSchemaItems = retrieveSchema<T, S, F>(validator, newSchemaItems as S, rootSchema, data as T);\n      }\n      // Now get types and see if they are the same\n      const oldSchemaType = get(oldSchemaItems, 'type');\n      const newSchemaType = get(newSchemaItems, 'type');\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaType || oldSchemaType === newSchemaType) {\n        const maxItems = get(newSchema, 'maxItems', -1);\n        if (newSchemaType === 'object') {\n          newFormData = data.reduce((newValue, aValue) => {\n            const itemValue = sanitizeDataForNewSchema<T, S, F>(\n              validator,\n              rootSchema,\n              newSchemaItems as S,\n              oldSchemaItems as S,\n              aValue\n            );\n            if (itemValue !== undefined && (maxItems < 0 || newValue.length < maxItems)) {\n              newValue.push(itemValue);\n            }\n            return newValue;\n          }, []);\n        } else {\n          newFormData = maxItems > 0 && data.length > maxItems ? data.slice(0, maxItems) : data;\n        }\n      }\n    } else if (\n      typeof oldSchemaItems === 'boolean' &&\n      typeof newSchemaItems === 'boolean' &&\n      oldSchemaItems === newSchemaItems\n    ) {\n      // If they are both booleans and have the same value just return the data as is otherwise fall-thru to undefined\n      newFormData = data;\n    }\n    // Also probably want to deal with `prefixItems` as tuples with the latest 2020 draft\n  }\n  return newFormData as T;\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { ALL_OF_KEY, DEPENDENCIES_KEY, ID_KEY, ITEMS_KEY, PROPERTIES_KEY, REF_KEY } from '../constants';\nimport isObject from '../isObject';\nimport { FormContextType, IdSchema, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\nimport getSchemaType from '../getSchemaType';\n\n/** An internal helper that generates an `IdSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param idPrefix - The prefix to use for the id\n * @param idSeparator - The separator to use for the path segments in the id\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `IdSchema` object for the `schema`\n */\nfunction toIdSchemaInternal<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  idPrefix: string,\n  idSeparator: string,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  _recurseList: S[] = []\n): IdSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(validator, schema, rootSchema, formData);\n    const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n    if (sameSchemaIndex === -1) {\n      return toIdSchemaInternal<T, S, F>(\n        validator,\n        _schema,\n        idPrefix,\n        idSeparator,\n        id,\n        rootSchema,\n        formData,\n        _recurseList.concat(_schema)\n      );\n    }\n  }\n  if (ITEMS_KEY in schema && !get(schema, [ITEMS_KEY, REF_KEY])) {\n    return toIdSchemaInternal<T, S, F>(\n      validator,\n      get(schema, ITEMS_KEY) as S,\n      idPrefix,\n      idSeparator,\n      id,\n      rootSchema,\n      formData,\n      _recurseList\n    );\n  }\n  const $id = id || idPrefix;\n  const idSchema: IdSchema = { $id } as IdSchema<T>;\n  if (getSchemaType<S>(schema) === 'object' && PROPERTIES_KEY in schema) {\n    for (const name in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, name]);\n      const fieldId = idSchema[ID_KEY] + idSeparator + name;\n      idSchema[name] = toIdSchemaInternal<T, S, F>(\n        validator,\n        isObject(field) ? field : {},\n        idPrefix,\n        idSeparator,\n        fieldId,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [name]),\n        _recurseList\n      );\n    }\n  }\n  return idSchema as IdSchema<T>;\n}\n\n/** Generates an `IdSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [idPrefix='root'] - The prefix to use for the id\n * @param [idSeparator='_'] - The separator to use for the path segments in the id\n * @returns - The `IdSchema` object for the `schema`\n */\nexport default function toIdSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  idPrefix = 'root',\n  idSeparator = '_'\n): IdSchema<T> {\n  return toIdSchemaInternal<T, S, F>(validator, schema, idPrefix, idSeparator, id, rootSchema, formData);\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport set from 'lodash/set';\n\nimport {\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  ADDITIONAL_PROPERTIES_KEY,\n  DEPENDENCIES_KEY,\n  ITEMS_KEY,\n  NAME_KEY,\n  ONE_OF_KEY,\n  PROPERTIES_KEY,\n  REF_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from '../constants';\nimport { FormContextType, PathSchema, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport retrieveSchema from './retrieveSchema';\n\n/** An internal helper that generates an `PathSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `PathSchema` object for the `schema`\n */\nfunction toPathSchemaInternal<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  name: string,\n  rootSchema?: S,\n  formData?: T,\n  _recurseList: S[] = []\n): PathSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(validator, schema, rootSchema, formData);\n    const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n    if (sameSchemaIndex === -1) {\n      return toPathSchemaInternal<T, S, F>(\n        validator,\n        _schema,\n        name,\n        rootSchema,\n        formData,\n        _recurseList.concat(_schema)\n      );\n    }\n  }\n\n  const pathSchema: PathSchema = {\n    [NAME_KEY]: name.replace(/^\\./, ''),\n  } as PathSchema;\n\n  if (ONE_OF_KEY in schema) {\n    const index = getClosestMatchingOption<T, S, F>(validator, rootSchema!, formData, schema.oneOf as S[], 0);\n    const _schema: S = schema.oneOf![index] as S;\n    return toPathSchemaInternal<T, S, F>(validator, _schema, name, rootSchema, formData, _recurseList);\n  }\n\n  if (ANY_OF_KEY in schema) {\n    const index = getClosestMatchingOption<T, S, F>(validator, rootSchema!, formData, schema.anyOf as S[], 0);\n    const _schema: S = schema.anyOf![index] as S;\n    return toPathSchemaInternal<T, S, F>(validator, _schema, name, rootSchema, formData, _recurseList);\n  }\n\n  if (ADDITIONAL_PROPERTIES_KEY in schema && schema[ADDITIONAL_PROPERTIES_KEY] !== false) {\n    set(pathSchema, RJSF_ADDITONAL_PROPERTIES_FLAG, true);\n  }\n\n  if (ITEMS_KEY in schema && Array.isArray(formData)) {\n    formData.forEach((element, i: number) => {\n      pathSchema[i] = toPathSchemaInternal<T, S, F>(\n        validator,\n        schema.items as S,\n        `${name}.${i}`,\n        rootSchema,\n        element,\n        _recurseList\n      );\n    });\n  } else if (PROPERTIES_KEY in schema) {\n    for (const property in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, property]);\n      pathSchema[property] = toPathSchemaInternal<T, S, F>(\n        validator,\n        field,\n        `${name}.${property}`,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [property]),\n        _recurseList\n      );\n    }\n  }\n  return pathSchema as PathSchema<T>;\n}\n\n/** Generates an `PathSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The `PathSchema` object for the `schema`\n */\nexport default function toPathSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  name = '',\n  rootSchema?: S,\n  formData?: T\n): PathSchema<T> {\n  return toPathSchemaInternal(validator, schema, name, rootSchema, formData);\n}\n","import deepEquals from './deepEquals';\nimport {\n  ErrorSchema,\n  FormContextType,\n  GlobalUISchemaOptions,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  SchemaUtilsType,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from './types';\nimport {\n  getDefaultFormState,\n  getDisplayLabel,\n  getClosestMatchingOption,\n  getFirstMatchingOption,\n  getMatchingOption,\n  isFilesArray,\n  isMultiSelect,\n  isSelect,\n  mergeValidationData,\n  retrieveSchema,\n  sanitizeDataForNewSchema,\n  toIdSchema,\n  toPathSchema,\n} from './schema';\n\n/** The `SchemaUtils` class provides a wrapper around the publicly exported APIs in the `utils/schema` directory such\n * that one does not have to explicitly pass the `validator` or `rootSchema` to each method. Since both the `validator`\n * and `rootSchema` generally does not change across a `Form`, this allows for providing a simplified set of APIs to the\n * `@rjsf/core` components and the various themes as well. This class implements the `SchemaUtilsType` interface.\n */\nclass SchemaUtils<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements SchemaUtilsType<T, S, F>\n{\n  rootSchema: S;\n  validator: ValidatorType<T, S, F>;\n\n  /** Constructs the `SchemaUtils` instance with the given `validator` and `rootSchema` stored as instance variables\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n   * @param rootSchema - The root schema that will be forwarded to all the APIs\n   */\n  constructor(validator: ValidatorType<T, S, F>, rootSchema: S) {\n    this.rootSchema = rootSchema;\n    this.validator = validator;\n  }\n\n  /** Returns the `ValidatorType` in the `SchemaUtilsType`\n   *\n   * @returns - The `ValidatorType`\n   */\n  getValidator() {\n    return this.validator;\n  }\n\n  /** Determines whether either the `validator` and `rootSchema` differ from the ones associated with this instance of\n   * the `SchemaUtilsType`. If either `validator` or `rootSchema` are falsy, then return false to prevent the creation\n   * of a new `SchemaUtilsType` with incomplete properties.\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be compared against the current one\n   * @param rootSchema - The root schema that will be compared against the current one\n   * @returns - True if the `SchemaUtilsType` differs from the given `validator` or `rootSchema`\n   */\n  doesSchemaUtilsDiffer(validator: ValidatorType<T, S, F>, rootSchema: S): boolean {\n    if (!validator || !rootSchema) {\n      return false;\n    }\n    return this.validator !== validator || !deepEquals(this.rootSchema, rootSchema);\n  }\n\n  /** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n   * computed to have defaults provided in the `schema`.\n   *\n   * @param schema - The schema for which the default state is desired\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n   *          If \"excludeObjectChildren\", pass `includeUndefinedValues` as false when computing defaults for any nested\n   *          object properties.\n   * @returns - The resulting `formData` with all the defaults provided\n   */\n  getDefaultFormState(\n    schema: S,\n    formData?: T,\n    includeUndefinedValues: boolean | 'excludeObjectChildren' = false\n  ): T | T[] | undefined {\n    return getDefaultFormState<T, S, F>(this.validator, schema, formData, this.rootSchema, includeUndefinedValues);\n  }\n\n  /** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n   * should be displayed in a UI.\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [uiSchema] - The UI schema from which to derive potentially displayable information\n   * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n   * @returns - True if the label should be displayed or false if it should not\n   */\n  getDisplayLabel(schema: S, uiSchema?: UiSchema<T, S, F>, globalOptions?: GlobalUISchemaOptions) {\n    return getDisplayLabel<T, S, F>(this.validator, schema, uiSchema, this.rootSchema, globalOptions);\n  }\n\n  /** Determines which of the given `options` provided most closely matches the `formData`.\n   * Returns the index of the option that is valid and is the closest match, or 0 if there is no match.\n   *\n   * The closest match is determined using the number of matching properties, and more heavily favors options with\n   * matching readOnly, default, or const values.\n   *\n   * @param formData - The form data associated with the schema\n   * @param options - The list of options that can be selected from\n   * @param [selectedOption] - The index of the currently selected option, defaulted to -1 if not specified\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n   */\n  getClosestMatchingOption(\n    formData: T | undefined,\n    options: S[],\n    selectedOption?: number,\n    discriminatorField?: string\n  ): number {\n    return getClosestMatchingOption<T, S, F>(\n      this.validator,\n      this.rootSchema,\n      formData,\n      options,\n      selectedOption,\n      discriminatorField\n    );\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n   * Always returns the first option if there is nothing that matches.\n   *\n   * @param formData - The current formData, if any, used to figure out a match\n   * @param options - The list of options to find a matching options from\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The firstindex of the matched option or 0 if none is available\n   */\n  getFirstMatchingOption(formData: T | undefined, options: S[], discriminatorField?: string): number {\n    return getFirstMatchingOption<T, S, F>(this.validator, formData, options, this.rootSchema, discriminatorField);\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n   * Deprecated, use `getFirstMatchingOption()` instead.\n   *\n   * @param formData - The current formData, if any, onto which to provide any missing defaults\n   * @param options - The list of options to find a matching options from\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The index of the matched option or 0 if none is available\n   * @deprecated\n   */\n  getMatchingOption(formData: T | undefined, options: S[], discriminatorField?: string) {\n    return getMatchingOption<T, S, F>(this.validator, formData, options, this.rootSchema, discriminatorField);\n  }\n\n  /** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n   *\n   * @param schema - The schema for which check for array of files flag is desired\n   * @param [uiSchema] - The UI schema from which to check the widget\n   * @returns - True if schema/uiSchema contains an array of files, otherwise false\n   */\n  isFilesArray(schema: S, uiSchema?: UiSchema<T, S, F>) {\n    return isFilesArray<T, S, F>(this.validator, schema, uiSchema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a multi-select\n   *\n   * @param schema - The schema for which check for a multi-select flag is desired\n   * @returns - True if schema contains a multi-select, otherwise false\n   */\n  isMultiSelect(schema: S) {\n    return isMultiSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a select\n   *\n   * @param schema - The schema for which check for a select flag is desired\n   * @returns - True if schema contains a select, otherwise false\n   */\n  isSelect(schema: S) {\n    return isSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in\n   * the two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n   * `getValidator().toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed,\n   * then `validationData` is returned.\n   *\n   * @param validationData - The current `ValidationData` into which to merge the additional errors\n   * @param [additionalErrorSchema] - The additional set of errors\n   * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n   * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n   *        removed in the next major release.\n   */\n  mergeValidationData(validationData: ValidationData<T>, additionalErrorSchema?: ErrorSchema<T>): ValidationData<T> {\n    return mergeValidationData<T, S, F>(this.validator, validationData, additionalErrorSchema);\n  }\n\n  /** Retrieves an expanded schema that has had all of its conditions, additional properties, references and\n   * dependencies resolved and merged into the `schema` given a `rawFormData` that is used to do the potentially\n   * recursive resolution.\n   *\n   * @param schema - The schema for which retrieving a schema is desired\n   * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n   * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n   */\n  retrieveSchema(schema: S, rawFormData?: T) {\n    return retrieveSchema<T, S, F>(this.validator, schema, this.rootSchema, rawFormData);\n  }\n\n  /** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the\n   * new schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the\n   * nature of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the\n   * old schemas that are non-existent in the new schema are set to `undefined`.\n   *\n   * @param [newSchema] - The new schema for which the data is being sanitized\n   * @param [oldSchema] - The old schema from which the data originated\n   * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n   * @returns - The new form data, with all the fields uniquely associated with the old schema set\n   *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n   */\n  sanitizeDataForNewSchema(newSchema?: S, oldSchema?: S, data?: any): T {\n    return sanitizeDataForNewSchema(this.validator, this.rootSchema, newSchema, oldSchema, data);\n  }\n\n  /** Generates an `IdSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [id] - The base id for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [idPrefix='root'] - The prefix to use for the id\n   * @param [idSeparator='_'] - The separator to use for the path segments in the id\n   * @returns - The `IdSchema` object for the `schema`\n   */\n  toIdSchema(schema: S, id?: string | null, formData?: T, idPrefix = 'root', idSeparator = '_'): IdSchema<T> {\n    return toIdSchema<T, S, F>(this.validator, schema, id, this.rootSchema, formData, idPrefix, idSeparator);\n  }\n\n  /** Generates an `PathSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [name] - The base name for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @returns - The `PathSchema` object for the `schema`\n   */\n  toPathSchema(schema: S, name?: string, formData?: T): PathSchema<T> {\n    return toPathSchema<T, S, F>(this.validator, schema, name, this.rootSchema, formData);\n  }\n}\n\n/** Creates a `SchemaUtilsType` interface that is based around the given `validator` and `rootSchema` parameters. The\n * resulting interface implementation will forward the `validator` and `rootSchema` to all the wrapped APIs.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @returns - An implementation of a `SchemaUtilsType` interface\n */\nexport default function createSchemaUtils<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, rootSchema: S): SchemaUtilsType<T, S, F> {\n  return new SchemaUtils<T, S, F>(validator, rootSchema);\n}\n","/** Given the `FileReader.readAsDataURL()` based `dataURI` extracts that data into an actual Blob along with the name\n * of that Blob if provided in the URL. If no name is provided, then the name falls back to `unknown`.\n *\n * @param dataURI - The `DataUrl` potentially containing name and raw data to be converted to a Blob\n * @returns - an object containing a Blob and its name, extracted from the URI\n */\nexport default function dataURItoBlob(dataURI: string) {\n  // Split metadata from data\n  const splitted: string[] = dataURI.split(',');\n  // Split params\n  const params: string[] = splitted[0].split(';');\n  // Get mime-type from params\n  const type: string = params[0].replace('data:', '');\n  // Filter the name property from params\n  const properties = params.filter((param) => {\n    return param.split('=')[0] === 'name';\n  });\n  // Look for the name and use unknown if no name property.\n  let name: string;\n  if (properties.length !== 1) {\n    name = 'unknown';\n  } else {\n    // Because we filtered out the other property,\n    // we only have the name case here, which we decode to make it human-readable\n    name = decodeURI(properties[0].split('=')[1]);\n  }\n\n  // Built the Uint8Array Blob parameter from the base64 string.\n  try {\n    const binary = atob(splitted[1]);\n    const array = [];\n    for (let i = 0; i < binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    // Create the blob object\n    const blob = new window.Blob([new Uint8Array(array)], { type });\n\n    return { blob, name };\n  } catch (error) {\n    return { blob: { size: 0, type: (error as Error).message }, name: dataURI };\n  }\n}\n","/** Potentially substitutes all replaceable parameters with the associated value(s) from the `params` if available. When\n * a `params` array is provided, each value in the array is used to replace any of the replaceable parameters in the\n * `inputString` using the `%1`, `%2`, etc. replacement specifiers.\n *\n * @param inputString - The string which will be potentially updated with replacement parameters\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The updated string with any replacement specifiers replaced\n */\nexport default function replaceStringParameters(inputString: string, params?: string[]) {\n  let output = inputString;\n  if (Array.isArray(params)) {\n    const parts = output.split(/(%\\d)/);\n    params.forEach((param, index) => {\n      const partIndex = parts.findIndex((part) => part === `%${index + 1}`);\n      if (partIndex >= 0) {\n        parts[partIndex] = param;\n      }\n    });\n    output = parts.join('');\n  }\n  return output;\n}\n","import { TranslatableString } from './enums';\nimport replaceStringParameters from './replaceStringParameters';\n\n/** Translates a `TranslatableString` value `stringToTranslate` into english. When a `params` array is provided, each\n * value in the array is used to replace any of the replaceable parameters in the `stringToTranslate` using the `%1`,\n * `%2`, etc. replacement specifiers.\n *\n * @param stringToTranslate - The `TranslatableString` value to convert to english\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The `stringToTranslate` itself with any replaceable parameter values substituted\n */\nexport default function englishStringTranslator(stringToTranslate: TranslatableString, params?: string[]): string {\n  return replaceStringParameters(stringToTranslate, params);\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the value(s) from `allEnumOptions` at the index(es) provided by `valueIndex`. If `valueIndex` is not an\n * array AND the index is not valid for `allEnumOptions`, `emptyValue` is returned. If `valueIndex` is an array, AND it\n * contains an invalid index, the returned array will have the resulting undefined values filtered out, leaving only\n * valid values or in the worst case, an empty array.\n *\n * @param valueIndex - The index(es) of the value(s) that should be returned\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [emptyValue] - The value to return when the non-array `valueIndex` does not refer to a real option\n * @returns - The single or list of values specified by the single or list of indexes if they are valid. Otherwise,\n *        `emptyValue` or an empty list.\n */\nexport default function enumOptionsValueForIndex<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number | Array<string | number>,\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  emptyValue?: EnumOptionsType<S>['value']\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  if (Array.isArray(valueIndex)) {\n    return valueIndex.map((index) => enumOptionsValueForIndex(index, allEnumOptions)).filter((val) => val);\n  }\n  // So Number(null) and Number('') both return 0, so use emptyValue for those two values\n  const index = valueIndex === '' || valueIndex === null ? -1 : Number(valueIndex);\n  const option = allEnumOptions[index];\n  return option ? option.value : emptyValue;\n}\n","import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n\n/** Removes the enum option value at the `valueIndex` from the currently `selected` (list of) value(s). If `selected` is\n * a list, then that list is updated to remove the enum option value with the `valueIndex` in `allEnumOptions`. If it is\n * a single value, then if the enum option value with the `valueIndex` in `allEnumOptions` matches `selected`, undefined\n * is returned, otherwise the `selected` value is returned.\n *\n * @param valueIndex - The index of the value to be removed from the selected list or single value\n * @param selected - The current (list of) selected value(s)\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated `selected` with the enum option value at `valueIndex` in `allEnumOptions` removed from it,\n *        unless `selected` is a single value. In that case, if the `valueIndex` value matches `selected`, returns\n *        undefined, otherwise `selected`.\n */\nexport default function enumOptionsDeselectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected?: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (Array.isArray(selected)) {\n    return selected.filter((v) => !isEqual(v, value));\n  }\n  return isEqual(value, selected) ? undefined : selected;\n}\n","import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Determines whether the given `value` is (one of) the `selected` value(s).\n *\n * @param value - The value being checked to see if it is selected\n * @param selected - The current selected value or list of values\n * @returns - true if the `value` is one of the `selected` ones, false otherwise\n */\nexport default function enumOptionsIsSelected<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'],\n  selected: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][]\n) {\n  if (Array.isArray(selected)) {\n    return selected.some((sel) => isEqual(sel, value));\n  }\n  return isEqual(selected, value);\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsIsSelected from './enumOptionsIsSelected';\n\n/** Returns the index(es) of the options in `allEnumOptions` whose value(s) match the ones in `value`. All the\n * `enumOptions` are filtered based on whether they are a \"selected\" `value` and the index of each selected one is then\n * stored in an array. If `multiple` is true, that array is returned, otherwise the first element in the array is\n * returned.\n *\n * @param value - The single value or list of values for which indexes are desired\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [multiple=false] - Optional flag, if true will return a list of index, otherwise a single one\n * @returns - A single string index for the first `value` in `allEnumOptions`, if not `multiple`. Otherwise, the list\n *        of indexes for (each of) the value(s) in `value`.\n */\nexport default function enumOptionsIndexForValue<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  multiple = false\n): string | string[] | undefined {\n  const selectedIndexes: string[] = allEnumOptions\n    .map((opt, index) => (enumOptionsIsSelected(opt.value, value) ? String(index) : undefined))\n    .filter((opt) => typeof opt !== 'undefined') as string[];\n  if (!multiple) {\n    return selectedIndexes[0];\n  }\n  return selectedIndexes;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n\n/** Add the enum option value at the `valueIndex` to the list of `selected` values in the proper order as defined by\n * `allEnumOptions`\n *\n * @param valueIndex - The index of the value that should be selected\n * @param selected - The current list of selected values\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated list of selected enum values with enum value at the `valueIndex` added to it\n */\nexport default function enumOptionsSelectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected: EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n) {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (value) {\n    const index = allEnumOptions.findIndex((opt) => value === opt.value);\n    const all = allEnumOptions.map(({ value: val }) => val);\n    const updated = selected.slice(0, index).concat(value, selected.slice(index));\n    // As inserting values at predefined index positions doesn't work with empty\n    // arrays, we need to reorder the updated selection to match the initial order\n    return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n  }\n  return selected;\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { ErrorSchema } from './types';\nimport { ERRORS_KEY } from './constants';\n\n/** The `ErrorSchemaBuilder<T>` is used to build an `ErrorSchema<T>` since the definition of the `ErrorSchema` type is\n * designed for reading information rather than writing it. Use this class to add, replace or clear errors in an error\n * schema by using either dotted path or an array of path names. Once you are done building the `ErrorSchema`, you can\n * get the result and/or reset all the errors back to an initial set and start again.\n */\nexport default class ErrorSchemaBuilder<T = any> {\n  /** The error schema being built\n   *\n   * @private\n   */\n  private errorSchema: ErrorSchema<T> = {};\n\n  /** Construct an `ErrorSchemaBuilder` with an optional initial set of errors in an `ErrorSchema`.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   */\n  constructor(initialSchema?: ErrorSchema<T>) {\n    this.resetAllErrors(initialSchema);\n  }\n\n  /** Returns the `ErrorSchema` that has been updated by the methods of the `ErrorSchemaBuilder`\n   */\n  get ErrorSchema() {\n    return this.errorSchema;\n  }\n\n  /** Will get an existing `ErrorSchema` at the specified `pathOfError` or create and return one.\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The error block for the given `pathOfError` or the root if not provided\n   * @private\n   */\n  private getOrCreateErrorBlock(pathOfError?: string | string[]) {\n    const hasPath = (Array.isArray(pathOfError) && pathOfError.length > 0) || typeof pathOfError === 'string';\n    let errorBlock: ErrorSchema = hasPath ? get(this.errorSchema, pathOfError) : this.errorSchema;\n    if (!errorBlock && pathOfError) {\n      errorBlock = {};\n      set(this.errorSchema, pathOfError, errorBlock);\n    }\n    return errorBlock;\n  }\n\n  /** Resets all errors in the `ErrorSchemaBuilder` back to the `initialSchema` if provided, otherwise an empty set.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  resetAllErrors(initialSchema?: ErrorSchema<T>) {\n    this.errorSchema = initialSchema ? cloneDeep(initialSchema) : {};\n    return this;\n  }\n\n  /** Adds the `errorOrList` to the list of errors in the `ErrorSchema` at either the root level or the location within\n   * the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to add into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  addErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    let errorsList = get(errorBlock, ERRORS_KEY);\n    if (!Array.isArray(errorsList)) {\n      errorsList = [];\n      errorBlock[ERRORS_KEY] = errorsList;\n    }\n\n    if (Array.isArray(errorOrList)) {\n      errorsList.push(...errorOrList);\n    } else {\n      errorsList.push(errorOrList);\n    }\n    return this;\n  }\n\n  /** Sets/replaces the `errorOrList` as the error(s) in the `ErrorSchema` at either the root level or the location\n   * within the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to set into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to set the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  setErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    // Effectively clone the array being given to prevent accidental outside manipulation of the given list\n    const listToAdd = Array.isArray(errorOrList) ? [...errorOrList] : [errorOrList];\n    set(errorBlock, ERRORS_KEY, listToAdd);\n    return this;\n  }\n\n  /** Clears the error(s) in the `ErrorSchema` at either the root level or the location within the schema described by\n   * the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to clear the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  clearErrors(pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    set(errorBlock, ERRORS_KEY, []);\n    return this;\n  }\n}\n","import { RangeSpecType, StrictRJSFSchema } from './types';\nimport { RJSFSchema } from './types';\n\n/** Extracts the range spec information `{ step?: number, min?: number, max?: number }` that can be spread onto an HTML\n * input from the range analog in the schema `{ multipleOf?: number, minimum?: number, maximum?: number }`.\n *\n * @param schema - The schema from which to extract the range spec\n * @returns - A range specification from the schema\n */\nexport default function rangeSpec<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  const spec: RangeSpecType = {};\n  if (schema.multipleOf) {\n    spec.step = schema.multipleOf;\n  }\n  if (schema.minimum || schema.minimum === 0) {\n    spec.min = schema.minimum;\n  }\n  if (schema.maximum || schema.maximum === 0) {\n    spec.max = schema.maximum;\n  }\n  return spec;\n}\n","import rangeSpec from './rangeSpec';\nimport { FormContextType, InputPropsType, RJSFSchema, StrictRJSFSchema, UIOptionsType } from './types';\n\n/** Using the `schema`, `defaultType` and `options`, extract out the props for the <input> element that make sense.\n *\n * @param schema - The schema for the field provided by the widget\n * @param [defaultType] - The default type, if any, for the field provided by the widget\n * @param [options={}] - The UI Options for the field provided by the widget\n * @param [autoDefaultStepAny=true] - Determines whether to auto-default step=any when the type is number and no step\n * @returns - The extracted `InputPropsType` object\n */\nexport default function getInputProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  defaultType?: string,\n  options: UIOptionsType<T, S, F> = {},\n  autoDefaultStepAny = true\n): InputPropsType {\n  const inputProps: InputPropsType = {\n    type: defaultType || 'text',\n    ...rangeSpec(schema),\n  };\n\n  // If options.inputType is set use that as the input type\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!defaultType) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === 'number') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined and we are auto-defaulting the \"any\" step\n      if (autoDefaultStepAny && inputProps.step === undefined) {\n        // Setting step to 'any' fixes a bug in Safari where decimals are not\n        // allowed in number inputs\n        inputProps.step = 'any';\n      }\n    } else if (schema.type === 'integer') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined\n      if (inputProps.step === undefined) {\n        // Since this is integer, you always want to step up or down in multiples of 1\n        inputProps.step = 1;\n      }\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  }\n\n  return inputProps;\n}\n","import { SUBMIT_BTN_OPTIONS_KEY } from './constants';\nimport getUiOptions from './getUiOptions';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema, UISchemaSubmitButtonOptions } from './types';\n\n/** The default submit button options, exported for testing purposes\n */\nexport const DEFAULT_OPTIONS: UISchemaSubmitButtonOptions = {\n  props: {\n    disabled: false,\n  },\n  submitText: 'Submit',\n  norender: false,\n};\n\n/** Extracts any `ui:submitButtonOptions` from the `uiSchema` and merges them onto the `DEFAULT_OPTIONS`\n *\n * @param [uiSchema={}] - the UI Schema from which to extract submit button props\n * @returns - The merging of the `DEFAULT_OPTIONS` with any custom ones\n */\nexport default function getSubmitButtonOptions<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}): UISchemaSubmitButtonOptions {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  if (uiOptions && uiOptions[SUBMIT_BTN_OPTIONS_KEY]) {\n    const options = uiOptions[SUBMIT_BTN_OPTIONS_KEY] as UISchemaSubmitButtonOptions;\n    return { ...DEFAULT_OPTIONS, ...options };\n  }\n\n  return DEFAULT_OPTIONS;\n}\n","import { FormContextType, TemplatesType, Registry, UIOptionsType, StrictRJSFSchema, RJSFSchema } from './types';\n\n/** Returns the template with the given `name` from either the `uiSchema` if it is defined or from the `registry`\n * otherwise. NOTE, since `ButtonTemplates` are not overridden in `uiSchema` only those in the `registry` are returned.\n *\n * @param name - The name of the template to fetch, restricted to the keys of `TemplatesType`\n * @param registry - The `Registry` from which to read the template\n * @param [uiOptions={}] - The `UIOptionsType` from which to read an alternate template\n * @returns - The template from either the `uiSchema` or `registry` for the `name`\n */\nexport default function getTemplate<\n  Name extends keyof TemplatesType<T, S, F>,\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(name: Name, registry: Registry<T, S, F>, uiOptions: UIOptionsType<T, S, F> = {}): TemplatesType<T, S, F>[Name] {\n  const { templates } = registry;\n  if (name === 'ButtonTemplates') {\n    return templates[name];\n  }\n  return (\n    // Evaluating uiOptions[name] results in TS2590: Expression produces a union type that is too complex to represent\n    // To avoid that, we cast uiOptions to `any` before accessing the name field\n    ((uiOptions as any)[name] as TemplatesType<T, S, F>[Name]) || templates[name]\n  );\n}\n","import { createElement } from 'react';\nimport ReactIs from 'react-is';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { FormContextType, RJSFSchema, Widget, RegistryWidgetsType, StrictRJSFSchema } from './types';\nimport getSchemaType from './getSchemaType';\n\n/** The map of schema types to widget type to widget name\n */\nconst widgetMap: { [k: string]: { [j: string]: string } } = {\n  boolean: {\n    checkbox: 'CheckboxWidget',\n    radio: 'RadioWidget',\n    select: 'SelectWidget',\n    hidden: 'HiddenWidget',\n  },\n  string: {\n    text: 'TextWidget',\n    password: 'PasswordWidget',\n    email: 'EmailWidget',\n    hostname: 'TextWidget',\n    ipv4: 'TextWidget',\n    ipv6: 'TextWidget',\n    uri: 'URLWidget',\n    'data-url': 'FileWidget',\n    radio: 'RadioWidget',\n    select: 'SelectWidget',\n    textarea: 'TextareaWidget',\n    hidden: 'HiddenWidget',\n    date: 'DateWidget',\n    datetime: 'DateTimeWidget',\n    'date-time': 'DateTimeWidget',\n    'alt-date': 'AltDateWidget',\n    'alt-datetime': 'AltDateTimeWidget',\n    time: 'TimeWidget',\n    color: 'ColorWidget',\n    file: 'FileWidget',\n  },\n  number: {\n    text: 'TextWidget',\n    select: 'SelectWidget',\n    updown: 'UpDownWidget',\n    range: 'RangeWidget',\n    radio: 'RadioWidget',\n    hidden: 'HiddenWidget',\n  },\n  integer: {\n    text: 'TextWidget',\n    select: 'SelectWidget',\n    updown: 'UpDownWidget',\n    range: 'RangeWidget',\n    radio: 'RadioWidget',\n    hidden: 'HiddenWidget',\n  },\n  array: {\n    select: 'SelectWidget',\n    checkboxes: 'CheckboxesWidget',\n    files: 'FileWidget',\n    hidden: 'HiddenWidget',\n  },\n};\n\n/** Wraps the given widget with stateless functional component that will merge any `defaultProps.options` with the\n * `options` that are provided in the props. It will add the wrapper component as a `MergedWidget` property onto the\n * `Widget` so that future attempts to wrap `AWidget` will return the already existing wrapper.\n *\n * @param AWidget - A widget that will be wrapped or one that is already wrapped\n * @returns - The wrapper widget\n */\nfunction mergeWidgetOptions<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  AWidget: Widget<T, S, F>\n) {\n  let MergedWidget: Widget<T, S, F> | undefined = get(AWidget, 'MergedWidget');\n  // cache return value as property of widget for proper react reconciliation\n  if (!MergedWidget) {\n    const defaultOptions = (AWidget.defaultProps && AWidget.defaultProps.options) || {};\n    MergedWidget = ({ options, ...props }) => {\n      return <AWidget options={{ ...defaultOptions, ...options }} {...props} />;\n    };\n    set(AWidget, 'MergedWidget', MergedWidget);\n  }\n  return MergedWidget;\n}\n\n/** Given a schema representing a field to render and either the name or actual `Widget` implementation, returns the\n * React component that is used to render the widget. If the `widget` is already a React component, then it is wrapped\n * with a `MergedWidget`. Otherwise an attempt is made to look up the widget inside of the `registeredWidgets` map based\n * on the schema type and `widget` name. If no widget component can be found an `Error` is thrown.\n *\n * @param schema - The schema for the field\n * @param [widget] - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - The `Widget` component to use\n * @throws - An error if there is no `Widget` component that can be returned\n */\nexport default function getWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  widget?: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n): Widget<T, S, F> {\n  const type = getSchemaType(schema);\n\n  if (\n    typeof widget === 'function' ||\n    (widget && ReactIs.isForwardRef(createElement(widget))) ||\n    ReactIs.isMemo(widget)\n  ) {\n    return mergeWidgetOptions<T, S, F>(widget as Widget<T, S, F>);\n  }\n\n  if (typeof widget !== 'string') {\n    throw new Error(`Unsupported widget definition: ${typeof widget}`);\n  }\n\n  if (widget in registeredWidgets) {\n    const registeredWidget = registeredWidgets[widget];\n    return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n  }\n\n  if (typeof type === 'string') {\n    if (!(type in widgetMap)) {\n      throw new Error(`No widget for type '${type}'`);\n    }\n\n    if (widget in widgetMap[type]) {\n      const registeredWidget = registeredWidgets[widgetMap[type][widget]];\n      return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n    }\n  }\n\n  throw new Error(`No widget '${widget}' for type '${type}'`);\n}\n","import getWidget from './getWidget';\nimport { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema, Widget } from './types';\n\n/** Detects whether the `widget` exists for the `schema` with the associated `registryWidgets` and returns true if it\n * does, or false if it doesn't.\n *\n * @param schema - The schema for the field\n * @param widget - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - True if the widget exists, false otherwise\n */\nexport default function hasWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  widget: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n) {\n  try {\n    getWidget(schema, widget, registeredWidgets);\n    return true;\n  } catch (e) {\n    const err: Error = e as Error;\n    if (err.message && (err.message.startsWith('No widget') || err.message.startsWith('Unsupported widget'))) {\n      return false;\n    }\n    throw e;\n  }\n}\n","import isString from 'lodash/isString';\n\nimport { IdSchema } from './types';\nimport { ID_KEY } from './constants';\n\n/** Generates a consistent `id` pattern for a given `id` and a `suffix`\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param suffix - The suffix to append to the id\n */\nfunction idGenerator<T = any>(id: IdSchema<T> | string, suffix: string) {\n  const theId = isString(id) ? id : id[ID_KEY];\n  return `${theId}__${suffix}`;\n}\n/** Return a consistent `id` for the field description element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field description element from the given `id`\n */\nexport function descriptionId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'description');\n}\n\n/** Return a consistent `id` for the field error element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field error element from the given `id`\n */\nexport function errorId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'error');\n}\n\n/** Return a consistent `id` for the field examples element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field examples element from the given `id`\n */\nexport function examplesId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'examples');\n}\n\n/** Return a consistent `id` for the field help element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field help element from the given `id`\n */\nexport function helpId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'help');\n}\n\n/** Return a consistent `id` for the field title element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field title element from the given `id`\n */\nexport function titleId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'title');\n}\n\n/** Return a list of element ids that contain additional information about the field that can be used to as the aria\n * description of the field. This is correctly omitting `titleId` which would be \"labeling\" rather than \"describing\" the\n * element.\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param [includeExamples=false] - Optional flag, if true, will add the `examplesId` into the list\n * @returns - The string containing the list of ids for use in an `aria-describedBy` attribute\n */\nexport function ariaDescribedByIds<T = any>(id: IdSchema<T> | string, includeExamples = false) {\n  const examples = includeExamples ? ` ${examplesId<T>(id)}` : '';\n  return `${errorId<T>(id)} ${descriptionId<T>(id)} ${helpId<T>(id)}${examples}`;\n}\n\n/** Return a consistent `id` for the `optionIndex`s of a `Radio` or `Checkboxes` widget\n *\n * @param id - The id of the parent component for the option\n * @param optionIndex - The index of the option for which the id is desired\n * @returns - An id for the option index based on the parent `id`\n */\nexport function optionId(id: string, optionIndex: number) {\n  return `${id}-${optionIndex}`;\n}\n","import { ReactElement } from 'react';\n\n/** Helper function that will return the value to use for a widget `label` based on `hideLabel`. The `fallback` is used\n * as the return value from the function when `hideLabel` is true. Due to the implementation of theme components, it\n * may be necessary to return something other than `undefined` to cause the theme component to not render a label. Some\n * themes require may `false` and others may require an empty string.\n *\n * @param [label] - The label string or component to render when not hidden\n * @param [hideLabel] - Flag, if true, will cause the label to be hidden\n * @param [fallback] - One of 3 values, `undefined` (the default), `false` or an empty string\n * @returns - `fallback` if `hideLabel` is true, otherwise `label`\n */\nexport function labelValue(label?: string | ReactElement, hideLabel?: boolean, fallback?: ''): undefined | string;\nexport default function labelValue(label?: string | ReactElement, hideLabel?: boolean, fallback?: false | '') {\n  return hideLabel ? fallback : label;\n}\n","/** Converts a local Date string into a UTC date string\n *\n * @param dateString - The string representation of a date as accepted by the `Date()` constructor\n * @returns - A UTC date string if `dateString` is truthy, otherwise undefined\n */\nexport default function localToUTC(dateString: string) {\n  return dateString ? new Date(dateString).toJSON() : undefined;\n}\n","import { CONST_KEY, ENUM_KEY } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the constant value from the schema when it is either a single value enum or has a const key. Otherwise\n * throws an error.\n *\n * @param schema - The schema from which to obtain the constant value\n * @returns - The constant value for the schema\n * @throws - Error when the schema does not have a constant value\n */\nexport default function toConstant<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  if (ENUM_KEY in schema && Array.isArray(schema.enum) && schema.enum.length === 1) {\n    return schema.enum[0];\n  }\n  if (CONST_KEY in schema) {\n    return schema.const;\n  }\n  throw new Error('schema cannot be inferred as a constant');\n}\n","import toConstant from './toConstant';\nimport { RJSFSchema, EnumOptionsType, StrictRJSFSchema } from './types';\n\n/** Gets the list of options from the schema. If the schema has an enum list, then those enum values are returned. The\n * labels for the options will be extracted from the non-standard, RJSF-deprecated `enumNames` if it exists, otherwise\n * the label will be the same as the `value`. If the schema has a `oneOf` or `anyOf`, then the value is the list of\n * `const` values from the schema and the label is either the `schema.title` or the value.\n *\n * @param schema - The schema from which to extract the options list\n * @returns - The list of options from the schema\n */\nexport default function optionsList<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): EnumOptionsType<S>[] | undefined {\n  // enumNames was deprecated in v5 and is intentionally omitted from the RJSFSchema type.\n  // Cast the type to include enumNames so the feature still works.\n  const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n  if (schemaWithEnumNames.enumNames && process.env.NODE_ENV !== 'production') {\n    console.warn('The enumNames property is deprecated and may be removed in a future major release.');\n  }\n  if (schema.enum) {\n    return schema.enum.map((value, i) => {\n      const label = (schemaWithEnumNames.enumNames && schemaWithEnumNames.enumNames[i]) || String(value);\n      return { label, value };\n    });\n  }\n  const altSchemas = schema.oneOf || schema.anyOf;\n  return (\n    altSchemas &&\n    altSchemas.map((aSchemaDef) => {\n      const aSchema = aSchemaDef as S;\n      const value = toConstant(aSchema);\n      const label = aSchema.title || String(value);\n      return {\n        schema: aSchema,\n        label,\n        value,\n      };\n    })\n  );\n}\n","import { GenericObjectType } from './types';\n\n/** Given a list of `properties` and an `order` list, returns a list that contains the `properties` ordered correctly.\n * If `order` is not an array, then the untouched `properties` list is returned. Otherwise `properties` is ordered per\n * the `order` list. If `order` contains a '*' then any `properties` that are not mentioned explicity in `order` will be\n * places in the location of the `*`.\n *\n * @param properties - The list of property keys to be ordered\n * @param order - An array of property keys to be ordered first, with an optional '*' property\n * @returns - A list with the `properties` ordered\n * @throws - Error when the properties cannot be ordered correctly\n */\nexport default function orderProperties(properties: string[], order?: string[]): string[] {\n  if (!Array.isArray(order)) {\n    return properties;\n  }\n\n  const arrayToHash = (arr: string[]) =>\n    arr.reduce((prev: GenericObjectType, curr) => {\n      prev[curr] = true;\n      return prev;\n    }, {});\n  const errorPropList = (arr: string[]) =>\n    arr.length > 1 ? `properties '${arr.join(\"', '\")}'` : `property '${arr[0]}'`;\n  const propertyHash = arrayToHash(properties);\n  const orderFiltered = order.filter((prop) => prop === '*' || propertyHash[prop]);\n  const orderHash = arrayToHash(orderFiltered);\n\n  const rest = properties.filter((prop: string) => !orderHash[prop]);\n  const restIndex = orderFiltered.indexOf('*');\n  if (restIndex === -1) {\n    if (rest.length) {\n      throw new Error(`uiSchema order list does not contain ${errorPropList(rest)}`);\n    }\n    return orderFiltered;\n  }\n  if (restIndex !== orderFiltered.lastIndexOf('*')) {\n    throw new Error('uiSchema order list contains more than one wildcard item');\n  }\n\n  const complete = [...orderFiltered];\n  complete.splice(restIndex, 1, ...rest);\n  return complete;\n}\n","/** Returns a string representation of the `num` that is padded with leading \"0\"s if necessary\n *\n * @param num - The number to pad\n * @param width - The width of the string at which no lead padding is necessary\n * @returns - The number converted to a string with leading zero padding if the number of digits is less than `width`\n */\nexport default function pad(num: number, width: number) {\n  let s = String(num);\n  while (s.length < width) {\n    s = '0' + s;\n  }\n  return s;\n}\n","import { DateObject } from './types';\n\n/** Parses the `dateString` into a `DateObject`, including the time information when `includeTime` is true\n *\n * @param dateString - The date string to parse into a DateObject\n * @param [includeTime=true] - Optional flag, if false, will not include the time data into the object\n * @returns - The date string converted to a `DateObject`\n * @throws - Error when the date cannot be parsed from the string\n */\nexport default function parseDateString(dateString?: string, includeTime = true): DateObject {\n  if (!dateString) {\n    return {\n      year: -1,\n      month: -1,\n      day: -1,\n      hour: includeTime ? -1 : 0,\n      minute: includeTime ? -1 : 0,\n      second: includeTime ? -1 : 0,\n    };\n  }\n  const date = new Date(dateString);\n  if (Number.isNaN(date.getTime())) {\n    throw new Error('Unable to parse date ' + dateString);\n  }\n  return {\n    year: date.getUTCFullYear(),\n    month: date.getUTCMonth() + 1, // oh you, javascript.\n    day: date.getUTCDate(),\n    hour: includeTime ? date.getUTCHours() : 0,\n    minute: includeTime ? date.getUTCMinutes() : 0,\n    second: includeTime ? date.getUTCSeconds() : 0,\n  };\n}\n","import { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Check to see if a `schema` specifies that a value must be true. This happens when:\n * - `schema.const` is truthy\n * - `schema.enum` == `[true]`\n * - `schema.anyOf` or `schema.oneOf` has a single value which recursively returns true\n * - `schema.allOf` has at least one value which recursively returns true\n *\n * @param schema - The schema to check\n * @returns - True if the schema specifies a value that must be true, false otherwise\n */\nexport default function schemaRequiresTrueValue<S extends StrictRJSFSchema = RJSFSchema>(schema: S): boolean {\n  // Check if const is a truthy value\n  if (schema.const) {\n    return true;\n  }\n\n  // Check if an enum has a single value of true\n  if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {\n    return true;\n  }\n\n  // If anyOf has a single value, evaluate the subschema\n  if (schema.anyOf && schema.anyOf.length === 1) {\n    return schemaRequiresTrueValue(schema.anyOf[0] as S);\n  }\n\n  // If oneOf has a single value, evaluate the subschema\n  if (schema.oneOf && schema.oneOf.length === 1) {\n    return schemaRequiresTrueValue(schema.oneOf[0] as S);\n  }\n\n  // Evaluate each subschema in allOf, to see if one of them requires a true value\n  if (schema.allOf) {\n    const schemaSome = (subSchema: S['additionalProperties']) => schemaRequiresTrueValue(subSchema as S);\n    return schema.allOf.some(schemaSome);\n  }\n\n  return false;\n}\n","import React from 'react';\n\nimport deepEquals from './deepEquals';\n\n/** Determines whether the given `component` should be rerendered by comparing its current set of props and state\n * against the next set. If either of those two sets are not the same, then the component should be rerendered.\n *\n * @param component - A React component being checked\n * @param nextProps - The next set of props against which to check\n * @param nextState - The next set of state against which to check\n * @returns - True if the component should be re-rendered, false otherwise\n */\nexport default function shouldRender(component: React.Component, nextProps: any, nextState: any) {\n  const { props, state } = component;\n  return !deepEquals(props, nextProps) || !deepEquals(state, nextState);\n}\n","import { DateObject } from './types';\n\n/** Returns a UTC date string for the given `dateObject`. If `time` is false, then the time portion of the string is\n * removed.\n *\n * @param dateObject - The `DateObject` to convert to a date string\n * @param [time=true] - Optional flag used to remove the time portion of the date string if false\n * @returns - The UTC date string\n */\nexport default function toDateString(dateObject: DateObject, time = true) {\n  const { year, month, day, hour = 0, minute = 0, second = 0 } = dateObject;\n  const utcTime = Date.UTC(year, month - 1, day, hour, minute, second);\n  const datetime = new Date(utcTime).toJSON();\n  return time ? datetime : datetime.slice(0, 10);\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { ErrorSchema, GenericObjectType, RJSFValidationError } from './types';\n\n/** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n *\n * @param errorSchema - The `ErrorSchema` instance to convert\n * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n * @returns - The list of `RJSFValidationErrors` extracted from the `errorSchema`\n */\nexport default function toErrorList<T = any>(\n  errorSchema?: ErrorSchema<T>,\n  fieldPath: string[] = []\n): RJSFValidationError[] {\n  if (!errorSchema) {\n    return [];\n  }\n  let errorList: RJSFValidationError[] = [];\n  if (ERRORS_KEY in errorSchema) {\n    errorList = errorList.concat(\n      errorSchema[ERRORS_KEY]!.map((message: string) => {\n        const property = `.${fieldPath.join('.')}`;\n        return {\n          property,\n          message,\n          stack: `${property} ${message}`,\n        };\n      })\n    );\n  }\n  return Object.keys(errorSchema).reduce((acc, key) => {\n    if (key !== ERRORS_KEY) {\n      const childSchema = (errorSchema as GenericObjectType)[key];\n      if (isPlainObject(childSchema)) {\n        acc = acc.concat(toErrorList(childSchema, [...fieldPath, key]));\n      }\n    }\n    return acc;\n  }, errorList);\n}\n","import toPath from 'lodash/toPath';\n\nimport { ErrorSchema, RJSFValidationError } from './types';\nimport ErrorSchemaBuilder from './ErrorSchemaBuilder';\n\n/** Transforms a rjsf validation errors list:\n * [\n *   {property: '.level1.level2[2].level3', message: 'err a'},\n *   {property: '.level1.level2[2].level3', message: 'err b'},\n *   {property: '.level1.level2[4].level3', message: 'err b'},\n * ]\n * Into an error tree:\n * {\n *   level1: {\n *     level2: {\n *       2: {level3: {errors: ['err a', 'err b']}},\n *       4: {level3: {errors: ['err b']}},\n *     }\n *   }\n * };\n *\n * @param errors - The list of RJSFValidationError objects\n * @returns - The `ErrorSchema` built from the list of `RJSFValidationErrors`\n */\nexport default function toErrorSchema<T = any>(errors: RJSFValidationError[]): ErrorSchema<T> {\n  const builder = new ErrorSchemaBuilder<T>();\n  if (errors.length) {\n    errors.forEach((error) => {\n      const { property, message } = error;\n      // When the property is the root element, just use an empty array for the path\n      const path = property === '.' ? [] : toPath(property);\n      // If the property is at the root (.level1) then toPath creates\n      // an empty array element at the first index. Remove it.\n      if (path.length > 0 && path[0] === '') {\n        path.splice(0, 1);\n      }\n      if (message) {\n        builder.addErrors(message, path);\n      }\n    });\n  }\n  return builder.ErrorSchema;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ErrorSchema, FormValidation, GenericObjectType } from './types';\n\n/** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError()` functions from it\n *\n * @param errorHandler - The `FormValidation` error handling structure\n * @returns - The `ErrorSchema` resulting from the stripping of the `addError()` function\n */\nexport default function unwrapErrorHandler<T = any>(errorHandler: FormValidation<T>): ErrorSchema<T> {\n  return Object.keys(errorHandler).reduce((acc, key) => {\n    if (key === 'addError') {\n      return acc;\n    } else {\n      const childSchema = (errorHandler as GenericObjectType)[key];\n      if (isPlainObject(childSchema)) {\n        return {\n          ...acc,\n          [key]: unwrapErrorHandler(childSchema),\n        };\n      }\n      return { ...acc, [key]: childSchema };\n    }\n  }, {} as ErrorSchema<T>);\n}\n","import pad from './pad';\n\n/** Converts a UTC date string into a local Date format\n *\n * @param jsonDate - A UTC date string\n * @returns - An empty string when `jsonDate` is falsey, otherwise a date string in local format\n */\nexport default function utcToLocal(jsonDate: string) {\n  if (!jsonDate) {\n    return '';\n  }\n\n  // required format of `'yyyy-MM-ddThh:mm' followed by optional ':ss' or ':ss.SSS'\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type%3Ddatetime-local)\n  // > should be a _valid local date and time string_ (not GMT)\n\n  // Note - date constructor passed local ISO-8601 does not correctly\n  // change time to UTC in node pre-8\n  const date = new Date(jsonDate);\n\n  const yyyy = pad(date.getFullYear(), 4);\n  const MM = pad(date.getMonth() + 1, 2);\n  const dd = pad(date.getDate(), 2);\n  const hh = pad(date.getHours(), 2);\n  const mm = pad(date.getMinutes(), 2);\n  const ss = pad(date.getSeconds(), 2);\n  const SSS = pad(date.getMilliseconds(), 3);\n\n  return `${yyyy}-${MM}-${dd}T${hh}:${mm}:${ss}.${SSS}`;\n}\n","import isEmpty from 'lodash/isEmpty';\n\nimport mergeObjects from './mergeObjects';\nimport toErrorList from './toErrorList';\nimport { ErrorSchema, ValidationData } from './types';\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `toErrorList()` on the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The optional additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n */\nexport default function validationDataMerge<T = any>(\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import { REF_KEY, ROOT_SCHEMA_PREFIX } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixObject<S extends StrictRJSFSchema = RJSFSchema>(node: S): S {\n  for (const key in node) {\n    const realObj: { [k: string]: any } = node;\n    const value = realObj[key];\n    if (key === REF_KEY && typeof value === 'string' && value.startsWith('#')) {\n      realObj[key] = ROOT_SCHEMA_PREFIX + value;\n    } else {\n      realObj[key] = withIdRefPrefix<S>(value);\n    }\n  }\n  return node;\n}\n\n/** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixArray<S extends StrictRJSFSchema = RJSFSchema>(node: S[]): S[] {\n  for (let i = 0; i < node.length; i++) {\n    node[i] = withIdRefPrefix<S>(node[i]) as S;\n  }\n  return node;\n}\n\n/** Recursively prefixes all `$ref`s in a schema with the value of the `ROOT_SCHEMA_PREFIX` constant.\n * This is used in isValid to make references to the rootSchema\n *\n * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n * @returns - A copy of the `schemaNode` with updated `$ref`s\n */\nexport default function withIdRefPrefix<S extends StrictRJSFSchema = RJSFSchema>(schemaNode: S): S | S[] {\n  if (schemaNode.constructor === Object) {\n    return withIdRefPrefixObject<S>({ ...schemaNode });\n  }\n  if (Array.isArray(schemaNode)) {\n    return withIdRefPrefixArray<S>([...schemaNode]);\n  }\n  return schemaNode;\n}\n","/** An enumeration of all the translatable strings used by `@rjsf/core` and its themes. The value of each of the\n * enumeration keys is expected to be the actual english string. Some strings contain replaceable parameter values\n * as indicated by `%1`, `%2`, etc. The number after the `%` indicates the order of the parameter. The ordering of\n * parameters is important because some languages may choose to put the second parameter before the first in its\n * translation. Also, some strings are rendered using `markdown-to-jsx` and thus support markdown and inline html.\n */\nexport enum TranslatableString {\n  /** Fallback title of an array item, used by ArrayField */\n  ArrayItemTitle = 'Item',\n  /** Missing items reason, used by ArrayField */\n  MissingItems = 'Missing items definition',\n  /** Yes label, used by BooleanField */\n  YesLabel = 'Yes',\n  /** No label, used by BooleanField */\n  NoLabel = 'No',\n  /** Close label, used by ErrorList */\n  CloseLabel = 'Close',\n  /** Errors label, used by ErrorList */\n  ErrorsLabel = 'Errors',\n  /** New additionalProperties string default value, used by ObjectField */\n  NewStringDefault = 'New Value',\n  /** Add button title, used by AddButton */\n  AddButton = 'Add',\n  /** Add button title, used by AddButton */\n  AddItemButton = 'Add Item',\n  /** Copy button title, used by IconButton */\n  CopyButton = 'Copy',\n  /** Move down button title, used by IconButton */\n  MoveDownButton = 'Move down',\n  /** Move up button title, used by IconButton */\n  MoveUpButton = 'Move up',\n  /** Remove button title, used by IconButton */\n  RemoveButton = 'Remove',\n  /** Now label, used by AltDateWidget */\n  NowLabel = 'Now',\n  /** Clear label, used by AltDateWidget */\n  ClearLabel = 'Clear',\n  /** Aria date label, used by DateWidget */\n  AriaDateLabel = 'Select a date',\n  /** File preview label, used by FileWidget */\n  PreviewLabel = 'Preview',\n  /** Decrement button aria label, used by UpDownWidget */\n  DecrementAriaLabel = 'Decrease value by 1',\n  /** Increment button aria label, used by UpDownWidget */\n  IncrementAriaLabel = 'Increase value by 1',\n  // Strings with replaceable parameters\n  /** Unknown field type reason, where %1 will be replaced with the type as provided by SchemaField */\n  UnknownFieldType = 'Unknown field type %1',\n  /** Option prefix, where %1 will be replaced with the option index as provided by MultiSchemaField */\n  OptionPrefix = 'Option %1',\n  /** Option prefix, where %1 and %2 will be replaced by the schema title and option index, respectively as provided by\n   * MultiSchemaField\n   */\n  TitleOptionPrefix = '%1 option %2',\n  /** Key label, where %1 will be replaced by the label as provided by WrapIfAdditionalTemplate */\n  KeyLabel = '%1 Key',\n  // Strings with replaceable parameters AND/OR that support markdown and html\n  /** Invalid object field configuration as provided by the ObjectField */\n  InvalidObjectField = 'Invalid \"%1\" object field configuration: <em>%2</em>.',\n  /** Unsupported field schema, used by UnsupportedField */\n  UnsupportedField = 'Unsupported field schema.',\n  /** Unsupported field schema, where %1 will be replaced by the idSchema.$id as provided by UnsupportedField */\n  UnsupportedFieldWithId = 'Unsupported field schema for field <code>%1</code>.',\n  /** Unsupported field schema, where %1 will be replaced by the reason string as provided by UnsupportedField */\n  UnsupportedFieldWithReason = 'Unsupported field schema: <em>%1</em>.',\n  /** Unsupported field schema, where %1 and %2 will be replaced by the idSchema.$id and reason strings, respectively,\n   * as provided by UnsupportedField\n   */\n  UnsupportedFieldWithIdAndReason = 'Unsupported field schema for field <code>%1</code>: <em>%2</em>.',\n  /** File name, type and size info, where %1, %2 and %3 will be replaced by the file name, file type and file size as\n   * provided by FileWidget\n   */\n  FilesInfo = '<strong>%1</strong> (%2, %3 bytes)',\n}\n"],"names":["isObject","thing","File","Date","Array","isArray","allowAdditionalItems","schema","additionalItems","console","warn","asNumber","value","undefined","test","n","Number","valid","isNaN","ADDITIONAL_PROPERTY_FLAG","ADDITIONAL_PROPERTIES_KEY","ALL_OF_KEY","ANY_OF_KEY","CONST_KEY","DEFAULT_KEY","DEFINITIONS_KEY","DEPENDENCIES_KEY","ENUM_KEY","ERRORS_KEY","ID_KEY","ITEMS_KEY","NAME_KEY","ONE_OF_KEY","PROPERTIES_KEY","REQUIRED_KEY","SUBMIT_BTN_OPTIONS_KEY","REF_KEY","RJSF_ADDITONAL_PROPERTIES_FLAG","ROOT_SCHEMA_PREFIX","UI_FIELD_KEY","UI_WIDGET_KEY","UI_OPTIONS_KEY","UI_GLOBAL_OPTIONS_KEY","getUiOptions","uiSchema","globalOptions","Object","keys","filter","key","indexOf","reduce","options","_extends2","error","_extends","substring","canExpand","formData","additionalProperties","_getUiOptions","_getUiOptions$expanda","expandable","maxProperties","length","createErrorHandler","_handler","handler","addError","message","push","acc","isPlainObject","formObject","_extends3","deepEquals","a","b","isEqualWith","obj","other","splitKeyElementFromObject","object","remaining","omit","findSchemaDefinition","$ref","rootSchema","ref","startsWith","decodeURIComponent","Error","current","jsonpointer","get","_splitKeyElementFromO","theRef","subSchema","getMatchingOption","validator","discriminatorField","i","option","has","discriminator","isValid","requiresAnyOf","anyOf","map","required","augmentedSchema","shallowClone","_objectDestructuringEmpty","allOf","slice","assign","getFirstMatchingOption","guessType","getSchemaType","type","properties","includes","find","mergeSchemas","obj1","obj2","left","right","union","resolveCondition","expression","then","otherwise","resolvedSchemaLessConditional","_objectWithoutPropertiesLoose","_excluded","conditionalSchema","retrieveSchema","resolveSchema","resolveReference","resolvedSchema","resolveDependencies","allOfSubschema","$refSchema","localSchema","_excluded2","stubExistingAdditionalProperties","theSchema","aFormData","forEach","set","rawFormData","mergeAllOf","deep","e","_resolvedSchema","resolvedSchemaWithoutAllOf","_excluded3","hasAdditionalProperties","dependencies","remainingSchema","_excluded4","oneOf","processDependencies","dependencyKey","remainingDependencies","dependencyValue","withDependentProperties","withDependentSchema","additionallyRequired","from","Set","concat","_retrieveSchema","dependentSchema","_excluded5","resolvedOneOf","subschema","withExactlyOneSubschema","validSubschemas","conditionPropertySchema","_properties","conditionSchema","_splitKeyElementFromO2","dependentSubschema","JUNK_OPTION","__not_really_there__","calculateIndexScore","totalScore","score","formValue","newSchema","getClosestMatchingOption","newScore","isString","selectedOption","allValidIndexes","validList","index","testOptions","match","times","_allValidIndexes$redu","scoreData","bestScore","bestIndex","isFixedItems","items","every","item","mergeDefaultsWithFormData","defaults","defaultsArray","mapped","idx","mergeObjects","concatArrays","toMerge","result","isConstant","isSelect","altSchemas","isMultiSelect","uniqueItems","AdditionalItemsHandling","getInnerSchemaForArrayItem","Ignore","maybeAddDefaultToObject","computedDefault","includeUndefinedValues","requiredFields","isEmpty","computeDefaults","rawSchema","parentDefaults","_recurseList","refName","refSchema","itemSchema","objectDefaults","additionalPropertiesSchema","add","schemaItem","Fallback","minItems","defaultsLength","defaultEntries","fillerSchema","Invert","fillerDefault","fillerEntries","fill","getDefaultFormState","isCustomWidget","isFilesArray","itemsSchema","format","getDisplayLabel","uiOptions","_uiOptions$label","label","displayLabel","schemaType","mergeValidationData","validationData","additionalErrorSchema","oldErrors","errors","oldErrorSchema","errorSchema","toErrorList","NO_VALUE","Symbol","sanitizeDataForNewSchema","oldSchema","data","newFormData","removeOldSchemaData","nestedData","oldKeyedSchema","newKeyedSchema","oldSchemaTypeForKey","newSchemaTypeForKey","itemData","newOptionDefault","oldOptionDefault","newOptionConst","oldOptionConst","oldSchemaItems","newSchemaItems","oldSchemaType","newSchemaType","maxItems","newValue","aValue","itemValue","toIdSchemaInternal","idPrefix","idSeparator","id","_schema","sameSchemaIndex","findIndex","isEqual","$id","idSchema","name","field","fieldId","toIdSchema","toPathSchemaInternal","_pathSchema","pathSchema","replace","element","property","toPathSchema","SchemaUtils","_proto","prototype","getValidator","doesSchemaUtilsDiffer","createSchemaUtils","dataURItoBlob","dataURI","splitted","split","params","param","decodeURI","binary","atob","array","charCodeAt","blob","window","Blob","Uint8Array","size","replaceStringParameters","inputString","output","parts","partIndex","part","join","englishStringTranslator","stringToTranslate","enumOptionsValueForIndex","valueIndex","allEnumOptions","emptyValue","val","enumOptionsDeselectValue","selected","v","enumOptionsIsSelected","some","sel","enumOptionsIndexForValue","multiple","selectedIndexes","opt","String","enumOptionsSelectValue","all","_ref","updated","sort","ErrorSchemaBuilder","initialSchema","resetAllErrors","getOrCreateErrorBlock","pathOfError","hasPath","errorBlock","cloneDeep","addErrors","errorOrList","errorsList","_errorsList","apply","setErrors","listToAdd","clearErrors","_createClass","rangeSpec","spec","multipleOf","step","minimum","min","maximum","max","getInputProps","defaultType","autoDefaultStepAny","inputProps","inputType","autocomplete","autoComplete","DEFAULT_OPTIONS","props","disabled","submitText","norender","getSubmitButtonOptions","getTemplate","registry","templates","widgetMap","checkbox","radio","select","hidden","string","text","password","email","hostname","ipv4","ipv6","uri","textarea","date","datetime","time","color","file","number","updown","range","integer","checkboxes","files","mergeWidgetOptions","AWidget","MergedWidget","defaultOptions","defaultProps","_jsx","getWidget","widget","registeredWidgets","ReactIs","isForwardRef","createElement","isMemo","registeredWidget","hasWidget","err","idGenerator","suffix","theId","descriptionId","errorId","examplesId","helpId","titleId","ariaDescribedByIds","includeExamples","examples","optionId","optionIndex","labelValue","hideLabel","fallback","localToUTC","dateString","toJSON","toConstant","optionsList","schemaWithEnumNames","enumNames","process","aSchemaDef","aSchema","title","orderProperties","order","arrayToHash","arr","prev","curr","errorPropList","propertyHash","orderFiltered","prop","orderHash","rest","restIndex","lastIndexOf","complete","splice","pad","num","width","s","parseDateString","includeTime","year","month","day","hour","minute","second","getTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","schemaRequiresTrueValue","schemaSome","shouldRender","component","nextProps","nextState","state","toDateString","dateObject","_dateObject$hour","_dateObject$minute","_dateObject$second","utcTime","UTC","fieldPath","errorList","stack","childSchema","toErrorSchema","builder","path","toPath","ErrorSchema","unwrapErrorHandler","errorHandler","utcToLocal","jsonDate","yyyy","getFullYear","MM","getMonth","dd","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","SSS","getMilliseconds","validationDataMerge","withIdRefPrefixObject","node","realObj","withIdRefPrefix","withIdRefPrefixArray","schemaNode","constructor","TranslatableString"],"mappings":"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"}