{"version":3,"file":"utils.umd.production.min.js","sources":["../src/isObject.ts","../src/constants.ts","../src/getUiOptions.ts","../src/deepEquals.ts","../src/findSchemaDefinition.ts","../src/schema/getMatchingOption.ts","../src/schema/getFirstMatchingOption.ts","../src/guessType.ts","../src/getSchemaType.ts","../src/mergeSchemas.ts","../src/schema/retrieveSchema.ts","../src/schema/getClosestMatchingOption.ts","../src/schema/getDefaultFormState.ts","../src/isFixedItems.ts","../src/mergeDefaultsWithFormData.ts","../src/mergeObjects.ts","../src/isConstant.ts","../src/schema/isSelect.ts","../src/schema/isMultiSelect.ts","../src/isCustomWidget.ts","../src/schema/isFilesArray.ts","../src/schema/getDisplayLabel.ts","../src/schema/mergeValidationData.ts","../src/schema/sanitizeDataForNewSchema.ts","../src/schema/toIdSchema.ts","../src/schema/toPathSchema.ts","../src/createSchemaUtils.ts","../src/replaceStringParameters.ts","../src/enumOptionsValueForIndex.ts","../src/enumOptionsIsSelected.ts","../src/ErrorSchemaBuilder.ts","../src/rangeSpec.ts","../src/getSubmitButtonOptions.ts","../src/enums.ts","../src/getWidget.tsx","../src/idGenerators.ts","../src/toConstant.ts","../src/pad.ts","../src/toErrorList.ts","../src/allowAdditionalItems.ts","../src/asNumber.ts","../src/canExpand.ts","../src/createErrorHandler.ts","../src/dataURItoBlob.ts","../src/englishStringTranslator.ts","../src/enumOptionsDeselectValue.ts","../src/enumOptionsIndexForValue.ts","../src/enumOptionsSelectValue.ts","../src/getInputProps.ts","../src/getTemplate.ts","../src/hasWidget.ts","../src/labelValue.ts","../src/localToUTC.ts","../src/optionsList.ts","../src/orderProperties.ts","../src/parseDateString.ts","../src/schemaRequiresTrueValue.ts","../src/shouldRender.ts","../src/toDateString.ts","../src/toErrorSchema.ts","../src/unwrapErrorHandler.ts","../src/utcToLocal.ts","../src/validationDataMerge.ts","../src/withIdRefPrefix.ts"],"sourcesContent":["/** Determines whether a `thing` is an object for the purposes of RSJF. In this case, `thing` is an object if it has\n * the type `object` but is NOT null, an array or a File.\n *\n * @param thing - The thing to check to see whether it is an object\n * @returns - True if it is a non-null, non-array, non-File object\n */\nexport default function isObject(thing: any) {\n  if (typeof File !== 'undefined' && thing instanceof File) {\n    return false;\n  }\n  if (typeof Date !== 'undefined' && thing instanceof Date) {\n    return false;\n  }\n  return typeof thing === 'object' && thing !== null && !Array.isArray(thing);\n}\n","/** Below are the list of all the keys into various elements of a RJSFSchema or UiSchema that are used by the various\n * utility functions. In addition to those keys, there are the special `ADDITIONAL_PROPERTY_FLAG` and\n * `RJSF_ADDITONAL_PROPERTIES_FLAG` flags that is added to a schema under certain conditions by the `retrieveSchema()`\n * utility.\n */\nexport const ADDITIONAL_PROPERTY_FLAG = '__additional_property';\nexport const ADDITIONAL_PROPERTIES_KEY = 'additionalProperties';\nexport const ALL_OF_KEY = 'allOf';\nexport const ANY_OF_KEY = 'anyOf';\nexport const CONST_KEY = 'const';\nexport const DEFAULT_KEY = 'default';\nexport const DEFINITIONS_KEY = 'definitions';\nexport const DEPENDENCIES_KEY = 'dependencies';\nexport const ENUM_KEY = 'enum';\nexport const ERRORS_KEY = '__errors';\nexport const ID_KEY = '$id';\nexport const ITEMS_KEY = 'items';\nexport const NAME_KEY = '$name';\nexport const ONE_OF_KEY = 'oneOf';\nexport const PROPERTIES_KEY = 'properties';\nexport const REQUIRED_KEY = 'required';\nexport const SUBMIT_BTN_OPTIONS_KEY = 'submitButtonOptions';\nexport const REF_KEY = '$ref';\nexport const RJSF_ADDITONAL_PROPERTIES_FLAG = '__rjsf_additionalProperties';\nexport const ROOT_SCHEMA_PREFIX = '__rjsf_rootSchema';\nexport const UI_FIELD_KEY = 'ui:field';\nexport const UI_WIDGET_KEY = 'ui:widget';\nexport const UI_OPTIONS_KEY = 'ui:options';\nexport const UI_GLOBAL_OPTIONS_KEY = 'ui:globalOptions';\n","import { UI_OPTIONS_KEY, UI_WIDGET_KEY } from './constants';\nimport isObject from './isObject';\nimport { FormContextType, GlobalUISchemaOptions, RJSFSchema, StrictRJSFSchema, UIOptionsType, UiSchema } from './types';\n\n/** Get all passed options from ui:options, and ui:<optionName>, returning them in an object with the `ui:`\n * stripped off. Any `globalOptions` will always be returned, unless they are overridden by options in the `uiSchema`.\n *\n * @param [uiSchema={}] - The UI Schema from which to get any `ui:xxx` options\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - An object containing all the `ui:xxx` options with the `ui:` stripped off along with all `globalOptions`\n */\nexport default function getUiOptions<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  uiSchema: UiSchema<T, S, F> = {},\n  globalOptions: GlobalUISchemaOptions = {}\n): UIOptionsType<T, S, F> {\n  return Object.keys(uiSchema)\n    .filter((key) => key.indexOf('ui:') === 0)\n    .reduce(\n      (options, key) => {\n        const value = uiSchema[key];\n        if (key === UI_WIDGET_KEY && isObject(value)) {\n          console.error('Setting options via ui:widget object is no longer supported, use ui:options instead');\n          return options;\n        }\n        if (key === UI_OPTIONS_KEY && isObject(value)) {\n          return { ...options, ...value };\n        }\n        return { ...options, [key.substring(3)]: value };\n      },\n      { ...globalOptions }\n    );\n}\n","import isEqualWith from 'lodash/isEqualWith';\n\n/** Implements a deep equals using the `lodash.isEqualWith` function, that provides a customized comparator that\n * assumes all functions are equivalent.\n *\n * @param a - The first element to compare\n * @param b - The second element to compare\n * @returns - True if the `a` and `b` are deeply equal, false otherwise\n */\nexport default function deepEquals(a: any, b: any): boolean {\n  return isEqualWith(a, b, (obj: any, other: any) => {\n    if (typeof obj === 'function' && typeof other === 'function') {\n      // Assume all functions are equivalent\n      // see https://github.com/rjsf-team/react-jsonschema-form/issues/255\n      return true;\n    }\n    return undefined; // fallback to default isEquals behavior\n  });\n}\n","import jsonpointer from 'jsonpointer';\nimport omit from 'lodash/omit';\n\nimport { REF_KEY } from './constants';\nimport { GenericObjectType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Splits out the value at the `key` in `object` from the `object`, returning an array that contains in the first\n * location, the `object` minus the `key: value` and in the second location the `value`.\n *\n * @param key - The key from the object to extract\n * @param object - The object from which to extract the element\n * @returns - An array with the first value being the object minus the `key` element and the second element being the\n *      value from `object[key]`\n */\nexport function splitKeyElementFromObject(key: string, object: GenericObjectType) {\n  const value = object[key];\n  const remaining = omit(object, [key]);\n  return [remaining, value];\n}\n\n/** Given the name of a `$ref` from within a schema, using the `rootSchema`, look up and return the sub-schema using the\n * path provided by that reference. If `#` is not the first character of the reference, or the path does not exist in\n * the schema, then throw an Error. Otherwise return the sub-schema. Also deals with nested `$ref`s in the sub-schema.\n *\n * @param $ref - The ref string for which the schema definition is desired\n * @param [rootSchema={}] - The root schema in which to search for the definition\n * @returns - The sub-schema within the `rootSchema` which matches the `$ref` if it exists\n * @throws - Error indicating that no schema for that reference exists\n */\nexport default function findSchemaDefinition<S extends StrictRJSFSchema = RJSFSchema>(\n  $ref?: string,\n  rootSchema: S = {} as S\n): S {\n  let ref = $ref || '';\n  if (ref.startsWith('#')) {\n    // Decode URI fragment representation.\n    ref = decodeURIComponent(ref.substring(1));\n  } else {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  const current: S = jsonpointer.get(rootSchema, ref);\n  if (current === undefined) {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  if (current[REF_KEY]) {\n    const [remaining, theRef] = splitKeyElementFromObject(REF_KEY, current);\n    const subSchema = findSchemaDefinition<S>(theRef, rootSchema);\n    if (Object.keys(remaining).length > 0) {\n      return { ...remaining, ...subSchema };\n    }\n    return subSchema;\n  }\n  return current;\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\n\nimport { PROPERTIES_KEY } from '../constants';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n * Deprecated, use `getFirstMatchingOption()` instead.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the matched option or 0 if none is available\n * @deprecated\n */\nexport default function getMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S,\n  discriminatorField?: string\n): number {\n  // For performance, skip validating subschemas if formData is undefined. We just\n  // want to get the first option in that case.\n  if (formData === undefined) {\n    return 0;\n  }\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n\n    // If we have a discriminator field, then we will use this to make the determination\n    if (discriminatorField && has(option, [PROPERTIES_KEY, discriminatorField])) {\n      const value = get(formData, discriminatorField);\n      const discriminator = get(option, [PROPERTIES_KEY, discriminatorField], {});\n      if (validator.isValid(discriminator, value, rootSchema)) {\n        return i;\n      }\n    } else if (option[PROPERTIES_KEY]) {\n      // If the schema describes an object then we need to add slightly more\n      // strict matching to the schema, because unless the schema uses the\n      // \"requires\" keyword, an object will match the schema as long as it\n      // doesn't have matching keys with a conflicting type. To do this we use an\n      // \"anyOf\" with an array of requires. This augmentation expresses that the\n      // schema should match if any of the keys in the schema are present on the\n      // object and pass validation.\n      //\n      // Create an \"anyOf\" schema that requires at least one of the keys in the\n      // \"properties\" object\n      const requiresAnyOf = {\n        anyOf: Object.keys(option[PROPERTIES_KEY]).map((key) => ({\n          required: [key],\n        })),\n      };\n\n      let augmentedSchema;\n\n      // If the \"anyOf\" keyword already exists, wrap the augmentation in an \"allOf\"\n      if (option.anyOf) {\n        // Create a shallow clone of the option\n        const { ...shallowClone } = option;\n\n        if (!shallowClone.allOf) {\n          shallowClone.allOf = [];\n        } else {\n          // If \"allOf\" already exists, shallow clone the array\n          shallowClone.allOf = shallowClone.allOf.slice();\n        }\n\n        shallowClone.allOf.push(requiresAnyOf);\n\n        augmentedSchema = shallowClone;\n      } else {\n        augmentedSchema = Object.assign({}, option, requiresAnyOf);\n      }\n\n      // Remove the \"required\" field as it's likely that not all fields have\n      // been filled in yet, which will mean that the schema is not valid\n      delete augmentedSchema.required;\n\n      if (validator.isValid(augmentedSchema, formData, rootSchema)) {\n        return i;\n      }\n    } else if (validator.isValid(option, formData, rootSchema)) {\n      return i;\n    }\n  }\n  return 0;\n}\n","import getMatchingOption from './getMatchingOption';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n * Always returns the first option if there is nothing that matches.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the first matched option or 0 if none is available\n */\nexport default function getFirstMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S,\n  discriminatorField?: string\n): number {\n  return getMatchingOption<T, S, F>(validator, formData, options, rootSchema, discriminatorField);\n}\n","/** Given a specific `value` attempts to guess the type of a schema element. In the case where we have to implicitly\n *  create a schema, it is useful to know what type to use based on the data we are defining.\n *\n * @param value - The value from which to guess the type\n * @returns - The best guess for the object type\n */\nexport default function guessType(value: any) {\n  if (Array.isArray(value)) {\n    return 'array';\n  }\n  if (typeof value === 'string') {\n    return 'string';\n  }\n  if (value == null) {\n    return 'null';\n  }\n  if (typeof value === 'boolean') {\n    return 'boolean';\n  }\n  if (!isNaN(value)) {\n    return 'number';\n  }\n  if (typeof value === 'object') {\n    return 'object';\n  }\n  // Default to string if we can't figure it out\n  return 'string';\n}\n","import guessType from './guessType';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Gets the type of a given `schema`. If the type is not explicitly defined, then an attempt is made to infer it from\n * other elements of the schema as follows:\n * - schema.const: Returns the `guessType()` of that value\n * - schema.enum: Returns `string`\n * - schema.properties: Returns `object`\n * - schema.additionalProperties: Returns `object`\n * - type is an array with a length of 2 and one type is 'null': Returns the other type\n *\n * @param schema - The schema for which to get the type\n * @returns - The type of the schema\n */\nexport default function getSchemaType<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): string | string[] | undefined {\n  let { type } = schema;\n\n  if (!type && schema.const) {\n    return guessType(schema.const);\n  }\n\n  if (!type && schema.enum) {\n    return 'string';\n  }\n\n  if (!type && (schema.properties || schema.additionalProperties)) {\n    return 'object';\n  }\n\n  if (Array.isArray(type) && type.length === 2 && type.includes('null')) {\n    type = type.find((type) => type !== 'null');\n  }\n\n  return type;\n}\n","import union from 'lodash/union';\n\nimport { REQUIRED_KEY } from './constants';\nimport getSchemaType from './getSchemaType';\nimport isObject from './isObject';\nimport { GenericObjectType } from './types';\n\n/** Recursively merge deeply nested schemas. The difference between `mergeSchemas` and `mergeObjects` is that\n * `mergeSchemas` only concats arrays for values under the 'required' keyword, and when it does, it doesn't include\n * duplicate values.\n *\n * @param obj1 - The first schema object to merge\n * @param obj2 - The second schema object to merge\n * @returns - The merged schema object\n */\nexport default function mergeSchemas(obj1: GenericObjectType, obj2: GenericObjectType) {\n  const acc = Object.assign({}, obj1); // Prevent mutation of source object.\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeSchemas(left, right);\n    } else if (\n      obj1 &&\n      obj2 &&\n      (getSchemaType(obj1) === 'object' || getSchemaType(obj2) === 'object') &&\n      key === REQUIRED_KEY &&\n      Array.isArray(left) &&\n      Array.isArray(right)\n    ) {\n      // Don't include duplicate values when merging 'required' fields.\n      acc[key] = union(left, right);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, acc);\n}\n","import get from 'lodash/get';\nimport set from 'lodash/set';\nimport mergeAllOf, { Options } from 'json-schema-merge-allof';\n\nimport {\n  ADDITIONAL_PROPERTIES_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  DEPENDENCIES_KEY,\n  ONE_OF_KEY,\n  REF_KEY,\n} from '../constants';\nimport findSchemaDefinition, { splitKeyElementFromObject } from '../findSchemaDefinition';\nimport guessType from '../guessType';\nimport isObject from '../isObject';\nimport mergeSchemas from '../mergeSchemas';\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport getFirstMatchingOption from './getFirstMatchingOption';\n\n/** Resolves a conditional block (if/else/then) by removing the condition and merging the appropriate conditional branch\n * with the rest of the schema\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that is used to detect valid schema conditions\n * @param schema - The schema for which resolving a condition is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns - A schema with the appropriate condition resolved\n */\nexport function resolveCondition<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  formData?: T\n) {\n  const { if: expression, then, else: otherwise, ...resolvedSchemaLessConditional } = schema;\n\n  const conditionalSchema = validator.isValid(expression as S, formData, rootSchema) ? then : otherwise;\n\n  if (conditionalSchema && typeof conditionalSchema !== 'boolean') {\n    return retrieveSchema<T, S>(\n      validator,\n      mergeSchemas(\n        resolvedSchemaLessConditional,\n        retrieveSchema<T, S, F>(validator, conditionalSchema as S, rootSchema, formData)\n      ) as S,\n      rootSchema,\n      formData\n    );\n  }\n  return retrieveSchema<T, S, F>(validator, resolvedSchemaLessConditional as S, rootSchema, formData);\n}\n\n/** Resolves references and dependencies within a schema and its 'allOf' children.\n * Called internally by retrieveSchema.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its references and dependencies resolved\n */\nexport function resolveSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S = {} as S,\n  formData?: T\n): S {\n  if (REF_KEY in schema) {\n    return resolveReference<T, S, F>(validator, schema, rootSchema, formData);\n  }\n  if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchema = resolveDependencies<T, S, F>(validator, schema, rootSchema, formData);\n    return retrieveSchema<T, S, F>(validator, resolvedSchema, rootSchema, formData);\n  }\n  if (ALL_OF_KEY in schema) {\n    return {\n      ...schema,\n      allOf: schema.allOf!.map((allOfSubschema) =>\n        retrieveSchema<T, S, F>(validator, allOfSubschema as S, rootSchema, formData)\n      ),\n    };\n  }\n  // No $ref or dependencies attribute found, returning the original schema.\n  return schema;\n}\n\n/** Resolves references within a schema and its 'allOf' children.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a reference is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its references resolved\n */\nexport function resolveReference<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  formData?: T\n): S {\n  // Retrieve the referenced schema definition.\n  const $refSchema = findSchemaDefinition<S>(schema.$ref, rootSchema);\n  // Drop the $ref property of the source schema.\n  const { $ref, ...localSchema } = schema;\n  // Update referenced schema definition with local schema properties.\n  return retrieveSchema<T, S, F>(validator, { ...$refSchema, ...localSchema }, rootSchema, formData);\n}\n\n/** Creates new 'properties' items for each key in the `formData`\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be used when necessary\n * @param theSchema - The schema for which the existing additional properties is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s * @param validator\n * @param [aFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The updated schema with additional properties stubbed\n */\nexport function stubExistingAdditionalProperties<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, theSchema: S, rootSchema?: S, aFormData?: T): S {\n  // Clone the schema so we don't ruin the consumer's original\n  const schema = {\n    ...theSchema,\n    properties: { ...theSchema.properties },\n  };\n\n  // make sure formData is an object\n  const formData: GenericObjectType = aFormData && isObject(aFormData) ? aFormData : {};\n  Object.keys(formData).forEach((key) => {\n    if (key in schema.properties) {\n      // No need to stub, our schema already has the property\n      return;\n    }\n\n    let additionalProperties: S['additionalProperties'] = {};\n    if (typeof schema.additionalProperties !== 'boolean') {\n      if (REF_KEY in schema.additionalProperties!) {\n        additionalProperties = retrieveSchema<T, S, F>(\n          validator,\n          { $ref: get(schema.additionalProperties, [REF_KEY]) } as S,\n          rootSchema,\n          formData as T\n        );\n      } else if ('type' in schema.additionalProperties!) {\n        additionalProperties = { ...schema.additionalProperties };\n      } else if (ANY_OF_KEY in schema.additionalProperties! || ONE_OF_KEY in schema.additionalProperties!) {\n        additionalProperties = {\n          type: 'object',\n          ...schema.additionalProperties,\n        };\n      } else {\n        additionalProperties = { type: guessType(get(formData, [key])) };\n      }\n    } else {\n      additionalProperties = { type: guessType(get(formData, [key])) };\n    }\n\n    // The type of our new key should match the additionalProperties value;\n    schema.properties[key] = additionalProperties;\n    // Set our additional property flag so we know it was dynamically added\n    set(schema.properties, [key, ADDITIONAL_PROPERTY_FLAG], true);\n  });\n\n  return schema;\n}\n\n/** Retrieves an expanded schema that has had all of its conditions, additional properties, references and dependencies\n * resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData` that is used to do the\n * potentially recursive resolution.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n */\nexport default function retrieveSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S = {} as S, rawFormData?: T): S {\n  if (!isObject(schema)) {\n    return {} as S;\n  }\n  let resolvedSchema = resolveSchema<T, S, F>(validator, schema, rootSchema, rawFormData);\n\n  if ('if' in schema) {\n    return resolveCondition<T, S, F>(validator, schema, rootSchema, rawFormData as T);\n  }\n\n  const formData: GenericObjectType = rawFormData || {};\n\n  if (ALL_OF_KEY in schema) {\n    try {\n      resolvedSchema = mergeAllOf(resolvedSchema, {\n        deep: false,\n      } as Options) as S;\n    } catch (e) {\n      console.warn('could not merge subschemas in allOf:\\n', e);\n      const { allOf, ...resolvedSchemaWithoutAllOf } = resolvedSchema;\n      return resolvedSchemaWithoutAllOf as S;\n    }\n  }\n  const hasAdditionalProperties =\n    ADDITIONAL_PROPERTIES_KEY in resolvedSchema && resolvedSchema.additionalProperties !== false;\n  if (hasAdditionalProperties) {\n    return stubExistingAdditionalProperties<T, S, F>(validator, resolvedSchema, rootSchema, formData as T);\n  }\n  return resolvedSchema;\n}\n\n/** Resolves dependencies within a schema and its 'allOf' children.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependency is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with its dependencies resolved\n */\nexport function resolveDependencies<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  formData?: T\n): S {\n  // Drop the dependencies from the source schema.\n  const { dependencies, ...remainingSchema } = schema;\n  let resolvedSchema: S = remainingSchema as S;\n  if (Array.isArray(resolvedSchema.oneOf)) {\n    resolvedSchema = resolvedSchema.oneOf[\n      getFirstMatchingOption<T, S, F>(validator, formData, resolvedSchema.oneOf as S[], rootSchema)\n    ] as S;\n  } else if (Array.isArray(resolvedSchema.anyOf)) {\n    resolvedSchema = resolvedSchema.anyOf[\n      getFirstMatchingOption<T, S, F>(validator, formData, resolvedSchema.anyOf as S[], rootSchema)\n    ] as S;\n  }\n  return processDependencies<T, S, F>(validator, dependencies, resolvedSchema, rootSchema, formData);\n}\n\n/** Processes all the `dependencies` recursively into the `resolvedSchema` as needed\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param dependencies - The set of dependencies that needs to be processed\n * @param resolvedSchema - The schema for which processing dependencies is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with the `dependencies` resolved into it\n */\nexport function processDependencies<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  dependencies: S['dependencies'],\n  resolvedSchema: S,\n  rootSchema: S,\n  formData?: T\n): S {\n  let schema = resolvedSchema;\n  // Process dependencies updating the local schema properties as appropriate.\n  for (const dependencyKey in dependencies) {\n    // Skip this dependency if its trigger property is not present.\n    if (get(formData, [dependencyKey]) === undefined) {\n      continue;\n    }\n    // Skip this dependency if it is not included in the schema (such as when dependencyKey is itself a hidden dependency.)\n    if (schema.properties && !(dependencyKey in schema.properties)) {\n      continue;\n    }\n    const [remainingDependencies, dependencyValue] = splitKeyElementFromObject(\n      dependencyKey,\n      dependencies as GenericObjectType\n    );\n    if (Array.isArray(dependencyValue)) {\n      schema = withDependentProperties<S>(schema, dependencyValue);\n    } else if (isObject(dependencyValue)) {\n      schema = withDependentSchema<T, S, F>(\n        validator,\n        schema,\n        rootSchema,\n        dependencyKey,\n        dependencyValue as S,\n        formData\n      );\n    }\n    return processDependencies<T, S, F>(validator, remainingDependencies, schema, rootSchema, formData);\n  }\n  return schema;\n}\n\n/** Updates a schema with additionally required properties added\n *\n * @param schema - The schema for which resolving a dependent properties is desired\n * @param [additionallyRequired] - An optional array of additionally required names\n * @returns - The schema with the additional required values merged in\n */\nexport function withDependentProperties<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  additionallyRequired?: string[]\n) {\n  if (!additionallyRequired) {\n    return schema;\n  }\n  const required = Array.isArray(schema.required)\n    ? Array.from(new Set([...schema.required, ...additionallyRequired]))\n    : additionallyRequired;\n  return { ...schema, required: required };\n}\n\n/** Merges a dependent schema into the `schema` dealing with oneOfs and references\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependent schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the dependency\n * @param dependencyValue - The potentially dependent schema\n * @param formData- The current formData to assist retrieving a schema\n * @returns - The schema with the dependent schema resolved into it\n */\nexport function withDependentSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  dependencyValue: S,\n  formData?: T\n) {\n  const { oneOf, ...dependentSchema } = retrieveSchema<T, S, F>(validator, dependencyValue, rootSchema, formData);\n  schema = mergeSchemas(schema, dependentSchema) as S;\n  // Since it does not contain oneOf, we return the original schema.\n  if (oneOf === undefined) {\n    return schema;\n  }\n  // Resolve $refs inside oneOf.\n  const resolvedOneOf = oneOf.map((subschema) => {\n    if (typeof subschema === 'boolean' || !(REF_KEY in subschema)) {\n      return subschema;\n    }\n    return resolveReference<T, S, F>(validator, subschema as S, rootSchema, formData);\n  });\n  return withExactlyOneSubschema<T, S, F>(validator, schema, rootSchema, dependencyKey, resolvedOneOf, formData);\n}\n\n/** Returns a `schema` with the best choice from the `oneOf` options merged into it\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be used to validate oneOf options\n * @param schema - The schema for which resolving a oneOf subschema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the oneOf dependency\n * @param oneOf - The list of schemas representing the oneOf options\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns  The schema with the best choice of oneOf schemas merged into\n */\nexport function withExactlyOneSubschema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  oneOf: S['oneOf'],\n  formData?: T\n): S {\n  const validSubschemas = oneOf!.filter((subschema) => {\n    if (typeof subschema === 'boolean' || !subschema || !subschema.properties) {\n      return false;\n    }\n    const { [dependencyKey]: conditionPropertySchema } = subschema.properties;\n    if (conditionPropertySchema) {\n      const conditionSchema: S = {\n        type: 'object',\n        properties: {\n          [dependencyKey]: conditionPropertySchema,\n        },\n      } as S;\n      return validator.isValid(conditionSchema, formData, rootSchema);\n    }\n    return false;\n  });\n\n  if (validSubschemas!.length !== 1) {\n    console.warn(\"ignoring oneOf in dependencies because there isn't exactly one subschema that is valid\");\n    return schema;\n  }\n  const subschema: S = validSubschemas[0] as S;\n  const [dependentSubschema] = splitKeyElementFromObject(dependencyKey, subschema.properties as GenericObjectType);\n  const dependentSchema = { ...subschema, properties: dependentSubschema };\n  return mergeSchemas(schema, retrieveSchema<T, S>(validator, dependentSchema, rootSchema, formData)) as S;\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport reduce from 'lodash/reduce';\nimport times from 'lodash/times';\n\nimport getFirstMatchingOption from './getFirstMatchingOption';\nimport retrieveSchema from './retrieveSchema';\nimport { ONE_OF_KEY, REF_KEY } from '../constants';\nimport guessType from '../guessType';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** A junk option used to determine when the getFirstMatchingOption call really matches an option rather than returning\n * the first item\n */\nexport const JUNK_OPTION: StrictRJSFSchema = {\n  type: 'object',\n  properties: {\n    __not_really_there__: {\n      type: 'number',\n    },\n  },\n};\n\n/** Recursive function that calculates the score of a `formData` against the given `schema`. The computation is fairly\n * simple. Initially the total score is 0. When `schema.properties` object exists, then all the `key/value` pairs within\n * the object are processed as follows after obtaining the formValue from `formData` using the `key`:\n * - If the `value` contains a `$ref`, `calculateIndexScore()` is called recursively with the formValue and the new\n *   schema that is the result of the ref in the schema being resolved and that sub-schema's resulting score is added to\n *   the total.\n * - If the `value` contains a `oneOf` and there is a formValue, then score based on the index returned from calling\n *   `getClosestMatchingOption()` of that oneOf.\n * - If the type of the `value` is 'object', `calculateIndexScore()` is called recursively with the formValue and the\n *   `value` itself as the sub-schema, and the score is added to the total.\n * - If the type of the `value` matches the guessed-type of the `formValue`, the score is incremented by 1, UNLESS the\n *   value has a `default` or `const`. In those case, if the `default` or `const` and the `formValue` match, the score\n *   is incremented by another 1 otherwise it is decremented by 1.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param schema - The schema for which the score is being calculated\n * @param formData - The form data associated with the schema, used to calculate the score\n * @returns - The score a schema against the formData\n */\nexport function calculateIndexScore<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  schema?: S,\n  formData: any = {}\n): number {\n  let totalScore = 0;\n  if (schema) {\n    if (isObject(schema.properties)) {\n      totalScore += reduce(\n        schema.properties,\n        (score, value, key) => {\n          const formValue = get(formData, key);\n          if (typeof value === 'boolean') {\n            return score;\n          }\n          if (has(value, REF_KEY)) {\n            const newSchema = retrieveSchema<T, S, F>(validator, value as S, rootSchema, formValue);\n            return score + calculateIndexScore<T, S, F>(validator, rootSchema, newSchema, formValue || {});\n          }\n          if (has(value, ONE_OF_KEY) && formValue) {\n            return (\n              score + getClosestMatchingOption<T, S, F>(validator, rootSchema, formValue, get(value, ONE_OF_KEY) as S[])\n            );\n          }\n          if (value.type === 'object') {\n            return score + calculateIndexScore<T, S, F>(validator, rootSchema, value as S, formValue || {});\n          }\n          if (value.type === guessType(formValue)) {\n            // If the types match, then we bump the score by one\n            let newScore = score + 1;\n            if (value.default) {\n              // If the schema contains a readonly default value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.default ? 1 : -1;\n            } else if (value.const) {\n              // If the schema contains a const value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.const ? 1 : -1;\n            }\n            // TODO eventually, deal with enums/arrays\n            return newScore;\n          }\n          return score;\n        },\n        0\n      );\n    } else if (isString(schema.type) && schema.type === guessType(formData)) {\n      totalScore += 1;\n    }\n  }\n  return totalScore;\n}\n\n/** Determines which of the given `options` provided most closely matches the `formData`. Using\n * `getFirstMatchingOption()` to match two schemas that differ only by the readOnly, default or const value of a field\n * based on the `formData` and returns 0 when there is no match. Rather than passing in all the `options` at once to\n * this utility, instead an array of valid option indexes is created by iterating over the list of options, call\n * `getFirstMatchingOptions` with a list of one junk option and one good option, seeing if the good option is considered\n * matched.\n *\n * Once the list of valid indexes is created, if there is only one valid index, just return it. Otherwise, if there are\n * no valid indexes, then fill the valid indexes array with the indexes of all the options. Next, the index of the\n * option with the highest score is determined by iterating over the list of valid options, calling\n * `calculateIndexScore()` on each, comparing it against the current best score, and returning the index of the one that\n * eventually has the best score.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param formData - The form data associated with the schema\n * @param options - The list of options that can be selected from\n * @param [selectedOption=-1] - The index of the currently selected option, defaulted to -1 if not specified\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n */\nexport default function getClosestMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  formData: T | undefined,\n  options: S[],\n  selectedOption = -1,\n  discriminatorField?: string\n): number {\n  // Reduce the array of options down to a list of the indexes that are considered matching options\n  const allValidIndexes = options.reduce((validList: number[], option, index: number) => {\n    const testOptions: S[] = [JUNK_OPTION as S, option];\n    const match = getFirstMatchingOption<T, S, F>(validator, formData, testOptions, rootSchema, discriminatorField);\n    // The match is the real option, so add its index to list of valid indexes\n    if (match === 1) {\n      validList.push(index);\n    }\n    return validList;\n  }, []);\n\n  // There is only one valid index, so return it!\n  if (allValidIndexes.length === 1) {\n    return allValidIndexes[0];\n  }\n  if (!allValidIndexes.length) {\n    // No indexes were valid, so we'll score all the options, add all the indexes\n    times(options.length, (i) => allValidIndexes.push(i));\n  }\n  type BestType = { bestIndex: number; bestScore: number };\n  // Score all the options in the list of valid indexes and return the index with the best score\n  const { bestIndex }: BestType = allValidIndexes.reduce(\n    (scoreData: BestType, index: number) => {\n      const { bestScore } = scoreData;\n      let option = options[index];\n      if (has(option, REF_KEY)) {\n        option = retrieveSchema<T, S, F>(validator, option, rootSchema, formData);\n      }\n      const score = calculateIndexScore(validator, rootSchema, option, formData);\n      if (score > bestScore) {\n        return { bestIndex: index, bestScore: score };\n      }\n      return scoreData;\n    },\n    { bestIndex: selectedOption, bestScore: 0 }\n  );\n  return bestIndex;\n}\n","import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { ANY_OF_KEY, DEFAULT_KEY, DEPENDENCIES_KEY, PROPERTIES_KEY, ONE_OF_KEY, REF_KEY } from '../constants';\nimport findSchemaDefinition from '../findSchemaDefinition';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport getSchemaType from '../getSchemaType';\nimport isObject from '../isObject';\nimport isFixedItems from '../isFixedItems';\nimport mergeDefaultsWithFormData from '../mergeDefaultsWithFormData';\nimport mergeObjects from '../mergeObjects';\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport isMultiSelect from './isMultiSelect';\nimport retrieveSchema, { resolveDependencies } from './retrieveSchema';\n\n/** Enum that indicates how `schema.additionalItems` should be handled by the `getInnerSchemaForArrayItem()` function.\n */\nexport enum AdditionalItemsHandling {\n  Ignore,\n  Invert,\n  Fallback,\n}\n\n/** Given a `schema` will return an inner schema that for an array item. This is computed differently based on the\n * `additionalItems` enum and the value of `idx`. There are four possible returns:\n * 1. If `idx` is >= 0, then if `schema.items` is an array the `idx`th element of the array is returned if it is a valid\n *    index and not a boolean, otherwise it falls through to 3.\n * 2. If `schema.items` is not an array AND truthy and not a boolean, then `schema.items` is returned since it actually\n *    is a schema, otherwise it falls through to 3.\n * 3. If `additionalItems` is not `AdditionalItemsHandling.Ignore` and `schema.additionalItems` is an object, then\n *    `schema.additionalItems` is returned since it actually is a schema, otherwise it falls through to 4.\n * 4. {} is returned representing an empty schema\n *\n * @param schema - The schema from which to get the particular item\n * @param [additionalItems=AdditionalItemsHandling.Ignore] - How do we want to handle additional items?\n * @param [idx=-1] - Index, if non-negative, will be used to return the idx-th element in a `schema.items` array\n * @returns - The best fit schema object from the `schema` given the `additionalItems` and `idx` modifiers\n */\nexport function getInnerSchemaForArrayItem<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  additionalItems: AdditionalItemsHandling = AdditionalItemsHandling.Ignore,\n  idx = -1\n): S {\n  if (idx >= 0) {\n    if (Array.isArray(schema.items) && idx < schema.items.length) {\n      const item = schema.items[idx];\n      if (typeof item !== 'boolean') {\n        return item as S;\n      }\n    }\n  } else if (schema.items && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n    return schema.items as S;\n  }\n  if (additionalItems !== AdditionalItemsHandling.Ignore && isObject(schema.additionalItems)) {\n    return schema.additionalItems as S;\n  }\n  return {} as S;\n}\n\n/** Either add `computedDefault` at `key` into `obj` or not add it based on its value and the value of\n * `includeUndefinedValues`. Generally undefined `computedDefault` values are added only when `includeUndefinedValues`\n * is either true or \"excludeObjectChildren\". If `includeUndefinedValues` is false, then non-undefined and\n * non-empty-object values will be added.\n *\n * @param obj - The object into which the computed default may be added\n * @param key - The key into the object at which the computed default may be added\n * @param computedDefault - The computed default value that maybe should be added to the obj\n * @param includeUndefinedValues - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties. If \"allowEmptyObject\", prevents undefined\n *          values in this object while allow the object itself to be empty and passing `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param requiredFields - The list of fields that are required\n */\nfunction maybeAddDefaultToObject<T = any>(\n  obj: GenericObjectType,\n  key: string,\n  computedDefault: T | T[] | undefined,\n  includeUndefinedValues: boolean | 'excludeObjectChildren',\n  requiredFields: string[] = []\n) {\n  if (includeUndefinedValues) {\n    obj[key] = computedDefault;\n  } else if (isObject(computedDefault)) {\n    // Store computedDefault if it's a non-empty object (e.g. not {})\n    if (!isEmpty(computedDefault) || requiredFields.includes(key)) {\n      obj[key] = computedDefault;\n    }\n  } else if (computedDefault !== undefined) {\n    // Store computedDefault if it's a defined primitive (e.g. true)\n    obj[key] = computedDefault;\n  }\n}\n\n/** Computes the defaults for the current `schema` given the `rawFormData` and `parentDefaults` if any. This drills into\n * each level of the schema, recursively, to fill out every level of defaults provided by the schema.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be used when necessary\n * @param rawSchema - The schema for which the default state is desired\n * @param [parentDefaults] - Any defaults provided by the parent field in the schema\n * @param [rootSchema] - The options root schema, used to primarily to look up `$ref`s\n * @param [rawFormData] - The current formData, if any, onto which to provide any missing defaults\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param [_recurseList=[]] - The list of ref names currently being recursed, used to prevent infinite recursion\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport function computeDefaults<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  rawSchema: S,\n  parentDefaults?: T,\n  rootSchema: S = {} as S,\n  rawFormData?: T,\n  includeUndefinedValues: boolean | 'excludeObjectChildren' = false,\n  _recurseList: string[] = []\n): T | T[] | undefined {\n  const formData: T = (isObject(rawFormData) ? rawFormData : {}) as T;\n  let schema: S = isObject(rawSchema) ? rawSchema : ({} as S);\n  // Compute the defaults recursively: give highest priority to deepest nodes.\n  let defaults: T | T[] | undefined = parentDefaults;\n  if (isObject(defaults) && isObject(schema.default)) {\n    // For object defaults, only override parent defaults that are defined in\n    // schema.default.\n    defaults = mergeObjects(defaults!, schema.default as GenericObjectType) as T;\n  } else if (DEFAULT_KEY in schema) {\n    defaults = schema.default as unknown as T;\n  } else if (REF_KEY in schema) {\n    const refName = schema[REF_KEY];\n    // Use referenced schema defaults for this node.\n    if (!_recurseList.includes(refName!)) {\n      const refSchema = findSchemaDefinition<S>(refName, rootSchema);\n      return computeDefaults<T, S, F>(\n        validator,\n        refSchema,\n        defaults,\n        rootSchema,\n        formData as T,\n        includeUndefinedValues,\n        _recurseList.concat(refName!)\n      );\n    }\n  } else if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchema = resolveDependencies<T, S, F>(validator, schema, rootSchema, formData);\n    return computeDefaults<T, S, F>(\n      validator,\n      resolvedSchema,\n      defaults,\n      rootSchema,\n      formData as T,\n      includeUndefinedValues,\n      _recurseList\n    );\n  } else if (isFixedItems(schema)) {\n    defaults = (schema.items! as S[]).map((itemSchema: S, idx: number) =>\n      computeDefaults<T, S>(\n        validator,\n        itemSchema,\n        Array.isArray(parentDefaults) ? parentDefaults[idx] : undefined,\n        rootSchema,\n        formData as T,\n        includeUndefinedValues,\n        _recurseList\n      )\n    ) as T[];\n  } else if (ONE_OF_KEY in schema) {\n    if (schema.oneOf!.length === 0) {\n      return undefined;\n    }\n    schema = schema.oneOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        schema.oneOf as S[],\n        0\n      )\n    ] as S;\n  } else if (ANY_OF_KEY in schema) {\n    if (schema.anyOf!.length === 0) {\n      return undefined;\n    }\n    schema = schema.anyOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        schema.anyOf as S[],\n        0\n      )\n    ] as S;\n  }\n\n  // Not defaults defined for this node, fallback to generic typed ones.\n  if (typeof defaults === 'undefined') {\n    defaults = schema.default as unknown as T;\n  }\n\n  switch (getSchemaType<S>(schema)) {\n    // We need to recur for object schema inner default values.\n    case 'object': {\n      const objectDefaults = Object.keys(schema.properties || {}).reduce((acc: GenericObjectType, key: string) => {\n        // Compute the defaults for this node, with the parent defaults we might\n        // have from a previous run: defaults[key].\n        const computedDefault = computeDefaults<T, S, F>(\n          validator,\n          get(schema, [PROPERTIES_KEY, key]),\n          get(defaults, [key]),\n          rootSchema,\n          get(formData, [key]),\n          includeUndefinedValues === true,\n          _recurseList\n        );\n        maybeAddDefaultToObject<T>(acc, key, computedDefault, includeUndefinedValues, schema.required);\n        return acc;\n      }, {}) as T;\n      if (schema.additionalProperties) {\n        // as per spec additionalProperties may be either schema or boolean\n        const additionalPropertiesSchema = isObject(schema.additionalProperties) ? schema.additionalProperties : {};\n        const keys = new Set<string>();\n        if (isObject(defaults)) {\n          Object.keys(defaults as GenericObjectType)\n            .filter((key) => !schema.properties || !schema.properties[key])\n            .forEach((key) => keys.add(key));\n        }\n        if (isObject(formData)) {\n          Object.keys(formData as GenericObjectType)\n            .filter((key) => !schema.properties || !schema.properties[key])\n            .forEach((key) => keys.add(key));\n        }\n        keys.forEach((key) => {\n          const computedDefault = computeDefaults(\n            validator,\n            additionalPropertiesSchema as S,\n            get(defaults, [key]),\n            rootSchema,\n            get(formData, [key]),\n            includeUndefinedValues === true,\n            _recurseList\n          );\n          maybeAddDefaultToObject<T>(objectDefaults as GenericObjectType, key, computedDefault, includeUndefinedValues);\n        });\n      }\n      return objectDefaults;\n    }\n    case 'array':\n      // Inject defaults into existing array defaults\n      if (Array.isArray(defaults)) {\n        defaults = defaults.map((item, idx) => {\n          const schemaItem: S = getInnerSchemaForArrayItem<S>(schema, AdditionalItemsHandling.Fallback, idx);\n          return computeDefaults<T, S, F>(validator, schemaItem, item, rootSchema, undefined, undefined, _recurseList);\n        }) as T[];\n      }\n\n      // Deeply inject defaults into already existing form data\n      if (Array.isArray(rawFormData)) {\n        const schemaItem: S = getInnerSchemaForArrayItem<S>(schema);\n        defaults = rawFormData.map((item: T, idx: number) => {\n          return computeDefaults<T, S, F>(\n            validator,\n            schemaItem,\n            get(defaults, [idx]),\n            rootSchema,\n            item,\n            undefined,\n            _recurseList\n          );\n        }) as T[];\n      }\n      if (schema.minItems) {\n        if (!isMultiSelect<T, S, F>(validator, schema, rootSchema)) {\n          const defaultsLength = Array.isArray(defaults) ? defaults.length : 0;\n          if (schema.minItems > defaultsLength) {\n            const defaultEntries: T[] = (defaults || []) as T[];\n            // populate the array with the defaults\n            const fillerSchema: S = getInnerSchemaForArrayItem<S>(schema, AdditionalItemsHandling.Invert);\n            const fillerDefault = fillerSchema.default;\n            const fillerEntries: T[] = new Array(schema.minItems - defaultsLength).fill(\n              computeDefaults<any, S, F>(\n                validator,\n                fillerSchema,\n                fillerDefault,\n                rootSchema,\n                undefined,\n                undefined,\n                _recurseList\n              )\n            ) as T[];\n            // then fill up the rest with either the item default or empty, up to minItems\n            return defaultEntries.concat(fillerEntries);\n          }\n        }\n        return defaults ? defaults : [];\n      }\n  }\n  return defaults;\n}\n\n/** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n * computed to have defaults provided in the `schema`.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the default state is desired\n * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport default function getDefaultFormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  formData?: T,\n  rootSchema?: S,\n  includeUndefinedValues: boolean | 'excludeObjectChildren' = false\n) {\n  if (!isObject(theSchema)) {\n    throw new Error('Invalid schema: ' + theSchema);\n  }\n  const schema = retrieveSchema<T, S, F>(validator, theSchema, rootSchema, formData);\n  const defaults = computeDefaults<T, S, F>(validator, schema, undefined, rootSchema, formData, includeUndefinedValues);\n  if (typeof formData === 'undefined' || formData === null || (typeof formData === 'number' && isNaN(formData))) {\n    // No form data? Use schema defaults.\n    return defaults;\n  }\n  if (isObject(formData)) {\n    return mergeDefaultsWithFormData<T>(defaults as T, formData);\n  }\n  if (Array.isArray(formData)) {\n    return mergeDefaultsWithFormData<T[]>(defaults as T[], formData);\n  }\n  return formData;\n}\n","import isObject from './isObject';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Detects whether the given `schema` contains fixed items. This is the case when `schema.items` is a non-empty array\n * that only contains objects.\n *\n * @param schema - The schema in which to check for fixed items\n * @returns - True if there are fixed items in the schema, false otherwise\n */\nexport default function isFixedItems<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every((item) => isObject(item));\n}\n","import get from 'lodash/get';\n\nimport isObject from './isObject';\nimport { GenericObjectType } from '../src';\n\n/** Merges the `defaults` object of type `T` into the `formData` of type `T`\n *\n * When merging defaults and form data, we want to merge in this specific way:\n * - objects are deeply merged\n * - arrays are merged in such a way that:\n *   - when the array is set in form data, only array entries set in form data\n *     are deeply merged; additional entries from the defaults are ignored\n *   - when the array is not set in form data, the default is copied over\n * - scalars are overwritten/set by form data\n *\n * @param [defaults] - The defaults to merge\n * @param [formData] - The form data into which the defaults will be merged\n * @returns - The resulting merged form data with defaults\n */\nexport default function mergeDefaultsWithFormData<T = any>(defaults?: T, formData?: T): T | undefined {\n  if (Array.isArray(formData)) {\n    const defaultsArray = Array.isArray(defaults) ? defaults : [];\n    const mapped = formData.map((value, idx) => {\n      if (defaultsArray[idx]) {\n        return mergeDefaultsWithFormData<any>(defaultsArray[idx], value);\n      }\n      return value;\n    });\n    return mapped as unknown as T;\n  }\n  if (isObject(formData)) {\n    const acc: { [key in keyof T]: any } = Object.assign({}, defaults); // Prevent mutation of source object.\n    return Object.keys(formData as GenericObjectType).reduce((acc, key) => {\n      acc[key as keyof T] = mergeDefaultsWithFormData<T>(defaults ? get(defaults, key) : {}, get(formData, key));\n      return acc;\n    }, acc);\n  }\n  return formData;\n}\n","import isObject from './isObject';\nimport { GenericObjectType } from './types';\n\n/** Recursively merge deeply nested objects.\n *\n * @param obj1 - The first object to merge\n * @param obj2 - The second object to merge\n * @param [concatArrays=false] - Optional flag that, when true, will cause arrays to be concatenated. Use\n *          \"preventDuplicates\" to merge arrays in a manner that prevents any duplicate entries from being merged.\n *          NOTE: Uses shallow comparison for the duplicate checking.\n * @returns - A new object that is the merge of the two given objects\n */\nexport default function mergeObjects(\n  obj1: GenericObjectType,\n  obj2: GenericObjectType,\n  concatArrays: boolean | 'preventDuplicates' = false\n) {\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeObjects(left, right, concatArrays);\n    } else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {\n      let toMerge = right;\n      if (concatArrays === 'preventDuplicates') {\n        toMerge = right.reduce((result, value) => {\n          if (!left.includes(value)) {\n            result.push(value);\n          }\n          return result;\n        }, []);\n      }\n      acc[key] = left.concat(toMerge);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, Object.assign({}, obj1)); // Prevent mutation of source object.\n}\n","import { CONST_KEY } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** This function checks if the given `schema` matches a single constant value. This happens when either the schema has\n * an `enum` array with a single value or there is a `const` defined.\n *\n * @param schema - The schema for a field\n * @returns - True if the `schema` has a single constant value, false otherwise\n */\nexport default function isConstant<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return (Array.isArray(schema.enum) && schema.enum.length === 1) || CONST_KEY in schema;\n}\n","import isConstant from '../isConstant';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` combination represents a select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which check for a select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a select, otherwise false\n */\nexport default function isSelect<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  rootSchema: S = {} as S\n) {\n  const schema = retrieveSchema<T, S, F>(validator, theSchema, rootSchema, undefined);\n  const altSchemas = schema.oneOf || schema.anyOf;\n  if (Array.isArray(schema.enum)) {\n    return true;\n  }\n  if (Array.isArray(altSchemas)) {\n    return altSchemas.every((altSchemas) => typeof altSchemas !== 'boolean' && isConstant(altSchemas));\n  }\n  return false;\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\nimport isSelect from './isSelect';\n\n/** Checks to see if the `schema` combination represents a multi-select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for a multi-select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a multi-select, otherwise false\n */\nexport default function isMultiSelect<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema?: S) {\n  if (!schema.uniqueItems || !schema.items || typeof schema.items === 'boolean') {\n    return false;\n  }\n  return isSelect<T, S, F>(validator, schema.items as S, rootSchema);\n}\n","import getUiOptions from './getUiOptions';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\n\n/** Checks to see if the `uiSchema` contains the `widget` field and that the widget is not `hidden`\n *\n * @param uiSchema - The UI Schema from which to detect if it is customized\n * @returns - True if the `uiSchema` describes a custom widget, false otherwise\n */\nexport default function isCustomWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}) {\n  return (\n    // TODO: Remove the `&& uiSchema['ui:widget'] !== 'hidden'` once we support hidden widgets for arrays.\n    // https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/#hidden-widgets\n    'widget' in getUiOptions<T, S, F>(uiSchema) && getUiOptions<T, S, F>(uiSchema)['widget'] !== 'hidden'\n  );\n}\n","import { UI_WIDGET_KEY } from '../constants';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for array of files flag is desired\n * @param [uiSchema={}] - The UI schema from which to check the widget\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema/uiSchema contains an array of files, otherwise false\n */\nexport default function isFilesArray<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S\n) {\n  if (uiSchema[UI_WIDGET_KEY] === 'files') {\n    return true;\n  }\n  if (schema.items) {\n    const itemsSchema = retrieveSchema<T, S, F>(validator, schema.items as S, rootSchema);\n    return itemsSchema.type === 'string' && itemsSchema.format === 'data-url';\n  }\n  return false;\n}\n","import { UI_FIELD_KEY, UI_WIDGET_KEY } from '../constants';\nimport getSchemaType from '../getSchemaType';\nimport getUiOptions from '../getUiOptions';\nimport isCustomWidget from '../isCustomWidget';\nimport {\n  FormContextType,\n  GlobalUISchemaOptions,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidatorType,\n} from '../types';\nimport isFilesArray from './isFilesArray';\nimport isMultiSelect from './isMultiSelect';\n\n/** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n * should be displayed in a UI.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the display label flag is desired\n * @param [uiSchema={}] - The UI schema from which to derive potentially displayable information\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - True if the label should be displayed or false if it should not\n */\nexport default function getDisplayLabel<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S,\n  globalOptions?: GlobalUISchemaOptions\n): boolean {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalOptions);\n  const { label = true } = uiOptions;\n  let displayLabel = !!label;\n  const schemaType = getSchemaType<S>(schema);\n\n  if (schemaType === 'array') {\n    displayLabel =\n      isMultiSelect<T, S, F>(validator, schema, rootSchema) ||\n      isFilesArray<T, S, F>(validator, schema, uiSchema, rootSchema) ||\n      isCustomWidget(uiSchema);\n  }\n\n  if (schemaType === 'object') {\n    displayLabel = false;\n  }\n  if (schemaType === 'boolean' && !uiSchema[UI_WIDGET_KEY]) {\n    displayLabel = false;\n  }\n  if (uiSchema[UI_FIELD_KEY]) {\n    displayLabel = false;\n  }\n  return displayLabel;\n}\n","import isEmpty from 'lodash/isEmpty';\n\nimport mergeObjects from '../mergeObjects';\nimport { ErrorSchema, FormContextType, RJSFSchema, StrictRJSFSchema, ValidationData, ValidatorType } from '../types';\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `validator.toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validator - The validator used to convert an ErrorSchema to a list of errors\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n *        removed in the next major release.\n */\nexport default function mergeValidationData<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = validator.toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\n\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport { PROPERTIES_KEY, REF_KEY } from '../constants';\nimport retrieveSchema from './retrieveSchema';\n\nconst NO_VALUE = Symbol('no Value');\n\n/** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the new\n * schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the nature\n * of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the old schema\n * that are non-existent in the new schema are set to `undefined`. The data sanitization process has the following flow:\n *\n * - If the new schema is an object that contains a `properties` object then:\n *   - Create a `removeOldSchemaData` object, setting each key in the `oldSchema.properties` having `data` to undefined\n *   - Create an empty `nestedData` object for use in the key filtering below:\n *   - Iterate over each key in the `newSchema.properties` as follows:\n *     - Get the `formValue` of the key from the `data`\n *     - Get the `oldKeySchema` and `newKeyedSchema` for the key, defaulting to `{}` when it doesn't exist\n *     - Retrieve the schema for any refs within each `oldKeySchema` and/or `newKeySchema`\n *     - Get the types of the old and new keyed schemas and if the old doesn't exist or the old & new are the same then:\n *       - If `removeOldSchemaData` has an entry for the key, delete it since the new schema has the same property\n *       - If type of the key in the new schema is `object`:\n *         - Store the value from the recursive `sanitizeDataForNewSchema` call in `nestedData[key]`\n *       - Otherwise, check for default or const values:\n *         - Get the old and new `default` values from the schema and check:\n *           - If the new `default` value does not match the form value:\n *             - If the old `default` value DOES match the form value, then:\n *               - Replace `removeOldSchemaData[key]` with the new `default`\n *               - Otherwise, if the new schema is `readOnly` then replace `removeOldSchemaData[key]` with undefined\n *         - Get the old and new `const` values from the schema and check:\n *           - If the new `const` value does not match the form value:\n *           - If the old `const` value DOES match the form value, then:\n *             - Replace `removeOldSchemaData[key]` with the new `const`\n *             - Otherwise, replace `removeOldSchemaData[key]` with undefined\n *   - Once all keys have been processed, return an object built as follows:\n *     - `{ ...removeOldSchemaData, ...nestedData, ...pick(data, keysToKeep) }`\n * - If the new and old schema types are array and the `data` is an array then:\n *   - If the type of the old and new schema `items` are a non-array objects:\n *     - Retrieve the schema for any refs within each `oldKeySchema.items` and/or `newKeySchema.items`\n *     - If the `type`s of both items are the same (or the old does not have a type):\n *       - If the type is \"object\", then:\n *         - For each element in the `data` recursively sanitize the data, stopping at `maxItems` if specified\n *       - Otherwise, just return the `data` removing any values after `maxItems` if it is set\n *   - If the type of the old and new schema `items` are booleans of the same value, return `data` as is\n * - Otherwise return `undefined`\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param [newSchema] - The new schema for which the data is being sanitized\n * @param [oldSchema] - The old schema from which the data originated\n * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n * @returns - The new form data, with all the fields uniquely associated with the old schema set\n *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n */\nexport default function sanitizeDataForNewSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, rootSchema: S, newSchema?: S, oldSchema?: S, data: any = {}): T {\n  // By default, we will clear the form data\n  let newFormData;\n  // If the new schema is of type object and that object contains a list of properties\n  if (has(newSchema, PROPERTIES_KEY)) {\n    // Create an object containing root-level keys in the old schema, setting each key to undefined to remove the data\n    const removeOldSchemaData: GenericObjectType = {};\n    if (has(oldSchema, PROPERTIES_KEY)) {\n      const properties = get(oldSchema, PROPERTIES_KEY, {});\n      Object.keys(properties).forEach((key) => {\n        if (has(data, key)) {\n          removeOldSchemaData[key] = undefined;\n        }\n      });\n    }\n    const keys: string[] = Object.keys(get(newSchema, PROPERTIES_KEY, {}));\n    // Create a place to store nested data that will be a side-effect of the filter\n    const nestedData: GenericObjectType = {};\n    keys.forEach((key) => {\n      const formValue = get(data, key);\n      let oldKeyedSchema: S = get(oldSchema, [PROPERTIES_KEY, key], {});\n      let newKeyedSchema: S = get(newSchema, [PROPERTIES_KEY, key], {});\n      // Resolve the refs if they exist\n      if (has(oldKeyedSchema, REF_KEY)) {\n        oldKeyedSchema = retrieveSchema<T, S, F>(validator, oldKeyedSchema, rootSchema, formValue);\n      }\n      if (has(newKeyedSchema, REF_KEY)) {\n        newKeyedSchema = retrieveSchema<T, S, F>(validator, newKeyedSchema, rootSchema, formValue);\n      }\n      // Now get types and see if they are the same\n      const oldSchemaTypeForKey = get(oldKeyedSchema, 'type');\n      const newSchemaTypeForKey = get(newKeyedSchema, 'type');\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaTypeForKey || oldSchemaTypeForKey === newSchemaTypeForKey) {\n        if (has(removeOldSchemaData, key)) {\n          // SIDE-EFFECT: remove the undefined value for a key that has the same type between the old and new schemas\n          delete removeOldSchemaData[key];\n        }\n        // If it is an object, we'll recurse and store the resulting sanitized data for the key\n        if (newSchemaTypeForKey === 'object' || (newSchemaTypeForKey === 'array' && Array.isArray(formValue))) {\n          // SIDE-EFFECT: process the new schema type of object recursively to save iterations\n          const itemData = sanitizeDataForNewSchema<T, S, F>(\n            validator,\n            rootSchema,\n            newKeyedSchema,\n            oldKeyedSchema,\n            formValue\n          );\n          if (itemData !== undefined || newSchemaTypeForKey === 'array') {\n            // only put undefined values for the array type and not the object type\n            nestedData[key] = itemData;\n          }\n        } else {\n          // Ok, the non-object types match, let's make sure that a default or a const of a different value is replaced\n          // with the new default or const. This allows the case where two schemas differ that only by the default/const\n          // value to be properly selected\n          const newOptionDefault = get(newKeyedSchema, 'default', NO_VALUE);\n          const oldOptionDefault = get(oldKeyedSchema, 'default', NO_VALUE);\n          if (newOptionDefault !== NO_VALUE && newOptionDefault !== formValue) {\n            if (oldOptionDefault === formValue) {\n              // If the old default matches the formValue, we'll update the new value to match the new default\n              removeOldSchemaData[key] = newOptionDefault;\n            } else if (get(newKeyedSchema, 'readOnly') === true) {\n              // If the new schema has the default set to read-only, treat it like a const and remove the value\n              removeOldSchemaData[key] = undefined;\n            }\n          }\n\n          const newOptionConst = get(newKeyedSchema, 'const', NO_VALUE);\n          const oldOptionConst = get(oldKeyedSchema, 'const', NO_VALUE);\n          if (newOptionConst !== NO_VALUE && newOptionConst !== formValue) {\n            // Since this is a const, if the old value matches, replace the value with the new const otherwise clear it\n            removeOldSchemaData[key] = oldOptionConst === formValue ? newOptionConst : undefined;\n          }\n        }\n      }\n    });\n\n    newFormData = {\n      ...data,\n      ...removeOldSchemaData,\n      ...nestedData,\n    };\n    // First apply removing the old schema data, then apply the nested data, then apply the old data keys to keep\n  } else if (get(oldSchema, 'type') === 'array' && get(newSchema, 'type') === 'array' && Array.isArray(data)) {\n    let oldSchemaItems = get(oldSchema, 'items');\n    let newSchemaItems = get(newSchema, 'items');\n    // If any of the array types `items` are arrays (remember arrays are objects) then we'll just drop the data\n    // Eventually, we may want to deal with when either of the `items` are arrays since those tuple validations\n    if (\n      typeof oldSchemaItems === 'object' &&\n      typeof newSchemaItems === 'object' &&\n      !Array.isArray(oldSchemaItems) &&\n      !Array.isArray(newSchemaItems)\n    ) {\n      if (has(oldSchemaItems, REF_KEY)) {\n        oldSchemaItems = retrieveSchema<T, S, F>(validator, oldSchemaItems as S, rootSchema, data as T);\n      }\n      if (has(newSchemaItems, REF_KEY)) {\n        newSchemaItems = retrieveSchema<T, S, F>(validator, newSchemaItems as S, rootSchema, data as T);\n      }\n      // Now get types and see if they are the same\n      const oldSchemaType = get(oldSchemaItems, 'type');\n      const newSchemaType = get(newSchemaItems, 'type');\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaType || oldSchemaType === newSchemaType) {\n        const maxItems = get(newSchema, 'maxItems', -1);\n        if (newSchemaType === 'object') {\n          newFormData = data.reduce((newValue, aValue) => {\n            const itemValue = sanitizeDataForNewSchema<T, S, F>(\n              validator,\n              rootSchema,\n              newSchemaItems as S,\n              oldSchemaItems as S,\n              aValue\n            );\n            if (itemValue !== undefined && (maxItems < 0 || newValue.length < maxItems)) {\n              newValue.push(itemValue);\n            }\n            return newValue;\n          }, []);\n        } else {\n          newFormData = maxItems > 0 && data.length > maxItems ? data.slice(0, maxItems) : data;\n        }\n      }\n    } else if (\n      typeof oldSchemaItems === 'boolean' &&\n      typeof newSchemaItems === 'boolean' &&\n      oldSchemaItems === newSchemaItems\n    ) {\n      // If they are both booleans and have the same value just return the data as is otherwise fall-thru to undefined\n      newFormData = data;\n    }\n    // Also probably want to deal with `prefixItems` as tuples with the latest 2020 draft\n  }\n  return newFormData as T;\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { ALL_OF_KEY, DEPENDENCIES_KEY, ID_KEY, ITEMS_KEY, PROPERTIES_KEY, REF_KEY } from '../constants';\nimport isObject from '../isObject';\nimport { FormContextType, IdSchema, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\nimport getSchemaType from '../getSchemaType';\n\n/** An internal helper that generates an `IdSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param idPrefix - The prefix to use for the id\n * @param idSeparator - The separator to use for the path segments in the id\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `IdSchema` object for the `schema`\n */\nfunction toIdSchemaInternal<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  idPrefix: string,\n  idSeparator: string,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  _recurseList: S[] = []\n): IdSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(validator, schema, rootSchema, formData);\n    const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n    if (sameSchemaIndex === -1) {\n      return toIdSchemaInternal<T, S, F>(\n        validator,\n        _schema,\n        idPrefix,\n        idSeparator,\n        id,\n        rootSchema,\n        formData,\n        _recurseList.concat(_schema)\n      );\n    }\n  }\n  if (ITEMS_KEY in schema && !get(schema, [ITEMS_KEY, REF_KEY])) {\n    return toIdSchemaInternal<T, S, F>(\n      validator,\n      get(schema, ITEMS_KEY) as S,\n      idPrefix,\n      idSeparator,\n      id,\n      rootSchema,\n      formData,\n      _recurseList\n    );\n  }\n  const $id = id || idPrefix;\n  const idSchema: IdSchema = { $id } as IdSchema<T>;\n  if (getSchemaType<S>(schema) === 'object' && PROPERTIES_KEY in schema) {\n    for (const name in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, name]);\n      const fieldId = idSchema[ID_KEY] + idSeparator + name;\n      idSchema[name] = toIdSchemaInternal<T, S, F>(\n        validator,\n        isObject(field) ? field : {},\n        idPrefix,\n        idSeparator,\n        fieldId,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [name]),\n        _recurseList\n      );\n    }\n  }\n  return idSchema as IdSchema<T>;\n}\n\n/** Generates an `IdSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [idPrefix='root'] - The prefix to use for the id\n * @param [idSeparator='_'] - The separator to use for the path segments in the id\n * @returns - The `IdSchema` object for the `schema`\n */\nexport default function toIdSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  idPrefix = 'root',\n  idSeparator = '_'\n): IdSchema<T> {\n  return toIdSchemaInternal<T, S, F>(validator, schema, idPrefix, idSeparator, id, rootSchema, formData);\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport set from 'lodash/set';\n\nimport {\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  ADDITIONAL_PROPERTIES_KEY,\n  DEPENDENCIES_KEY,\n  ITEMS_KEY,\n  NAME_KEY,\n  ONE_OF_KEY,\n  PROPERTIES_KEY,\n  REF_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from '../constants';\nimport { FormContextType, PathSchema, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport retrieveSchema from './retrieveSchema';\n\n/** An internal helper that generates an `PathSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `PathSchema` object for the `schema`\n */\nfunction toPathSchemaInternal<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  name: string,\n  rootSchema?: S,\n  formData?: T,\n  _recurseList: S[] = []\n): PathSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(validator, schema, rootSchema, formData);\n    const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n    if (sameSchemaIndex === -1) {\n      return toPathSchemaInternal<T, S, F>(\n        validator,\n        _schema,\n        name,\n        rootSchema,\n        formData,\n        _recurseList.concat(_schema)\n      );\n    }\n  }\n\n  const pathSchema: PathSchema = {\n    [NAME_KEY]: name.replace(/^\\./, ''),\n  } as PathSchema;\n\n  if (ONE_OF_KEY in schema) {\n    const index = getClosestMatchingOption<T, S, F>(validator, rootSchema!, formData, schema.oneOf as S[], 0);\n    const _schema: S = schema.oneOf![index] as S;\n    return toPathSchemaInternal<T, S, F>(validator, _schema, name, rootSchema, formData, _recurseList);\n  }\n\n  if (ANY_OF_KEY in schema) {\n    const index = getClosestMatchingOption<T, S, F>(validator, rootSchema!, formData, schema.anyOf as S[], 0);\n    const _schema: S = schema.anyOf![index] as S;\n    return toPathSchemaInternal<T, S, F>(validator, _schema, name, rootSchema, formData, _recurseList);\n  }\n\n  if (ADDITIONAL_PROPERTIES_KEY in schema && schema[ADDITIONAL_PROPERTIES_KEY] !== false) {\n    set(pathSchema, RJSF_ADDITONAL_PROPERTIES_FLAG, true);\n  }\n\n  if (ITEMS_KEY in schema && Array.isArray(formData)) {\n    formData.forEach((element, i: number) => {\n      pathSchema[i] = toPathSchemaInternal<T, S, F>(\n        validator,\n        schema.items as S,\n        `${name}.${i}`,\n        rootSchema,\n        element,\n        _recurseList\n      );\n    });\n  } else if (PROPERTIES_KEY in schema) {\n    for (const property in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, property]);\n      pathSchema[property] = toPathSchemaInternal<T, S, F>(\n        validator,\n        field,\n        `${name}.${property}`,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [property]),\n        _recurseList\n      );\n    }\n  }\n  return pathSchema as PathSchema<T>;\n}\n\n/** Generates an `PathSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The `PathSchema` object for the `schema`\n */\nexport default function toPathSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  name = '',\n  rootSchema?: S,\n  formData?: T\n): PathSchema<T> {\n  return toPathSchemaInternal(validator, schema, name, rootSchema, formData);\n}\n","import deepEquals from './deepEquals';\nimport {\n  ErrorSchema,\n  FormContextType,\n  GlobalUISchemaOptions,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  SchemaUtilsType,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from './types';\nimport {\n  getDefaultFormState,\n  getDisplayLabel,\n  getClosestMatchingOption,\n  getFirstMatchingOption,\n  getMatchingOption,\n  isFilesArray,\n  isMultiSelect,\n  isSelect,\n  mergeValidationData,\n  retrieveSchema,\n  sanitizeDataForNewSchema,\n  toIdSchema,\n  toPathSchema,\n} from './schema';\n\n/** The `SchemaUtils` class provides a wrapper around the publicly exported APIs in the `utils/schema` directory such\n * that one does not have to explicitly pass the `validator` or `rootSchema` to each method. Since both the `validator`\n * and `rootSchema` generally does not change across a `Form`, this allows for providing a simplified set of APIs to the\n * `@rjsf/core` components and the various themes as well. This class implements the `SchemaUtilsType` interface.\n */\nclass SchemaUtils<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements SchemaUtilsType<T, S, F>\n{\n  rootSchema: S;\n  validator: ValidatorType<T, S, F>;\n\n  /** Constructs the `SchemaUtils` instance with the given `validator` and `rootSchema` stored as instance variables\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n   * @param rootSchema - The root schema that will be forwarded to all the APIs\n   */\n  constructor(validator: ValidatorType<T, S, F>, rootSchema: S) {\n    this.rootSchema = rootSchema;\n    this.validator = validator;\n  }\n\n  /** Returns the `ValidatorType` in the `SchemaUtilsType`\n   *\n   * @returns - The `ValidatorType`\n   */\n  getValidator() {\n    return this.validator;\n  }\n\n  /** Determines whether either the `validator` and `rootSchema` differ from the ones associated with this instance of\n   * the `SchemaUtilsType`. If either `validator` or `rootSchema` are falsy, then return false to prevent the creation\n   * of a new `SchemaUtilsType` with incomplete properties.\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be compared against the current one\n   * @param rootSchema - The root schema that will be compared against the current one\n   * @returns - True if the `SchemaUtilsType` differs from the given `validator` or `rootSchema`\n   */\n  doesSchemaUtilsDiffer(validator: ValidatorType<T, S, F>, rootSchema: S): boolean {\n    if (!validator || !rootSchema) {\n      return false;\n    }\n    return this.validator !== validator || !deepEquals(this.rootSchema, rootSchema);\n  }\n\n  /** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n   * computed to have defaults provided in the `schema`.\n   *\n   * @param schema - The schema for which the default state is desired\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n   *          If \"excludeObjectChildren\", pass `includeUndefinedValues` as false when computing defaults for any nested\n   *          object properties.\n   * @returns - The resulting `formData` with all the defaults provided\n   */\n  getDefaultFormState(\n    schema: S,\n    formData?: T,\n    includeUndefinedValues: boolean | 'excludeObjectChildren' = false\n  ): T | T[] | undefined {\n    return getDefaultFormState<T, S, F>(this.validator, schema, formData, this.rootSchema, includeUndefinedValues);\n  }\n\n  /** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n   * should be displayed in a UI.\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [uiSchema] - The UI schema from which to derive potentially displayable information\n   * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n   * @returns - True if the label should be displayed or false if it should not\n   */\n  getDisplayLabel(schema: S, uiSchema?: UiSchema<T, S, F>, globalOptions?: GlobalUISchemaOptions) {\n    return getDisplayLabel<T, S, F>(this.validator, schema, uiSchema, this.rootSchema, globalOptions);\n  }\n\n  /** Determines which of the given `options` provided most closely matches the `formData`.\n   * Returns the index of the option that is valid and is the closest match, or 0 if there is no match.\n   *\n   * The closest match is determined using the number of matching properties, and more heavily favors options with\n   * matching readOnly, default, or const values.\n   *\n   * @param formData - The form data associated with the schema\n   * @param options - The list of options that can be selected from\n   * @param [selectedOption] - The index of the currently selected option, defaulted to -1 if not specified\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n   */\n  getClosestMatchingOption(\n    formData: T | undefined,\n    options: S[],\n    selectedOption?: number,\n    discriminatorField?: string\n  ): number {\n    return getClosestMatchingOption<T, S, F>(\n      this.validator,\n      this.rootSchema,\n      formData,\n      options,\n      selectedOption,\n      discriminatorField\n    );\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n   * Always returns the first option if there is nothing that matches.\n   *\n   * @param formData - The current formData, if any, used to figure out a match\n   * @param options - The list of options to find a matching options from\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The firstindex of the matched option or 0 if none is available\n   */\n  getFirstMatchingOption(formData: T | undefined, options: S[], discriminatorField?: string): number {\n    return getFirstMatchingOption<T, S, F>(this.validator, formData, options, this.rootSchema, discriminatorField);\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n   * Deprecated, use `getFirstMatchingOption()` instead.\n   *\n   * @param formData - The current formData, if any, onto which to provide any missing defaults\n   * @param options - The list of options to find a matching options from\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The index of the matched option or 0 if none is available\n   * @deprecated\n   */\n  getMatchingOption(formData: T | undefined, options: S[], discriminatorField?: string) {\n    return getMatchingOption<T, S, F>(this.validator, formData, options, this.rootSchema, discriminatorField);\n  }\n\n  /** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n   *\n   * @param schema - The schema for which check for array of files flag is desired\n   * @param [uiSchema] - The UI schema from which to check the widget\n   * @returns - True if schema/uiSchema contains an array of files, otherwise false\n   */\n  isFilesArray(schema: S, uiSchema?: UiSchema<T, S, F>) {\n    return isFilesArray<T, S, F>(this.validator, schema, uiSchema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a multi-select\n   *\n   * @param schema - The schema for which check for a multi-select flag is desired\n   * @returns - True if schema contains a multi-select, otherwise false\n   */\n  isMultiSelect(schema: S) {\n    return isMultiSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a select\n   *\n   * @param schema - The schema for which check for a select flag is desired\n   * @returns - True if schema contains a select, otherwise false\n   */\n  isSelect(schema: S) {\n    return isSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in\n   * the two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n   * `getValidator().toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed,\n   * then `validationData` is returned.\n   *\n   * @param validationData - The current `ValidationData` into which to merge the additional errors\n   * @param [additionalErrorSchema] - The additional set of errors\n   * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n   * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n   *        removed in the next major release.\n   */\n  mergeValidationData(validationData: ValidationData<T>, additionalErrorSchema?: ErrorSchema<T>): ValidationData<T> {\n    return mergeValidationData<T, S, F>(this.validator, validationData, additionalErrorSchema);\n  }\n\n  /** Retrieves an expanded schema that has had all of its conditions, additional properties, references and\n   * dependencies resolved and merged into the `schema` given a `rawFormData` that is used to do the potentially\n   * recursive resolution.\n   *\n   * @param schema - The schema for which retrieving a schema is desired\n   * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n   * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n   */\n  retrieveSchema(schema: S, rawFormData?: T) {\n    return retrieveSchema<T, S, F>(this.validator, schema, this.rootSchema, rawFormData);\n  }\n\n  /** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the\n   * new schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the\n   * nature of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the\n   * old schemas that are non-existent in the new schema are set to `undefined`.\n   *\n   * @param [newSchema] - The new schema for which the data is being sanitized\n   * @param [oldSchema] - The old schema from which the data originated\n   * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n   * @returns - The new form data, with all the fields uniquely associated with the old schema set\n   *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n   */\n  sanitizeDataForNewSchema(newSchema?: S, oldSchema?: S, data?: any): T {\n    return sanitizeDataForNewSchema(this.validator, this.rootSchema, newSchema, oldSchema, data);\n  }\n\n  /** Generates an `IdSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [id] - The base id for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [idPrefix='root'] - The prefix to use for the id\n   * @param [idSeparator='_'] - The separator to use for the path segments in the id\n   * @returns - The `IdSchema` object for the `schema`\n   */\n  toIdSchema(schema: S, id?: string | null, formData?: T, idPrefix = 'root', idSeparator = '_'): IdSchema<T> {\n    return toIdSchema<T, S, F>(this.validator, schema, id, this.rootSchema, formData, idPrefix, idSeparator);\n  }\n\n  /** Generates an `PathSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [name] - The base name for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @returns - The `PathSchema` object for the `schema`\n   */\n  toPathSchema(schema: S, name?: string, formData?: T): PathSchema<T> {\n    return toPathSchema<T, S, F>(this.validator, schema, name, this.rootSchema, formData);\n  }\n}\n\n/** Creates a `SchemaUtilsType` interface that is based around the given `validator` and `rootSchema` parameters. The\n * resulting interface implementation will forward the `validator` and `rootSchema` to all the wrapped APIs.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @returns - An implementation of a `SchemaUtilsType` interface\n */\nexport default function createSchemaUtils<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, rootSchema: S): SchemaUtilsType<T, S, F> {\n  return new SchemaUtils<T, S, F>(validator, rootSchema);\n}\n","/** Potentially substitutes all replaceable parameters with the associated value(s) from the `params` if available. When\n * a `params` array is provided, each value in the array is used to replace any of the replaceable parameters in the\n * `inputString` using the `%1`, `%2`, etc. replacement specifiers.\n *\n * @param inputString - The string which will be potentially updated with replacement parameters\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The updated string with any replacement specifiers replaced\n */\nexport default function replaceStringParameters(inputString: string, params?: string[]) {\n  let output = inputString;\n  if (Array.isArray(params)) {\n    const parts = output.split(/(%\\d)/);\n    params.forEach((param, index) => {\n      const partIndex = parts.findIndex((part) => part === `%${index + 1}`);\n      if (partIndex >= 0) {\n        parts[partIndex] = param;\n      }\n    });\n    output = parts.join('');\n  }\n  return output;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the value(s) from `allEnumOptions` at the index(es) provided by `valueIndex`. If `valueIndex` is not an\n * array AND the index is not valid for `allEnumOptions`, `emptyValue` is returned. If `valueIndex` is an array, AND it\n * contains an invalid index, the returned array will have the resulting undefined values filtered out, leaving only\n * valid values or in the worst case, an empty array.\n *\n * @param valueIndex - The index(es) of the value(s) that should be returned\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [emptyValue] - The value to return when the non-array `valueIndex` does not refer to a real option\n * @returns - The single or list of values specified by the single or list of indexes if they are valid. Otherwise,\n *        `emptyValue` or an empty list.\n */\nexport default function enumOptionsValueForIndex<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number | Array<string | number>,\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  emptyValue?: EnumOptionsType<S>['value']\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  if (Array.isArray(valueIndex)) {\n    return valueIndex.map((index) => enumOptionsValueForIndex(index, allEnumOptions)).filter((val) => val);\n  }\n  // So Number(null) and Number('') both return 0, so use emptyValue for those two values\n  const index = valueIndex === '' || valueIndex === null ? -1 : Number(valueIndex);\n  const option = allEnumOptions[index];\n  return option ? option.value : emptyValue;\n}\n","import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Determines whether the given `value` is (one of) the `selected` value(s).\n *\n * @param value - The value being checked to see if it is selected\n * @param selected - The current selected value or list of values\n * @returns - true if the `value` is one of the `selected` ones, false otherwise\n */\nexport default function enumOptionsIsSelected<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'],\n  selected: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][]\n) {\n  if (Array.isArray(selected)) {\n    return selected.some((sel) => isEqual(sel, value));\n  }\n  return isEqual(selected, value);\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { ErrorSchema } from './types';\nimport { ERRORS_KEY } from './constants';\n\n/** The `ErrorSchemaBuilder<T>` is used to build an `ErrorSchema<T>` since the definition of the `ErrorSchema` type is\n * designed for reading information rather than writing it. Use this class to add, replace or clear errors in an error\n * schema by using either dotted path or an array of path names. Once you are done building the `ErrorSchema`, you can\n * get the result and/or reset all the errors back to an initial set and start again.\n */\nexport default class ErrorSchemaBuilder<T = any> {\n  /** The error schema being built\n   *\n   * @private\n   */\n  private errorSchema: ErrorSchema<T> = {};\n\n  /** Construct an `ErrorSchemaBuilder` with an optional initial set of errors in an `ErrorSchema`.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   */\n  constructor(initialSchema?: ErrorSchema<T>) {\n    this.resetAllErrors(initialSchema);\n  }\n\n  /** Returns the `ErrorSchema` that has been updated by the methods of the `ErrorSchemaBuilder`\n   */\n  get ErrorSchema() {\n    return this.errorSchema;\n  }\n\n  /** Will get an existing `ErrorSchema` at the specified `pathOfError` or create and return one.\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The error block for the given `pathOfError` or the root if not provided\n   * @private\n   */\n  private getOrCreateErrorBlock(pathOfError?: string | string[]) {\n    const hasPath = (Array.isArray(pathOfError) && pathOfError.length > 0) || typeof pathOfError === 'string';\n    let errorBlock: ErrorSchema = hasPath ? get(this.errorSchema, pathOfError) : this.errorSchema;\n    if (!errorBlock && pathOfError) {\n      errorBlock = {};\n      set(this.errorSchema, pathOfError, errorBlock);\n    }\n    return errorBlock;\n  }\n\n  /** Resets all errors in the `ErrorSchemaBuilder` back to the `initialSchema` if provided, otherwise an empty set.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  resetAllErrors(initialSchema?: ErrorSchema<T>) {\n    this.errorSchema = initialSchema ? cloneDeep(initialSchema) : {};\n    return this;\n  }\n\n  /** Adds the `errorOrList` to the list of errors in the `ErrorSchema` at either the root level or the location within\n   * the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to add into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  addErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    let errorsList = get(errorBlock, ERRORS_KEY);\n    if (!Array.isArray(errorsList)) {\n      errorsList = [];\n      errorBlock[ERRORS_KEY] = errorsList;\n    }\n\n    if (Array.isArray(errorOrList)) {\n      errorsList.push(...errorOrList);\n    } else {\n      errorsList.push(errorOrList);\n    }\n    return this;\n  }\n\n  /** Sets/replaces the `errorOrList` as the error(s) in the `ErrorSchema` at either the root level or the location\n   * within the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to set into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to set the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  setErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    // Effectively clone the array being given to prevent accidental outside manipulation of the given list\n    const listToAdd = Array.isArray(errorOrList) ? [...errorOrList] : [errorOrList];\n    set(errorBlock, ERRORS_KEY, listToAdd);\n    return this;\n  }\n\n  /** Clears the error(s) in the `ErrorSchema` at either the root level or the location within the schema described by\n   * the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to clear the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  clearErrors(pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    set(errorBlock, ERRORS_KEY, []);\n    return this;\n  }\n}\n","import { RangeSpecType, StrictRJSFSchema } from './types';\nimport { RJSFSchema } from './types';\n\n/** Extracts the range spec information `{ step?: number, min?: number, max?: number }` that can be spread onto an HTML\n * input from the range analog in the schema `{ multipleOf?: number, minimum?: number, maximum?: number }`.\n *\n * @param schema - The schema from which to extract the range spec\n * @returns - A range specification from the schema\n */\nexport default function rangeSpec<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  const spec: RangeSpecType = {};\n  if (schema.multipleOf) {\n    spec.step = schema.multipleOf;\n  }\n  if (schema.minimum || schema.minimum === 0) {\n    spec.min = schema.minimum;\n  }\n  if (schema.maximum || schema.maximum === 0) {\n    spec.max = schema.maximum;\n  }\n  return spec;\n}\n","import { SUBMIT_BTN_OPTIONS_KEY } from './constants';\nimport getUiOptions from './getUiOptions';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema, UISchemaSubmitButtonOptions } from './types';\n\n/** The default submit button options, exported for testing purposes\n */\nexport const DEFAULT_OPTIONS: UISchemaSubmitButtonOptions = {\n  props: {\n    disabled: false,\n  },\n  submitText: 'Submit',\n  norender: false,\n};\n\n/** Extracts any `ui:submitButtonOptions` from the `uiSchema` and merges them onto the `DEFAULT_OPTIONS`\n *\n * @param [uiSchema={}] - the UI Schema from which to extract submit button props\n * @returns - The merging of the `DEFAULT_OPTIONS` with any custom ones\n */\nexport default function getSubmitButtonOptions<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}): UISchemaSubmitButtonOptions {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  if (uiOptions && uiOptions[SUBMIT_BTN_OPTIONS_KEY]) {\n    const options = uiOptions[SUBMIT_BTN_OPTIONS_KEY] as UISchemaSubmitButtonOptions;\n    return { ...DEFAULT_OPTIONS, ...options };\n  }\n\n  return DEFAULT_OPTIONS;\n}\n","/** An enumeration of all the translatable strings used by `@rjsf/core` and its themes. The value of each of the\n * enumeration keys is expected to be the actual english string. Some strings contain replaceable parameter values\n * as indicated by `%1`, `%2`, etc. The number after the `%` indicates the order of the parameter. The ordering of\n * parameters is important because some languages may choose to put the second parameter before the first in its\n * translation. Also, some strings are rendered using `markdown-to-jsx` and thus support markdown and inline html.\n */\nexport enum TranslatableString {\n  /** Fallback title of an array item, used by ArrayField */\n  ArrayItemTitle = 'Item',\n  /** Missing items reason, used by ArrayField */\n  MissingItems = 'Missing items definition',\n  /** Yes label, used by BooleanField */\n  YesLabel = 'Yes',\n  /** No label, used by BooleanField */\n  NoLabel = 'No',\n  /** Close label, used by ErrorList */\n  CloseLabel = 'Close',\n  /** Errors label, used by ErrorList */\n  ErrorsLabel = 'Errors',\n  /** New additionalProperties string default value, used by ObjectField */\n  NewStringDefault = 'New Value',\n  /** Add button title, used by AddButton */\n  AddButton = 'Add',\n  /** Add button title, used by AddButton */\n  AddItemButton = 'Add Item',\n  /** Copy button title, used by IconButton */\n  CopyButton = 'Copy',\n  /** Move down button title, used by IconButton */\n  MoveDownButton = 'Move down',\n  /** Move up button title, used by IconButton */\n  MoveUpButton = 'Move up',\n  /** Remove button title, used by IconButton */\n  RemoveButton = 'Remove',\n  /** Now label, used by AltDateWidget */\n  NowLabel = 'Now',\n  /** Clear label, used by AltDateWidget */\n  ClearLabel = 'Clear',\n  /** Aria date label, used by DateWidget */\n  AriaDateLabel = 'Select a date',\n  /** File preview label, used by FileWidget */\n  PreviewLabel = 'Preview',\n  /** Decrement button aria label, used by UpDownWidget */\n  DecrementAriaLabel = 'Decrease value by 1',\n  /** Increment button aria label, used by UpDownWidget */\n  IncrementAriaLabel = 'Increase value by 1',\n  // Strings with replaceable parameters\n  /** Unknown field type reason, where %1 will be replaced with the type as provided by SchemaField */\n  UnknownFieldType = 'Unknown field type %1',\n  /** Option prefix, where %1 will be replaced with the option index as provided by MultiSchemaField */\n  OptionPrefix = 'Option %1',\n  /** Option prefix, where %1 and %2 will be replaced by the schema title and option index, respectively as provided by\n   * MultiSchemaField\n   */\n  TitleOptionPrefix = '%1 option %2',\n  /** Key label, where %1 will be replaced by the label as provided by WrapIfAdditionalTemplate */\n  KeyLabel = '%1 Key',\n  // Strings with replaceable parameters AND/OR that support markdown and html\n  /** Invalid object field configuration as provided by the ObjectField */\n  InvalidObjectField = 'Invalid \"%1\" object field configuration: <em>%2</em>.',\n  /** Unsupported field schema, used by UnsupportedField */\n  UnsupportedField = 'Unsupported field schema.',\n  /** Unsupported field schema, where %1 will be replaced by the idSchema.$id as provided by UnsupportedField */\n  UnsupportedFieldWithId = 'Unsupported field schema for field <code>%1</code>.',\n  /** Unsupported field schema, where %1 will be replaced by the reason string as provided by UnsupportedField */\n  UnsupportedFieldWithReason = 'Unsupported field schema: <em>%1</em>.',\n  /** Unsupported field schema, where %1 and %2 will be replaced by the idSchema.$id and reason strings, respectively,\n   * as provided by UnsupportedField\n   */\n  UnsupportedFieldWithIdAndReason = 'Unsupported field schema for field <code>%1</code>: <em>%2</em>.',\n  /** File name, type and size info, where %1, %2 and %3 will be replaced by the file name, file type and file size as\n   * provided by FileWidget\n   */\n  FilesInfo = '<strong>%1</strong> (%2, %3 bytes)',\n}\n","import { createElement } from 'react';\nimport ReactIs from 'react-is';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { FormContextType, RJSFSchema, Widget, RegistryWidgetsType, StrictRJSFSchema } from './types';\nimport getSchemaType from './getSchemaType';\n\n/** The map of schema types to widget type to widget name\n */\nconst widgetMap: { [k: string]: { [j: string]: string } } = {\n  boolean: {\n    checkbox: 'CheckboxWidget',\n    radio: 'RadioWidget',\n    select: 'SelectWidget',\n    hidden: 'HiddenWidget',\n  },\n  string: {\n    text: 'TextWidget',\n    password: 'PasswordWidget',\n    email: 'EmailWidget',\n    hostname: 'TextWidget',\n    ipv4: 'TextWidget',\n    ipv6: 'TextWidget',\n    uri: 'URLWidget',\n    'data-url': 'FileWidget',\n    radio: 'RadioWidget',\n    select: 'SelectWidget',\n    textarea: 'TextareaWidget',\n    hidden: 'HiddenWidget',\n    date: 'DateWidget',\n    datetime: 'DateTimeWidget',\n    'date-time': 'DateTimeWidget',\n    'alt-date': 'AltDateWidget',\n    'alt-datetime': 'AltDateTimeWidget',\n    time: 'TimeWidget',\n    color: 'ColorWidget',\n    file: 'FileWidget',\n  },\n  number: {\n    text: 'TextWidget',\n    select: 'SelectWidget',\n    updown: 'UpDownWidget',\n    range: 'RangeWidget',\n    radio: 'RadioWidget',\n    hidden: 'HiddenWidget',\n  },\n  integer: {\n    text: 'TextWidget',\n    select: 'SelectWidget',\n    updown: 'UpDownWidget',\n    range: 'RangeWidget',\n    radio: 'RadioWidget',\n    hidden: 'HiddenWidget',\n  },\n  array: {\n    select: 'SelectWidget',\n    checkboxes: 'CheckboxesWidget',\n    files: 'FileWidget',\n    hidden: 'HiddenWidget',\n  },\n};\n\n/** Wraps the given widget with stateless functional component that will merge any `defaultProps.options` with the\n * `options` that are provided in the props. It will add the wrapper component as a `MergedWidget` property onto the\n * `Widget` so that future attempts to wrap `AWidget` will return the already existing wrapper.\n *\n * @param AWidget - A widget that will be wrapped or one that is already wrapped\n * @returns - The wrapper widget\n */\nfunction mergeWidgetOptions<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  AWidget: Widget<T, S, F>\n) {\n  let MergedWidget: Widget<T, S, F> | undefined = get(AWidget, 'MergedWidget');\n  // cache return value as property of widget for proper react reconciliation\n  if (!MergedWidget) {\n    const defaultOptions = (AWidget.defaultProps && AWidget.defaultProps.options) || {};\n    MergedWidget = ({ options, ...props }) => {\n      return <AWidget options={{ ...defaultOptions, ...options }} {...props} />;\n    };\n    set(AWidget, 'MergedWidget', MergedWidget);\n  }\n  return MergedWidget;\n}\n\n/** Given a schema representing a field to render and either the name or actual `Widget` implementation, returns the\n * React component that is used to render the widget. If the `widget` is already a React component, then it is wrapped\n * with a `MergedWidget`. Otherwise an attempt is made to look up the widget inside of the `registeredWidgets` map based\n * on the schema type and `widget` name. If no widget component can be found an `Error` is thrown.\n *\n * @param schema - The schema for the field\n * @param [widget] - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - The `Widget` component to use\n * @throws - An error if there is no `Widget` component that can be returned\n */\nexport default function getWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  widget?: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n): Widget<T, S, F> {\n  const type = getSchemaType(schema);\n\n  if (\n    typeof widget === 'function' ||\n    (widget && ReactIs.isForwardRef(createElement(widget))) ||\n    ReactIs.isMemo(widget)\n  ) {\n    return mergeWidgetOptions<T, S, F>(widget as Widget<T, S, F>);\n  }\n\n  if (typeof widget !== 'string') {\n    throw new Error(`Unsupported widget definition: ${typeof widget}`);\n  }\n\n  if (widget in registeredWidgets) {\n    const registeredWidget = registeredWidgets[widget];\n    return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n  }\n\n  if (typeof type === 'string') {\n    if (!(type in widgetMap)) {\n      throw new Error(`No widget for type '${type}'`);\n    }\n\n    if (widget in widgetMap[type]) {\n      const registeredWidget = registeredWidgets[widgetMap[type][widget]];\n      return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n    }\n  }\n\n  throw new Error(`No widget '${widget}' for type '${type}'`);\n}\n","import isString from 'lodash/isString';\n\nimport { IdSchema } from './types';\nimport { ID_KEY } from './constants';\n\n/** Generates a consistent `id` pattern for a given `id` and a `suffix`\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param suffix - The suffix to append to the id\n */\nfunction idGenerator<T = any>(id: IdSchema<T> | string, suffix: string) {\n  const theId = isString(id) ? id : id[ID_KEY];\n  return `${theId}__${suffix}`;\n}\n/** Return a consistent `id` for the field description element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field description element from the given `id`\n */\nexport function descriptionId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'description');\n}\n\n/** Return a consistent `id` for the field error element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field error element from the given `id`\n */\nexport function errorId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'error');\n}\n\n/** Return a consistent `id` for the field examples element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field examples element from the given `id`\n */\nexport function examplesId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'examples');\n}\n\n/** Return a consistent `id` for the field help element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field help element from the given `id`\n */\nexport function helpId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'help');\n}\n\n/** Return a consistent `id` for the field title element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field title element from the given `id`\n */\nexport function titleId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'title');\n}\n\n/** Return a list of element ids that contain additional information about the field that can be used to as the aria\n * description of the field. This is correctly omitting `titleId` which would be \"labeling\" rather than \"describing\" the\n * element.\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param [includeExamples=false] - Optional flag, if true, will add the `examplesId` into the list\n * @returns - The string containing the list of ids for use in an `aria-describedBy` attribute\n */\nexport function ariaDescribedByIds<T = any>(id: IdSchema<T> | string, includeExamples = false) {\n  const examples = includeExamples ? ` ${examplesId<T>(id)}` : '';\n  return `${errorId<T>(id)} ${descriptionId<T>(id)} ${helpId<T>(id)}${examples}`;\n}\n\n/** Return a consistent `id` for the `optionIndex`s of a `Radio` or `Checkboxes` widget\n *\n * @param id - The id of the parent component for the option\n * @param optionIndex - The index of the option for which the id is desired\n * @returns - An id for the option index based on the parent `id`\n */\nexport function optionId(id: string, optionIndex: number) {\n  return `${id}-${optionIndex}`;\n}\n","import { CONST_KEY, ENUM_KEY } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the constant value from the schema when it is either a single value enum or has a const key. Otherwise\n * throws an error.\n *\n * @param schema - The schema from which to obtain the constant value\n * @returns - The constant value for the schema\n * @throws - Error when the schema does not have a constant value\n */\nexport default function toConstant<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  if (ENUM_KEY in schema && Array.isArray(schema.enum) && schema.enum.length === 1) {\n    return schema.enum[0];\n  }\n  if (CONST_KEY in schema) {\n    return schema.const;\n  }\n  throw new Error('schema cannot be inferred as a constant');\n}\n","/** Returns a string representation of the `num` that is padded with leading \"0\"s if necessary\n *\n * @param num - The number to pad\n * @param width - The width of the string at which no lead padding is necessary\n * @returns - The number converted to a string with leading zero padding if the number of digits is less than `width`\n */\nexport default function pad(num: number, width: number) {\n  let s = String(num);\n  while (s.length < width) {\n    s = '0' + s;\n  }\n  return s;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { ErrorSchema, GenericObjectType, RJSFValidationError } from './types';\n\n/** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n *\n * @param errorSchema - The `ErrorSchema` instance to convert\n * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n * @returns - The list of `RJSFValidationErrors` extracted from the `errorSchema`\n */\nexport default function toErrorList<T = any>(\n  errorSchema?: ErrorSchema<T>,\n  fieldPath: string[] = []\n): RJSFValidationError[] {\n  if (!errorSchema) {\n    return [];\n  }\n  let errorList: RJSFValidationError[] = [];\n  if (ERRORS_KEY in errorSchema) {\n    errorList = errorList.concat(\n      errorSchema[ERRORS_KEY]!.map((message: string) => {\n        const property = `.${fieldPath.join('.')}`;\n        return {\n          property,\n          message,\n          stack: `${property} ${message}`,\n        };\n      })\n    );\n  }\n  return Object.keys(errorSchema).reduce((acc, key) => {\n    if (key !== ERRORS_KEY) {\n      const childSchema = (errorSchema as GenericObjectType)[key];\n      if (isPlainObject(childSchema)) {\n        acc = acc.concat(toErrorList(childSchema, [...fieldPath, key]));\n      }\n    }\n    return acc;\n  }, errorList);\n}\n","import isObject from './isObject';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Checks the schema to see if it is allowing additional items, by verifying that `schema.additionalItems` is an\n * object. The user is warned in the console if `schema.additionalItems` has the value `true`.\n *\n * @param schema - The schema object to check\n * @returns - True if additional items is allowed, otherwise false\n */\nexport default function allowAdditionalItems<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  if (schema.additionalItems === true) {\n    console.warn('additionalItems=true is currently not supported');\n  }\n  return isObject(schema.additionalItems);\n}\n","/** Attempts to convert the string into a number. If an empty string is provided, then `undefined` is returned. If a\n * `null` is provided, it is returned. If the string ends in a `.` then the string is returned because the user may be\n * in the middle of typing a float number. If a number ends in a pattern like `.0`, `.20`, `.030`, string is returned\n * because the user may be typing number that will end in a non-zero digit. Otherwise, the string is wrapped by\n * `Number()` and if that result is not `NaN`, that number will be returned, otherwise the string `value` will be.\n *\n * @param value - The string or null value to convert to a number\n * @returns - The `value` converted to a number when appropriate, otherwise the `value`\n */\nexport default function asNumber(value: string | null) {\n  if (value === '') {\n    return undefined;\n  }\n  if (value === null) {\n    return null;\n  }\n  if (/\\.$/.test(value)) {\n    // '3.' can't really be considered a number even if it parses in js. The\n    // user is most likely entering a float.\n    return value;\n  }\n  if (/\\.0$/.test(value)) {\n    // we need to return this as a string here, to allow for input like 3.07\n    return value;\n  }\n\n  if (/\\.\\d*0$/.test(value)) {\n    // It's a number, that's cool - but we need it as a string so it doesn't screw\n    // with the user when entering dollar amounts or other values (such as those with\n    // specific precision or number of significant digits)\n    return value;\n  }\n\n  const n = Number(value);\n  const valid = typeof n === 'number' && !Number.isNaN(n);\n\n  return valid ? n : value;\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\nimport getUiOptions from './getUiOptions';\n\n/** Checks whether the field described by `schema`, having the `uiSchema` and `formData` supports expanding. The UI for\n * the field can expand if it has additional properties, is not forced as non-expandable by the `uiSchema` and the\n * `formData` object doesn't already have `schema.maxProperties` elements.\n *\n * @param schema - The schema for the field that is being checked\n * @param [uiSchema={}] - The uiSchema for the field\n * @param [formData] - The formData for the field\n * @returns - True if the schema element has additionalProperties, is expandable, and not at the maxProperties limit\n */\nexport default function canExpand<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  uiSchema: UiSchema<T, S, F> = {},\n  formData?: T\n) {\n  if (!schema.additionalProperties) {\n    return false;\n  }\n  const { expandable = true } = getUiOptions<T, S, F>(uiSchema);\n  if (expandable === false) {\n    return expandable;\n  }\n  // if ui:options.expandable was not explicitly set to false, we can add\n  // another property if we have not exceeded maxProperties yet\n  if (schema.maxProperties !== undefined && formData) {\n    return Object.keys(formData).length < schema.maxProperties;\n  }\n  return true;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { FieldValidation, FormValidation, GenericObjectType } from './types';\n\n/** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n *\n * @param formData - The form data around which the error handler is created\n * @returns - A `FormValidation` object based on the `formData` structure\n */\nexport default function createErrorHandler<T = any>(formData: T): FormValidation<T> {\n  const handler: FieldValidation = {\n    // We store the list of errors for this node in a property named __errors\n    // to avoid name collision with a possible sub schema field named\n    // 'errors' (see `utils.toErrorSchema`).\n    [ERRORS_KEY]: [],\n    addError(message: string) {\n      this[ERRORS_KEY]!.push(message);\n    },\n  };\n  if (Array.isArray(formData)) {\n    return formData.reduce((acc, value, key) => {\n      return { ...acc, [key]: createErrorHandler(value) };\n    }, handler);\n  }\n  if (isPlainObject(formData)) {\n    const formObject: GenericObjectType = formData as GenericObjectType;\n    return Object.keys(formObject).reduce((acc, key) => {\n      return { ...acc, [key]: createErrorHandler(formObject[key]) };\n    }, handler as FormValidation<T>);\n  }\n  return handler as FormValidation<T>;\n}\n","/** Given the `FileReader.readAsDataURL()` based `dataURI` extracts that data into an actual Blob along with the name\n * of that Blob if provided in the URL. If no name is provided, then the name falls back to `unknown`.\n *\n * @param dataURI - The `DataUrl` potentially containing name and raw data to be converted to a Blob\n * @returns - an object containing a Blob and its name, extracted from the URI\n */\nexport default function dataURItoBlob(dataURI: string) {\n  // Split metadata from data\n  const splitted: string[] = dataURI.split(',');\n  // Split params\n  const params: string[] = splitted[0].split(';');\n  // Get mime-type from params\n  const type: string = params[0].replace('data:', '');\n  // Filter the name property from params\n  const properties = params.filter((param) => {\n    return param.split('=')[0] === 'name';\n  });\n  // Look for the name and use unknown if no name property.\n  let name: string;\n  if (properties.length !== 1) {\n    name = 'unknown';\n  } else {\n    // Because we filtered out the other property,\n    // we only have the name case here, which we decode to make it human-readable\n    name = decodeURI(properties[0].split('=')[1]);\n  }\n\n  // Built the Uint8Array Blob parameter from the base64 string.\n  try {\n    const binary = atob(splitted[1]);\n    const array = [];\n    for (let i = 0; i < binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    // Create the blob object\n    const blob = new window.Blob([new Uint8Array(array)], { type });\n\n    return { blob, name };\n  } catch (error) {\n    return { blob: { size: 0, type: (error as Error).message }, name: dataURI };\n  }\n}\n","import { TranslatableString } from './enums';\nimport replaceStringParameters from './replaceStringParameters';\n\n/** Translates a `TranslatableString` value `stringToTranslate` into english. When a `params` array is provided, each\n * value in the array is used to replace any of the replaceable parameters in the `stringToTranslate` using the `%1`,\n * `%2`, etc. replacement specifiers.\n *\n * @param stringToTranslate - The `TranslatableString` value to convert to english\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The `stringToTranslate` itself with any replaceable parameter values substituted\n */\nexport default function englishStringTranslator(stringToTranslate: TranslatableString, params?: string[]): string {\n  return replaceStringParameters(stringToTranslate, params);\n}\n","import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n\n/** Removes the enum option value at the `valueIndex` from the currently `selected` (list of) value(s). If `selected` is\n * a list, then that list is updated to remove the enum option value with the `valueIndex` in `allEnumOptions`. If it is\n * a single value, then if the enum option value with the `valueIndex` in `allEnumOptions` matches `selected`, undefined\n * is returned, otherwise the `selected` value is returned.\n *\n * @param valueIndex - The index of the value to be removed from the selected list or single value\n * @param selected - The current (list of) selected value(s)\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated `selected` with the enum option value at `valueIndex` in `allEnumOptions` removed from it,\n *        unless `selected` is a single value. In that case, if the `valueIndex` value matches `selected`, returns\n *        undefined, otherwise `selected`.\n */\nexport default function enumOptionsDeselectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected?: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (Array.isArray(selected)) {\n    return selected.filter((v) => !isEqual(v, value));\n  }\n  return isEqual(value, selected) ? undefined : selected;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsIsSelected from './enumOptionsIsSelected';\n\n/** Returns the index(es) of the options in `allEnumOptions` whose value(s) match the ones in `value`. All the\n * `enumOptions` are filtered based on whether they are a \"selected\" `value` and the index of each selected one is then\n * stored in an array. If `multiple` is true, that array is returned, otherwise the first element in the array is\n * returned.\n *\n * @param value - The single value or list of values for which indexes are desired\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [multiple=false] - Optional flag, if true will return a list of index, otherwise a single one\n * @returns - A single string index for the first `value` in `allEnumOptions`, if not `multiple`. Otherwise, the list\n *        of indexes for (each of) the value(s) in `value`.\n */\nexport default function enumOptionsIndexForValue<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  multiple = false\n): string | string[] | undefined {\n  const selectedIndexes: string[] = allEnumOptions\n    .map((opt, index) => (enumOptionsIsSelected(opt.value, value) ? String(index) : undefined))\n    .filter((opt) => typeof opt !== 'undefined') as string[];\n  if (!multiple) {\n    return selectedIndexes[0];\n  }\n  return selectedIndexes;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n\n/** Add the enum option value at the `valueIndex` to the list of `selected` values in the proper order as defined by\n * `allEnumOptions`\n *\n * @param valueIndex - The index of the value that should be selected\n * @param selected - The current list of selected values\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated list of selected enum values with enum value at the `valueIndex` added to it\n */\nexport default function enumOptionsSelectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected: EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n) {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (value) {\n    const index = allEnumOptions.findIndex((opt) => value === opt.value);\n    const all = allEnumOptions.map(({ value: val }) => val);\n    const updated = selected.slice(0, index).concat(value, selected.slice(index));\n    // As inserting values at predefined index positions doesn't work with empty\n    // arrays, we need to reorder the updated selection to match the initial order\n    return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n  }\n  return selected;\n}\n","import rangeSpec from './rangeSpec';\nimport { FormContextType, InputPropsType, RJSFSchema, StrictRJSFSchema, UIOptionsType } from './types';\n\n/** Using the `schema`, `defaultType` and `options`, extract out the props for the <input> element that make sense.\n *\n * @param schema - The schema for the field provided by the widget\n * @param [defaultType] - The default type, if any, for the field provided by the widget\n * @param [options={}] - The UI Options for the field provided by the widget\n * @param [autoDefaultStepAny=true] - Determines whether to auto-default step=any when the type is number and no step\n * @returns - The extracted `InputPropsType` object\n */\nexport default function getInputProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  defaultType?: string,\n  options: UIOptionsType<T, S, F> = {},\n  autoDefaultStepAny = true\n): InputPropsType {\n  const inputProps: InputPropsType = {\n    type: defaultType || 'text',\n    ...rangeSpec(schema),\n  };\n\n  // If options.inputType is set use that as the input type\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!defaultType) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === 'number') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined and we are auto-defaulting the \"any\" step\n      if (autoDefaultStepAny && inputProps.step === undefined) {\n        // Setting step to 'any' fixes a bug in Safari where decimals are not\n        // allowed in number inputs\n        inputProps.step = 'any';\n      }\n    } else if (schema.type === 'integer') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined\n      if (inputProps.step === undefined) {\n        // Since this is integer, you always want to step up or down in multiples of 1\n        inputProps.step = 1;\n      }\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  }\n\n  return inputProps;\n}\n","import { FormContextType, TemplatesType, Registry, UIOptionsType, StrictRJSFSchema, RJSFSchema } from './types';\n\n/** Returns the template with the given `name` from either the `uiSchema` if it is defined or from the `registry`\n * otherwise. NOTE, since `ButtonTemplates` are not overridden in `uiSchema` only those in the `registry` are returned.\n *\n * @param name - The name of the template to fetch, restricted to the keys of `TemplatesType`\n * @param registry - The `Registry` from which to read the template\n * @param [uiOptions={}] - The `UIOptionsType` from which to read an alternate template\n * @returns - The template from either the `uiSchema` or `registry` for the `name`\n */\nexport default function getTemplate<\n  Name extends keyof TemplatesType<T, S, F>,\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(name: Name, registry: Registry<T, S, F>, uiOptions: UIOptionsType<T, S, F> = {}): TemplatesType<T, S, F>[Name] {\n  const { templates } = registry;\n  if (name === 'ButtonTemplates') {\n    return templates[name];\n  }\n  return (\n    // Evaluating uiOptions[name] results in TS2590: Expression produces a union type that is too complex to represent\n    // To avoid that, we cast uiOptions to `any` before accessing the name field\n    ((uiOptions as any)[name] as TemplatesType<T, S, F>[Name]) || templates[name]\n  );\n}\n","import getWidget from './getWidget';\nimport { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema, Widget } from './types';\n\n/** Detects whether the `widget` exists for the `schema` with the associated `registryWidgets` and returns true if it\n * does, or false if it doesn't.\n *\n * @param schema - The schema for the field\n * @param widget - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - True if the widget exists, false otherwise\n */\nexport default function hasWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  widget: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n) {\n  try {\n    getWidget(schema, widget, registeredWidgets);\n    return true;\n  } catch (e) {\n    const err: Error = e as Error;\n    if (err.message && (err.message.startsWith('No widget') || err.message.startsWith('Unsupported widget'))) {\n      return false;\n    }\n    throw e;\n  }\n}\n","import { ReactElement } from 'react';\n\n/** Helper function that will return the value to use for a widget `label` based on `hideLabel`. The `fallback` is used\n * as the return value from the function when `hideLabel` is true. Due to the implementation of theme components, it\n * may be necessary to return something other than `undefined` to cause the theme component to not render a label. Some\n * themes require may `false` and others may require an empty string.\n *\n * @param [label] - The label string or component to render when not hidden\n * @param [hideLabel] - Flag, if true, will cause the label to be hidden\n * @param [fallback] - One of 3 values, `undefined` (the default), `false` or an empty string\n * @returns - `fallback` if `hideLabel` is true, otherwise `label`\n */\nexport function labelValue(label?: string | ReactElement, hideLabel?: boolean, fallback?: ''): undefined | string;\nexport default function labelValue(label?: string | ReactElement, hideLabel?: boolean, fallback?: false | '') {\n  return hideLabel ? fallback : label;\n}\n","/** Converts a local Date string into a UTC date string\n *\n * @param dateString - The string representation of a date as accepted by the `Date()` constructor\n * @returns - A UTC date string if `dateString` is truthy, otherwise undefined\n */\nexport default function localToUTC(dateString: string) {\n  return dateString ? new Date(dateString).toJSON() : undefined;\n}\n","import toConstant from './toConstant';\nimport { RJSFSchema, EnumOptionsType, StrictRJSFSchema } from './types';\n\n/** Gets the list of options from the schema. If the schema has an enum list, then those enum values are returned. The\n * labels for the options will be extracted from the non-standard, RJSF-deprecated `enumNames` if it exists, otherwise\n * the label will be the same as the `value`. If the schema has a `oneOf` or `anyOf`, then the value is the list of\n * `const` values from the schema and the label is either the `schema.title` or the value.\n *\n * @param schema - The schema from which to extract the options list\n * @returns - The list of options from the schema\n */\nexport default function optionsList<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): EnumOptionsType<S>[] | undefined {\n  // enumNames was deprecated in v5 and is intentionally omitted from the RJSFSchema type.\n  // Cast the type to include enumNames so the feature still works.\n  const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n  if (schemaWithEnumNames.enumNames && process.env.NODE_ENV !== 'production') {\n    console.warn('The enumNames property is deprecated and may be removed in a future major release.');\n  }\n  if (schema.enum) {\n    return schema.enum.map((value, i) => {\n      const label = (schemaWithEnumNames.enumNames && schemaWithEnumNames.enumNames[i]) || String(value);\n      return { label, value };\n    });\n  }\n  const altSchemas = schema.oneOf || schema.anyOf;\n  return (\n    altSchemas &&\n    altSchemas.map((aSchemaDef) => {\n      const aSchema = aSchemaDef as S;\n      const value = toConstant(aSchema);\n      const label = aSchema.title || String(value);\n      return {\n        schema: aSchema,\n        label,\n        value,\n      };\n    })\n  );\n}\n","import { GenericObjectType } from './types';\n\n/** Given a list of `properties` and an `order` list, returns a list that contains the `properties` ordered correctly.\n * If `order` is not an array, then the untouched `properties` list is returned. Otherwise `properties` is ordered per\n * the `order` list. If `order` contains a '*' then any `properties` that are not mentioned explicity in `order` will be\n * places in the location of the `*`.\n *\n * @param properties - The list of property keys to be ordered\n * @param order - An array of property keys to be ordered first, with an optional '*' property\n * @returns - A list with the `properties` ordered\n * @throws - Error when the properties cannot be ordered correctly\n */\nexport default function orderProperties(properties: string[], order?: string[]): string[] {\n  if (!Array.isArray(order)) {\n    return properties;\n  }\n\n  const arrayToHash = (arr: string[]) =>\n    arr.reduce((prev: GenericObjectType, curr) => {\n      prev[curr] = true;\n      return prev;\n    }, {});\n  const errorPropList = (arr: string[]) =>\n    arr.length > 1 ? `properties '${arr.join(\"', '\")}'` : `property '${arr[0]}'`;\n  const propertyHash = arrayToHash(properties);\n  const orderFiltered = order.filter((prop) => prop === '*' || propertyHash[prop]);\n  const orderHash = arrayToHash(orderFiltered);\n\n  const rest = properties.filter((prop: string) => !orderHash[prop]);\n  const restIndex = orderFiltered.indexOf('*');\n  if (restIndex === -1) {\n    if (rest.length) {\n      throw new Error(`uiSchema order list does not contain ${errorPropList(rest)}`);\n    }\n    return orderFiltered;\n  }\n  if (restIndex !== orderFiltered.lastIndexOf('*')) {\n    throw new Error('uiSchema order list contains more than one wildcard item');\n  }\n\n  const complete = [...orderFiltered];\n  complete.splice(restIndex, 1, ...rest);\n  return complete;\n}\n","import { DateObject } from './types';\n\n/** Parses the `dateString` into a `DateObject`, including the time information when `includeTime` is true\n *\n * @param dateString - The date string to parse into a DateObject\n * @param [includeTime=true] - Optional flag, if false, will not include the time data into the object\n * @returns - The date string converted to a `DateObject`\n * @throws - Error when the date cannot be parsed from the string\n */\nexport default function parseDateString(dateString?: string, includeTime = true): DateObject {\n  if (!dateString) {\n    return {\n      year: -1,\n      month: -1,\n      day: -1,\n      hour: includeTime ? -1 : 0,\n      minute: includeTime ? -1 : 0,\n      second: includeTime ? -1 : 0,\n    };\n  }\n  const date = new Date(dateString);\n  if (Number.isNaN(date.getTime())) {\n    throw new Error('Unable to parse date ' + dateString);\n  }\n  return {\n    year: date.getUTCFullYear(),\n    month: date.getUTCMonth() + 1, // oh you, javascript.\n    day: date.getUTCDate(),\n    hour: includeTime ? date.getUTCHours() : 0,\n    minute: includeTime ? date.getUTCMinutes() : 0,\n    second: includeTime ? date.getUTCSeconds() : 0,\n  };\n}\n","import { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Check to see if a `schema` specifies that a value must be true. This happens when:\n * - `schema.const` is truthy\n * - `schema.enum` == `[true]`\n * - `schema.anyOf` or `schema.oneOf` has a single value which recursively returns true\n * - `schema.allOf` has at least one value which recursively returns true\n *\n * @param schema - The schema to check\n * @returns - True if the schema specifies a value that must be true, false otherwise\n */\nexport default function schemaRequiresTrueValue<S extends StrictRJSFSchema = RJSFSchema>(schema: S): boolean {\n  // Check if const is a truthy value\n  if (schema.const) {\n    return true;\n  }\n\n  // Check if an enum has a single value of true\n  if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {\n    return true;\n  }\n\n  // If anyOf has a single value, evaluate the subschema\n  if (schema.anyOf && schema.anyOf.length === 1) {\n    return schemaRequiresTrueValue(schema.anyOf[0] as S);\n  }\n\n  // If oneOf has a single value, evaluate the subschema\n  if (schema.oneOf && schema.oneOf.length === 1) {\n    return schemaRequiresTrueValue(schema.oneOf[0] as S);\n  }\n\n  // Evaluate each subschema in allOf, to see if one of them requires a true value\n  if (schema.allOf) {\n    const schemaSome = (subSchema: S['additionalProperties']) => schemaRequiresTrueValue(subSchema as S);\n    return schema.allOf.some(schemaSome);\n  }\n\n  return false;\n}\n","import React from 'react';\n\nimport deepEquals from './deepEquals';\n\n/** Determines whether the given `component` should be rerendered by comparing its current set of props and state\n * against the next set. If either of those two sets are not the same, then the component should be rerendered.\n *\n * @param component - A React component being checked\n * @param nextProps - The next set of props against which to check\n * @param nextState - The next set of state against which to check\n * @returns - True if the component should be re-rendered, false otherwise\n */\nexport default function shouldRender(component: React.Component, nextProps: any, nextState: any) {\n  const { props, state } = component;\n  return !deepEquals(props, nextProps) || !deepEquals(state, nextState);\n}\n","import { DateObject } from './types';\n\n/** Returns a UTC date string for the given `dateObject`. If `time` is false, then the time portion of the string is\n * removed.\n *\n * @param dateObject - The `DateObject` to convert to a date string\n * @param [time=true] - Optional flag used to remove the time portion of the date string if false\n * @returns - The UTC date string\n */\nexport default function toDateString(dateObject: DateObject, time = true) {\n  const { year, month, day, hour = 0, minute = 0, second = 0 } = dateObject;\n  const utcTime = Date.UTC(year, month - 1, day, hour, minute, second);\n  const datetime = new Date(utcTime).toJSON();\n  return time ? datetime : datetime.slice(0, 10);\n}\n","import toPath from 'lodash/toPath';\n\nimport { ErrorSchema, RJSFValidationError } from './types';\nimport ErrorSchemaBuilder from './ErrorSchemaBuilder';\n\n/** Transforms a rjsf validation errors list:\n * [\n *   {property: '.level1.level2[2].level3', message: 'err a'},\n *   {property: '.level1.level2[2].level3', message: 'err b'},\n *   {property: '.level1.level2[4].level3', message: 'err b'},\n * ]\n * Into an error tree:\n * {\n *   level1: {\n *     level2: {\n *       2: {level3: {errors: ['err a', 'err b']}},\n *       4: {level3: {errors: ['err b']}},\n *     }\n *   }\n * };\n *\n * @param errors - The list of RJSFValidationError objects\n * @returns - The `ErrorSchema` built from the list of `RJSFValidationErrors`\n */\nexport default function toErrorSchema<T = any>(errors: RJSFValidationError[]): ErrorSchema<T> {\n  const builder = new ErrorSchemaBuilder<T>();\n  if (errors.length) {\n    errors.forEach((error) => {\n      const { property, message } = error;\n      // When the property is the root element, just use an empty array for the path\n      const path = property === '.' ? [] : toPath(property);\n      // If the property is at the root (.level1) then toPath creates\n      // an empty array element at the first index. Remove it.\n      if (path.length > 0 && path[0] === '') {\n        path.splice(0, 1);\n      }\n      if (message) {\n        builder.addErrors(message, path);\n      }\n    });\n  }\n  return builder.ErrorSchema;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ErrorSchema, FormValidation, GenericObjectType } from './types';\n\n/** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError()` functions from it\n *\n * @param errorHandler - The `FormValidation` error handling structure\n * @returns - The `ErrorSchema` resulting from the stripping of the `addError()` function\n */\nexport default function unwrapErrorHandler<T = any>(errorHandler: FormValidation<T>): ErrorSchema<T> {\n  return Object.keys(errorHandler).reduce((acc, key) => {\n    if (key === 'addError') {\n      return acc;\n    } else {\n      const childSchema = (errorHandler as GenericObjectType)[key];\n      if (isPlainObject(childSchema)) {\n        return {\n          ...acc,\n          [key]: unwrapErrorHandler(childSchema),\n        };\n      }\n      return { ...acc, [key]: childSchema };\n    }\n  }, {} as ErrorSchema<T>);\n}\n","import pad from './pad';\n\n/** Converts a UTC date string into a local Date format\n *\n * @param jsonDate - A UTC date string\n * @returns - An empty string when `jsonDate` is falsey, otherwise a date string in local format\n */\nexport default function utcToLocal(jsonDate: string) {\n  if (!jsonDate) {\n    return '';\n  }\n\n  // required format of `'yyyy-MM-ddThh:mm' followed by optional ':ss' or ':ss.SSS'\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type%3Ddatetime-local)\n  // > should be a _valid local date and time string_ (not GMT)\n\n  // Note - date constructor passed local ISO-8601 does not correctly\n  // change time to UTC in node pre-8\n  const date = new Date(jsonDate);\n\n  const yyyy = pad(date.getFullYear(), 4);\n  const MM = pad(date.getMonth() + 1, 2);\n  const dd = pad(date.getDate(), 2);\n  const hh = pad(date.getHours(), 2);\n  const mm = pad(date.getMinutes(), 2);\n  const ss = pad(date.getSeconds(), 2);\n  const SSS = pad(date.getMilliseconds(), 3);\n\n  return `${yyyy}-${MM}-${dd}T${hh}:${mm}:${ss}.${SSS}`;\n}\n","import isEmpty from 'lodash/isEmpty';\n\nimport mergeObjects from './mergeObjects';\nimport toErrorList from './toErrorList';\nimport { ErrorSchema, ValidationData } from './types';\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `toErrorList()` on the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The optional additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n */\nexport default function validationDataMerge<T = any>(\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import { REF_KEY, ROOT_SCHEMA_PREFIX } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixObject<S extends StrictRJSFSchema = RJSFSchema>(node: S): S {\n  for (const key in node) {\n    const realObj: { [k: string]: any } = node;\n    const value = realObj[key];\n    if (key === REF_KEY && typeof value === 'string' && value.startsWith('#')) {\n      realObj[key] = ROOT_SCHEMA_PREFIX + value;\n    } else {\n      realObj[key] = withIdRefPrefix<S>(value);\n    }\n  }\n  return node;\n}\n\n/** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixArray<S extends StrictRJSFSchema = RJSFSchema>(node: S[]): S[] {\n  for (let i = 0; i < node.length; i++) {\n    node[i] = withIdRefPrefix<S>(node[i]) as S;\n  }\n  return node;\n}\n\n/** Recursively prefixes all `$ref`s in a schema with the value of the `ROOT_SCHEMA_PREFIX` constant.\n * This is used in isValid to make references to the rootSchema\n *\n * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n * @returns - A copy of the `schemaNode` with updated `$ref`s\n */\nexport default function withIdRefPrefix<S extends StrictRJSFSchema = RJSFSchema>(schemaNode: S): S | S[] {\n  if (schemaNode.constructor === Object) {\n    return withIdRefPrefixObject<S>({ ...schemaNode });\n  }\n  if (Array.isArray(schemaNode)) {\n    return withIdRefPrefixArray<S>([...schemaNode]);\n  }\n  return schemaNode;\n}\n"],"names":["isObject","thing","File","Date","Array","isArray","ADDITIONAL_PROPERTY_FLAG","ADDITIONAL_PROPERTIES_KEY","ALL_OF_KEY","ANY_OF_KEY","CONST_KEY","DEFAULT_KEY","DEPENDENCIES_KEY","ENUM_KEY","ERRORS_KEY","ITEMS_KEY","ONE_OF_KEY","PROPERTIES_KEY","REQUIRED_KEY","REF_KEY","RJSF_ADDITONAL_PROPERTIES_FLAG","ROOT_SCHEMA_PREFIX","UI_WIDGET_KEY","UI_OPTIONS_KEY","getUiOptions","uiSchema","globalOptions","Object","keys","filter","key","indexOf","reduce","options","_extends2","value","console","error","_extends","substring","deepEquals","a","b","isEqualWith","obj","other","splitKeyElementFromObject","object","omit","findSchemaDefinition","$ref","rootSchema","ref","startsWith","Error","decodeURIComponent","current","jsonpointer","get","undefined","_splitKeyElementFromO","remaining","subSchema","length","getMatchingOption","validator","formData","discriminatorField","i","option","has","discriminator","isValid","requiresAnyOf","anyOf","map","required","augmentedSchema","shallowClone","_objectDestructuringEmpty","allOf","slice","push","assign","getFirstMatchingOption","guessType","isNaN","getSchemaType","schema","type","properties","additionalProperties","includes","find","mergeSchemas","obj1","obj2","acc","left","right","union","resolveReference","retrieveSchema","_objectWithoutPropertiesLoose","_excluded2","rawFormData","resolvedSchema","resolveDependencies","allOfSubschema","resolveSchema","expression","then","otherwise","resolvedSchemaLessConditional","_excluded","conditionalSchema","resolveCondition","mergeAllOf","deep","e","warn","_excluded3","theSchema","aFormData","forEach","set","stubExistingAdditionalProperties","dependencies","_excluded4","oneOf","processDependencies","dependencyKey","remainingDependencies","dependencyValue","withDependentProperties","withDependentSchema","additionallyRequired","from","Set","concat","_retrieveSchema","_excluded5","resolvedOneOf","subschema","validSubschemas","conditionPropertySchema","_properties","conditionSchema","dependentSchema","withExactlyOneSubschema","AdditionalItemsHandling","JUNK_OPTION","__not_really_there__","calculateIndexScore","totalScore","score","formValue","newSchema","getClosestMatchingOption","newScore","isString","selectedOption","allValidIndexes","validList","index","times","scoreData","bestScore","bestIndex","isFixedItems","items","every","item","mergeDefaultsWithFormData","defaults","defaultsArray","idx","mergeObjects","concatArrays","toMerge","result","isConstant","isSelect","altSchemas","isMultiSelect","uniqueItems","getInnerSchemaForArrayItem","additionalItems","Ignore","maybeAddDefaultToObject","computedDefault","includeUndefinedValues","requiredFields","isEmpty","computeDefaults","rawSchema","parentDefaults","_recurseList","refName","refSchema","itemSchema","objectDefaults","additionalPropertiesSchema","add","schemaItem","Fallback","minItems","defaultsLength","defaultEntries","fillerSchema","Invert","fillerDefault","fillerEntries","fill","getDefaultFormState","isCustomWidget","isFilesArray","itemsSchema","format","getDisplayLabel","_uiOptions$label","label","displayLabel","schemaType","UI_FIELD_KEY","mergeValidationData","validationData","additionalErrorSchema","oldErrors","errors","oldErrorSchema","errorSchema","toErrorList","NO_VALUE","Symbol","sanitizeDataForNewSchema","oldSchema","data","newFormData","removeOldSchemaData","nestedData","oldKeyedSchema","newKeyedSchema","oldSchemaTypeForKey","newSchemaTypeForKey","itemData","newOptionDefault","oldOptionDefault","newOptionConst","oldOptionConst","oldSchemaItems","newSchemaItems","oldSchemaType","newSchemaType","maxItems","newValue","aValue","itemValue","toIdSchemaInternal","idPrefix","idSeparator","id","_schema","findIndex","isEqual","idSchema","$id","name","field","fieldId","toIdSchema","toPathSchemaInternal","_pathSchema","pathSchema","replace","element","property","toPathSchema","SchemaUtils","this","_proto","prototype","getValidator","doesSchemaUtilsDiffer","replaceStringParameters","inputString","params","output","parts","split","param","partIndex","part","join","enumOptionsValueForIndex","valueIndex","allEnumOptions","emptyValue","val","Number","enumOptionsIsSelected","selected","some","sel","ErrorSchemaBuilder","initialSchema","resetAllErrors","getOrCreateErrorBlock","pathOfError","errorBlock","cloneDeep","addErrors","errorOrList","_errorsList","errorsList","apply","setErrors","listToAdd","clearErrors","rangeSpec","spec","multipleOf","step","minimum","min","maximum","max","TranslatableString","DEFAULT_OPTIONS","props","disabled","submitText","norender","widgetMap","boolean","checkbox","radio","select","hidden","string","text","password","email","hostname","ipv4","ipv6","uri","textarea","date","datetime","time","color","file","number","updown","range","integer","array","checkboxes","files","getWidget","widget","registeredWidgets","ReactIs","isForwardRef","createElement","isMemo","AWidget","MergedWidget","defaultOptions","defaultProps","_ref","_jsx","jsx","mergeWidgetOptions","idGenerator","suffix","descriptionId","errorId","examplesId","helpId","toConstant","pad","num","width","s","String","fieldPath","errorList","message","stack","childSchema","isPlainObject","exports","includeExamples","examples","test","n","_getUiOptions$expanda","expandable","maxProperties","createErrorHandler","_handler","handler","addError","formObject","_extends3","dataURI","splitted","decodeURI","binary","atob","charCodeAt","blob","window","Blob","Uint8Array","size","stringToTranslate","v","multiple","selectedIndexes","opt","all","sort","defaultType","autoDefaultStepAny","inputProps","inputType","autocomplete","autoComplete","uiOptions","registry","templates","err","hideLabel","fallback","dateString","toJSON","optionIndex","schemaWithEnumNames","enumNames","aSchemaDef","aSchema","title","order","arr","arrayToHash","prev","curr","propertyHash","orderFiltered","prop","orderHash","rest","restIndex","lastIndexOf","complete","splice","includeTime","year","month","day","hour","minute","second","getTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","schemaRequiresTrueValue","component","nextProps","nextState","state","dateObject","_dateObject$hour","_dateObject$minute","_dateObject$second","utcTime","UTC","builder","path","toPath","ErrorSchema","unwrapErrorHandler","errorHandler","jsonDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","withIdRefPrefix","schemaNode","constructor","node","withIdRefPrefixObject","withIdRefPrefixArray"],"mappings":"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"}